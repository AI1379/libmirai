// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR DeviceInfo::DeviceInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bootloader_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.procversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.codename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.incremental_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fingerprint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bootid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.androidid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.baseband_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.innerversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceInfoDefaultTypeInternal() {}
  union {
    DeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
PROTOBUF_CONSTEXPR RequestBody::RequestBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rpt_config_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestBodyDefaultTypeInternal() {}
  union {
    RequestBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestBodyDefaultTypeInternal _RequestBody_default_instance_;
PROTOBUF_CONSTEXPR ConfigSeq::ConfigSeq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfigSeqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigSeqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigSeqDefaultTypeInternal() {}
  union {
    ConfigSeq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigSeqDefaultTypeInternal _ConfigSeq_default_instance_;
PROTOBUF_CONSTEXPR D50ReqBody::D50ReqBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uinlist_)*/{}
  , /*decltype(_impl_._uinlist_cached_byte_size_)*/{0}
  , /*decltype(_impl_.appid_)*/int64_t{0}
  , /*decltype(_impl_.maxpkgsize_)*/0
  , /*decltype(_impl_.starttime_)*/0
  , /*decltype(_impl_.startindex_)*/0
  , /*decltype(_impl_.reqnum_)*/0
  , /*decltype(_impl_.reqmusicswitch_)*/0
  , /*decltype(_impl_.reqmutualmarkalienation_)*/0
  , /*decltype(_impl_.reqmutualmarkscore_)*/0
  , /*decltype(_impl_.reqksingswitch_)*/0
  , /*decltype(_impl_.reqmutualmarklbsshare_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct D50ReqBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR D50ReqBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~D50ReqBodyDefaultTypeInternal() {}
  union {
    D50ReqBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 D50ReqBodyDefaultTypeInternal _D50ReqBody_default_instance_;
PROTOBUF_CONSTEXPR ReqDataHighwayHead::ReqDataHighwayHead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reqextendinfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msgbasehead_)*/nullptr
  , /*decltype(_impl_.msgseghead_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReqDataHighwayHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqDataHighwayHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqDataHighwayHeadDefaultTypeInternal() {}
  union {
    ReqDataHighwayHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqDataHighwayHeadDefaultTypeInternal _ReqDataHighwayHead_default_instance_;
PROTOBUF_CONSTEXPR RspDataHighwayHead::RspDataHighwayHead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rspextendinfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msgbasehead_)*/nullptr
  , /*decltype(_impl_.msgseghead_)*/nullptr
  , /*decltype(_impl_.errorcode_)*/0
  , /*decltype(_impl_.allowretry_)*/0
  , /*decltype(_impl_.cachecost_)*/0
  , /*decltype(_impl_.htcost_)*/0
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.range_)*/int64_t{0}
  , /*decltype(_impl_.isreset_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RspDataHighwayHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RspDataHighwayHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RspDataHighwayHeadDefaultTypeInternal() {}
  union {
    RspDataHighwayHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RspDataHighwayHeadDefaultTypeInternal _RspDataHighwayHead_default_instance_;
PROTOBUF_CONSTEXPR DataHighwayHead::DataHighwayHead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.command_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buildver_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.seq_)*/0
  , /*decltype(_impl_.retrytimes_)*/0
  , /*decltype(_impl_.appid_)*/0
  , /*decltype(_impl_.dataflag_)*/0
  , /*decltype(_impl_.commandid_)*/0
  , /*decltype(_impl_.localeid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataHighwayHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataHighwayHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataHighwayHeadDefaultTypeInternal() {}
  union {
    DataHighwayHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataHighwayHeadDefaultTypeInternal _DataHighwayHead_default_instance_;
PROTOBUF_CONSTEXPR SegHead::SegHead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serviceticket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.md5_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filemd5_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesize_)*/int64_t{0}
  , /*decltype(_impl_.serviceid_)*/0
  , /*decltype(_impl_.datalength_)*/0
  , /*decltype(_impl_.dataoffset_)*/int64_t{0}
  , /*decltype(_impl_.rtcode_)*/0
  , /*decltype(_impl_.flag_)*/0
  , /*decltype(_impl_.cacheaddr_)*/0
  , /*decltype(_impl_.querytimes_)*/0
  , /*decltype(_impl_.updatecacheip_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SegHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegHeadDefaultTypeInternal() {}
  union {
    SegHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegHeadDefaultTypeInternal _SegHead_default_instance_;
PROTOBUF_CONSTEXPR DeleteMessageRequest::DeleteMessageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteMessageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteMessageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteMessageRequestDefaultTypeInternal() {}
  union {
    DeleteMessageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteMessageRequestDefaultTypeInternal _DeleteMessageRequest_default_instance_;
PROTOBUF_CONSTEXPR MessageItem::MessageItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sig_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fromuin_)*/int64_t{0}
  , /*decltype(_impl_.touin_)*/int64_t{0}
  , /*decltype(_impl_.msgtype_)*/0
  , /*decltype(_impl_.msgseq_)*/0
  , /*decltype(_impl_.msguid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageItemDefaultTypeInternal() {}
  union {
    MessageItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageItemDefaultTypeInternal _MessageItem_default_instance_;
PROTOBUF_CONSTEXPR SubD4::SubD4(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uin_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubD4DefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubD4DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubD4DefaultTypeInternal() {}
  union {
    SubD4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubD4DefaultTypeInternal _SubD4_default_instance_;
PROTOBUF_CONSTEXPR Sub8A::Sub8A(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_info_)*/{}
  , /*decltype(_impl_.reserved_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.appid_)*/0
  , /*decltype(_impl_.instid_)*/0
  , /*decltype(_impl_.longmessageflag_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Sub8ADefaultTypeInternal {
  PROTOBUF_CONSTEXPR Sub8ADefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Sub8ADefaultTypeInternal() {}
  union {
    Sub8A _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Sub8ADefaultTypeInternal _Sub8A_default_instance_;
PROTOBUF_CONSTEXPR Sub8AMsgInfo::Sub8AMsgInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fromuin_)*/int64_t{0}
  , /*decltype(_impl_.touin_)*/int64_t{0}
  , /*decltype(_impl_.msguid_)*/int64_t{0}
  , /*decltype(_impl_.msgseq_)*/0
  , /*decltype(_impl_.msgrandom_)*/0
  , /*decltype(_impl_.msgtime_)*/int64_t{0}
  , /*decltype(_impl_.pkgnum_)*/0
  , /*decltype(_impl_.pkgindex_)*/0
  , /*decltype(_impl_.devseq_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Sub8AMsgInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Sub8AMsgInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Sub8AMsgInfoDefaultTypeInternal() {}
  union {
    Sub8AMsgInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Sub8AMsgInfoDefaultTypeInternal _Sub8AMsgInfo_default_instance_;
PROTOBUF_CONSTEXPR SubB3::SubB3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msgaddfrdnotify_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubB3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubB3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubB3DefaultTypeInternal() {}
  union {
    SubB3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubB3DefaultTypeInternal _SubB3_default_instance_;
PROTOBUF_CONSTEXPR SubB3AddFrdNotify::SubB3AddFrdNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nick_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uin_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubB3AddFrdNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubB3AddFrdNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubB3AddFrdNotifyDefaultTypeInternal() {}
  union {
    SubB3AddFrdNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubB3AddFrdNotifyDefaultTypeInternal _SubB3AddFrdNotify_default_instance_;
PROTOBUF_CONSTEXPR Sub44::Sub44(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.friendsyncmsg_)*/nullptr
  , /*decltype(_impl_.groupsyncmsg_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Sub44DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Sub44DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Sub44DefaultTypeInternal() {}
  union {
    Sub44 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Sub44DefaultTypeInternal _Sub44_default_instance_;
PROTOBUF_CONSTEXPR Sub44FriendSyncMsg::Sub44FriendSyncMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.strwording_)*/{}
  , /*decltype(_impl_.uin_)*/int64_t{0}
  , /*decltype(_impl_.fuin_)*/int64_t{0}
  , /*decltype(_impl_.processtype_)*/0
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_.processflag_)*/0
  , /*decltype(_impl_.sourceid_)*/0
  , /*decltype(_impl_.sourcesubid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Sub44FriendSyncMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Sub44FriendSyncMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Sub44FriendSyncMsgDefaultTypeInternal() {}
  union {
    Sub44FriendSyncMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Sub44FriendSyncMsgDefaultTypeInternal _Sub44FriendSyncMsg_default_instance_;
PROTOBUF_CONSTEXPR Sub44GroupSyncMsg::Sub44GroupSyncMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msgbuf_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.authkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msgseq_)*/int64_t{0}
  , /*decltype(_impl_.grpcode_)*/int64_t{0}
  , /*decltype(_impl_.gacode_)*/int64_t{0}
  , /*decltype(_impl_.optuin1_)*/int64_t{0}
  , /*decltype(_impl_.msgtype_)*/0
  , /*decltype(_impl_.msgstatus_)*/0
  , /*decltype(_impl_.optuin2_)*/int64_t{0}
  , /*decltype(_impl_.actionuin_)*/int64_t{0}
  , /*decltype(_impl_.actiontime_)*/int64_t{0}
  , /*decltype(_impl_.curmaxmemcount_)*/0
  , /*decltype(_impl_.nextmaxmemcount_)*/0
  , /*decltype(_impl_.curmemcount_)*/0
  , /*decltype(_impl_.reqsrcid_)*/0
  , /*decltype(_impl_.reqsrcsubid_)*/0
  , /*decltype(_impl_.inviterrole_)*/0
  , /*decltype(_impl_.extadminnum_)*/0
  , /*decltype(_impl_.processflag_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Sub44GroupSyncMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Sub44GroupSyncMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Sub44GroupSyncMsgDefaultTypeInternal() {}
  union {
    Sub44GroupSyncMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Sub44GroupSyncMsgDefaultTypeInternal _Sub44GroupSyncMsg_default_instance_;
PROTOBUF_CONSTEXPR GroupMemberReqBody::GroupMemberReqBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groupcode_)*/int64_t{0}
  , /*decltype(_impl_.uin_)*/int64_t{0}
  , /*decltype(_impl_.newclient_)*/false
  , /*decltype(_impl_.clienttype_)*/0
  , /*decltype(_impl_.richcardnamever_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupMemberReqBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupMemberReqBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupMemberReqBodyDefaultTypeInternal() {}
  union {
    GroupMemberReqBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupMemberReqBodyDefaultTypeInternal _GroupMemberReqBody_default_instance_;
PROTOBUF_CONSTEXPR GroupMemberRspBody::GroupMemberRspBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.meminfo_)*/nullptr
  , /*decltype(_impl_.groupcode_)*/int64_t{0}
  , /*decltype(_impl_.selfrole_)*/0
  , /*decltype(_impl_.boolselflocationshared_)*/false
  , /*decltype(_impl_.grouptype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupMemberRspBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupMemberRspBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupMemberRspBodyDefaultTypeInternal() {}
  union {
    GroupMemberRspBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupMemberRspBodyDefaultTypeInternal _GroupMemberRspBody_default_instance_;
PROTOBUF_CONSTEXPR GroupMemberInfo::GroupMemberInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.errmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remark_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.card_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nick_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lev_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gbartitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gbarurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.specialtitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.phonenum_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.job_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.honor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uin_)*/int64_t{0}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.credit_)*/0
  , /*decltype(_impl_.sex_)*/0
  , /*decltype(_impl_.age_)*/0
  , /*decltype(_impl_.join_)*/int64_t{0}
  , /*decltype(_impl_.isfriend_)*/false
  , /*decltype(_impl_.isconcerned_)*/false
  , /*decltype(_impl_.isallowmodcard_)*/false
  , /*decltype(_impl_.isvip_)*/false
  , /*decltype(_impl_.gbarcnt_)*/0
  , /*decltype(_impl_.lastspeak_)*/int64_t{0}
  , /*decltype(_impl_.isyearvip_)*/false
  , /*decltype(_impl_.issupervip_)*/false
  , /*decltype(_impl_.issuperqq_)*/false
  , /*decltype(_impl_.locationshared_)*/false
  , /*decltype(_impl_.viplev_)*/0
  , /*decltype(_impl_.role_)*/0
  , /*decltype(_impl_.concerntype_)*/0
  , /*decltype(_impl_.int64distance_)*/int64_t{0}
  , /*decltype(_impl_.specialtitleexpiretime_)*/0
  , /*decltype(_impl_.medalid_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupMemberInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupMemberInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupMemberInfoDefaultTypeInternal() {}
  union {
    GroupMemberInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupMemberInfoDefaultTypeInternal _GroupMemberInfo_default_instance_;
static ::_pb::Metadata file_level_metadata_data_2eproto[21];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_data_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_data_2eproto = nullptr;

const uint32_t TableStruct_data_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, _impl_.bootloader_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, _impl_.procversion_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, _impl_.codename_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, _impl_.incremental_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, _impl_.fingerprint_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, _impl_.bootid_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, _impl_.androidid_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, _impl_.baseband_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, _impl_.innerversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RequestBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RequestBody, _impl_.rpt_config_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfigSeq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConfigSeq, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ConfigSeq, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::D50ReqBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::D50ReqBody, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::D50ReqBody, _impl_.maxpkgsize_),
  PROTOBUF_FIELD_OFFSET(::D50ReqBody, _impl_.starttime_),
  PROTOBUF_FIELD_OFFSET(::D50ReqBody, _impl_.startindex_),
  PROTOBUF_FIELD_OFFSET(::D50ReqBody, _impl_.reqnum_),
  PROTOBUF_FIELD_OFFSET(::D50ReqBody, _impl_.uinlist_),
  PROTOBUF_FIELD_OFFSET(::D50ReqBody, _impl_.reqmusicswitch_),
  PROTOBUF_FIELD_OFFSET(::D50ReqBody, _impl_.reqmutualmarkalienation_),
  PROTOBUF_FIELD_OFFSET(::D50ReqBody, _impl_.reqmutualmarkscore_),
  PROTOBUF_FIELD_OFFSET(::D50ReqBody, _impl_.reqksingswitch_),
  PROTOBUF_FIELD_OFFSET(::D50ReqBody, _impl_.reqmutualmarklbsshare_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqDataHighwayHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqDataHighwayHead, _impl_.msgbasehead_),
  PROTOBUF_FIELD_OFFSET(::ReqDataHighwayHead, _impl_.msgseghead_),
  PROTOBUF_FIELD_OFFSET(::ReqDataHighwayHead, _impl_.reqextendinfo_),
  PROTOBUF_FIELD_OFFSET(::ReqDataHighwayHead, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RspDataHighwayHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RspDataHighwayHead, _impl_.msgbasehead_),
  PROTOBUF_FIELD_OFFSET(::RspDataHighwayHead, _impl_.msgseghead_),
  PROTOBUF_FIELD_OFFSET(::RspDataHighwayHead, _impl_.errorcode_),
  PROTOBUF_FIELD_OFFSET(::RspDataHighwayHead, _impl_.allowretry_),
  PROTOBUF_FIELD_OFFSET(::RspDataHighwayHead, _impl_.cachecost_),
  PROTOBUF_FIELD_OFFSET(::RspDataHighwayHead, _impl_.htcost_),
  PROTOBUF_FIELD_OFFSET(::RspDataHighwayHead, _impl_.rspextendinfo_),
  PROTOBUF_FIELD_OFFSET(::RspDataHighwayHead, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::RspDataHighwayHead, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::RspDataHighwayHead, _impl_.isreset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DataHighwayHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DataHighwayHead, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::DataHighwayHead, _impl_.uin_),
  PROTOBUF_FIELD_OFFSET(::DataHighwayHead, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::DataHighwayHead, _impl_.seq_),
  PROTOBUF_FIELD_OFFSET(::DataHighwayHead, _impl_.retrytimes_),
  PROTOBUF_FIELD_OFFSET(::DataHighwayHead, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::DataHighwayHead, _impl_.dataflag_),
  PROTOBUF_FIELD_OFFSET(::DataHighwayHead, _impl_.commandid_),
  PROTOBUF_FIELD_OFFSET(::DataHighwayHead, _impl_.buildver_),
  PROTOBUF_FIELD_OFFSET(::DataHighwayHead, _impl_.localeid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SegHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SegHead, _impl_.serviceid_),
  PROTOBUF_FIELD_OFFSET(::SegHead, _impl_.filesize_),
  PROTOBUF_FIELD_OFFSET(::SegHead, _impl_.dataoffset_),
  PROTOBUF_FIELD_OFFSET(::SegHead, _impl_.datalength_),
  PROTOBUF_FIELD_OFFSET(::SegHead, _impl_.rtcode_),
  PROTOBUF_FIELD_OFFSET(::SegHead, _impl_.serviceticket_),
  PROTOBUF_FIELD_OFFSET(::SegHead, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::SegHead, _impl_.md5_),
  PROTOBUF_FIELD_OFFSET(::SegHead, _impl_.filemd5_),
  PROTOBUF_FIELD_OFFSET(::SegHead, _impl_.cacheaddr_),
  PROTOBUF_FIELD_OFFSET(::SegHead, _impl_.querytimes_),
  PROTOBUF_FIELD_OFFSET(::SegHead, _impl_.updatecacheip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeleteMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DeleteMessageRequest, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MessageItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MessageItem, _impl_.fromuin_),
  PROTOBUF_FIELD_OFFSET(::MessageItem, _impl_.touin_),
  PROTOBUF_FIELD_OFFSET(::MessageItem, _impl_.msgtype_),
  PROTOBUF_FIELD_OFFSET(::MessageItem, _impl_.msgseq_),
  PROTOBUF_FIELD_OFFSET(::MessageItem, _impl_.msguid_),
  PROTOBUF_FIELD_OFFSET(::MessageItem, _impl_.sig_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SubD4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SubD4, _impl_.uin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Sub8A, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Sub8A, _impl_.msg_info_),
  PROTOBUF_FIELD_OFFSET(::Sub8A, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::Sub8A, _impl_.instid_),
  PROTOBUF_FIELD_OFFSET(::Sub8A, _impl_.longmessageflag_),
  PROTOBUF_FIELD_OFFSET(::Sub8A, _impl_.reserved_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Sub8AMsgInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Sub8AMsgInfo, _impl_.fromuin_),
  PROTOBUF_FIELD_OFFSET(::Sub8AMsgInfo, _impl_.touin_),
  PROTOBUF_FIELD_OFFSET(::Sub8AMsgInfo, _impl_.msgseq_),
  PROTOBUF_FIELD_OFFSET(::Sub8AMsgInfo, _impl_.msguid_),
  PROTOBUF_FIELD_OFFSET(::Sub8AMsgInfo, _impl_.msgtime_),
  PROTOBUF_FIELD_OFFSET(::Sub8AMsgInfo, _impl_.msgrandom_),
  PROTOBUF_FIELD_OFFSET(::Sub8AMsgInfo, _impl_.pkgnum_),
  PROTOBUF_FIELD_OFFSET(::Sub8AMsgInfo, _impl_.pkgindex_),
  PROTOBUF_FIELD_OFFSET(::Sub8AMsgInfo, _impl_.devseq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SubB3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SubB3, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::SubB3, _impl_.msgaddfrdnotify_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SubB3AddFrdNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SubB3AddFrdNotify, _impl_.uin_),
  PROTOBUF_FIELD_OFFSET(::SubB3AddFrdNotify, _impl_.nick_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Sub44, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Sub44, _impl_.friendsyncmsg_),
  PROTOBUF_FIELD_OFFSET(::Sub44, _impl_.groupsyncmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Sub44FriendSyncMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Sub44FriendSyncMsg, _impl_.uin_),
  PROTOBUF_FIELD_OFFSET(::Sub44FriendSyncMsg, _impl_.fuin_),
  PROTOBUF_FIELD_OFFSET(::Sub44FriendSyncMsg, _impl_.processtype_),
  PROTOBUF_FIELD_OFFSET(::Sub44FriendSyncMsg, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::Sub44FriendSyncMsg, _impl_.processflag_),
  PROTOBUF_FIELD_OFFSET(::Sub44FriendSyncMsg, _impl_.sourceid_),
  PROTOBUF_FIELD_OFFSET(::Sub44FriendSyncMsg, _impl_.sourcesubid_),
  PROTOBUF_FIELD_OFFSET(::Sub44FriendSyncMsg, _impl_.strwording_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _impl_.msgtype_),
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _impl_.msgseq_),
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _impl_.grpcode_),
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _impl_.gacode_),
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _impl_.optuin1_),
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _impl_.optuin2_),
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _impl_.msgbuf_),
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _impl_.authkey_),
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _impl_.msgstatus_),
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _impl_.actionuin_),
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _impl_.actiontime_),
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _impl_.curmaxmemcount_),
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _impl_.nextmaxmemcount_),
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _impl_.curmemcount_),
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _impl_.reqsrcid_),
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _impl_.reqsrcsubid_),
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _impl_.inviterrole_),
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _impl_.extadminnum_),
  PROTOBUF_FIELD_OFFSET(::Sub44GroupSyncMsg, _impl_.processflag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupMemberReqBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GroupMemberReqBody, _impl_.groupcode_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberReqBody, _impl_.uin_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberReqBody, _impl_.newclient_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberReqBody, _impl_.clienttype_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberReqBody, _impl_.richcardnamever_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupMemberRspBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GroupMemberRspBody, _impl_.groupcode_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberRspBody, _impl_.selfrole_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberRspBody, _impl_.meminfo_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberRspBody, _impl_.boolselflocationshared_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberRspBody, _impl_.grouptype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.uin_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.errmsg_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.isfriend_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.remark_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.isconcerned_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.credit_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.card_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.sex_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.nick_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.age_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.lev_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.join_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.lastspeak_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.gbartitle_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.gbarurl_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.gbarcnt_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.isallowmodcard_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.isvip_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.isyearvip_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.issupervip_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.issuperqq_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.viplev_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.locationshared_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.int64distance_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.concerntype_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.specialtitle_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.specialtitleexpiretime_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.phonenum_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.job_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.medalid_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::GroupMemberInfo, _impl_.honor_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DeviceInfo)},
  { 15, -1, -1, sizeof(::RequestBody)},
  { 22, -1, -1, sizeof(::ConfigSeq)},
  { 30, -1, -1, sizeof(::D50ReqBody)},
  { 47, -1, -1, sizeof(::ReqDataHighwayHead)},
  { 57, -1, -1, sizeof(::RspDataHighwayHead)},
  { 73, -1, -1, sizeof(::DataHighwayHead)},
  { 89, -1, -1, sizeof(::SegHead)},
  { 107, -1, -1, sizeof(::DeleteMessageRequest)},
  { 114, -1, -1, sizeof(::MessageItem)},
  { 126, -1, -1, sizeof(::SubD4)},
  { 133, -1, -1, sizeof(::Sub8A)},
  { 144, -1, -1, sizeof(::Sub8AMsgInfo)},
  { 159, -1, -1, sizeof(::SubB3)},
  { 167, -1, -1, sizeof(::SubB3AddFrdNotify)},
  { 175, -1, -1, sizeof(::Sub44)},
  { 183, -1, -1, sizeof(::Sub44FriendSyncMsg)},
  { 197, -1, -1, sizeof(::Sub44GroupSyncMsg)},
  { 222, -1, -1, sizeof(::GroupMemberReqBody)},
  { 233, -1, -1, sizeof(::GroupMemberRspBody)},
  { 244, -1, -1, sizeof(::GroupMemberInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_DeviceInfo_default_instance_._instance,
  &::_RequestBody_default_instance_._instance,
  &::_ConfigSeq_default_instance_._instance,
  &::_D50ReqBody_default_instance_._instance,
  &::_ReqDataHighwayHead_default_instance_._instance,
  &::_RspDataHighwayHead_default_instance_._instance,
  &::_DataHighwayHead_default_instance_._instance,
  &::_SegHead_default_instance_._instance,
  &::_DeleteMessageRequest_default_instance_._instance,
  &::_MessageItem_default_instance_._instance,
  &::_SubD4_default_instance_._instance,
  &::_Sub8A_default_instance_._instance,
  &::_Sub8AMsgInfo_default_instance_._instance,
  &::_SubB3_default_instance_._instance,
  &::_SubB3AddFrdNotify_default_instance_._instance,
  &::_Sub44_default_instance_._instance,
  &::_Sub44FriendSyncMsg_default_instance_._instance,
  &::_Sub44GroupSyncMsg_default_instance_._instance,
  &::_GroupMemberReqBody_default_instance_._instance,
  &::_GroupMemberRspBody_default_instance_._instance,
  &::_GroupMemberInfo_default_instance_._instance,
};

const char descriptor_table_protodef_data_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ndata.proto\"\274\001\n\nDeviceInfo\022\022\n\nbootloade"
  "r\030\001 \001(\t\022\023\n\013procVersion\030\002 \001(\t\022\020\n\010codename"
  "\030\003 \001(\t\022\023\n\013incremental\030\004 \001(\t\022\023\n\013fingerpri"
  "nt\030\005 \001(\t\022\016\n\006bootId\030\006 \001(\t\022\021\n\tandroidId\030\007 "
  "\001(\t\022\020\n\010baseBand\030\010 \001(\t\022\024\n\014innerVersion\030\t "
  "\001(\t\"2\n\013RequestBody\022#\n\017rpt_config_list\030\001 "
  "\003(\0132\n.ConfigSeq\"*\n\tConfigSeq\022\014\n\004type\030\001 \001"
  "(\005\022\017\n\007version\030\002 \001(\005\"\215\002\n\nD50ReqBody\022\r\n\005ap"
  "pid\030\001 \001(\003\022\022\n\nmaxPkgSize\030\002 \001(\005\022\021\n\tstartTi"
  "me\030\003 \001(\005\022\022\n\nstartIndex\030\004 \001(\005\022\016\n\006reqNum\030\005"
  " \001(\005\022\017\n\007uinList\030\006 \003(\003\022\030\n\016reqMusicSwitch\030"
  "\371\306\005 \001(\005\022!\n\027reqMutualmarkAlienation\030\211\225\006 \001"
  "(\005\022\034\n\022reqMutualmarkScore\030\311\315\010 \001(\005\022\030\n\016reqK"
  "singSwitch\030\331\233\t \001(\005\022\037\n\025reqMutualmarkLbssh"
  "are\030\211\206\013 \001(\005\"\203\001\n\022ReqDataHighwayHead\022%\n\013ms"
  "gBasehead\030\001 \001(\0132\020.DataHighwayHead\022\034\n\nmsg"
  "Seghead\030\002 \001(\0132\010.SegHead\022\025\n\rreqExtendinfo"
  "\030\003 \001(\014\022\021\n\ttimestamp\030\004 \001(\003\"\355\001\n\022RspDataHig"
  "hwayHead\022%\n\013msgBasehead\030\001 \001(\0132\020.DataHigh"
  "wayHead\022\034\n\nmsgSeghead\030\002 \001(\0132\010.SegHead\022\021\n"
  "\terrorCode\030\003 \001(\005\022\022\n\nallowRetry\030\004 \001(\005\022\021\n\t"
  "cachecost\030\005 \001(\005\022\016\n\006htcost\030\006 \001(\005\022\025\n\rrspEx"
  "tendinfo\030\007 \001(\014\022\021\n\ttimestamp\030\010 \001(\003\022\r\n\005ran"
  "ge\030\t \001(\003\022\017\n\007isReset\030\n \001(\005\"\271\001\n\017DataHighwa"
  "yHead\022\017\n\007version\030\001 \001(\005\022\013\n\003uin\030\002 \001(\t\022\017\n\007c"
  "ommand\030\003 \001(\t\022\013\n\003seq\030\004 \001(\005\022\022\n\nretryTimes\030"
  "\005 \001(\005\022\r\n\005appid\030\006 \001(\005\022\020\n\010dataflag\030\007 \001(\005\022\021"
  "\n\tcommandId\030\010 \001(\005\022\020\n\010buildVer\030\t \001(\t\022\020\n\010l"
  "ocaleId\030\n \001(\005\"\347\001\n\007SegHead\022\021\n\tserviceid\030\001"
  " \001(\005\022\020\n\010filesize\030\002 \001(\003\022\022\n\ndataoffset\030\003 \001"
  "(\003\022\022\n\ndatalength\030\004 \001(\005\022\016\n\006rtcode\030\005 \001(\005\022\025"
  "\n\rserviceticket\030\006 \001(\014\022\014\n\004flag\030\007 \001(\005\022\013\n\003m"
  "d5\030\010 \001(\014\022\017\n\007fileMd5\030\t \001(\014\022\021\n\tcacheAddr\030\n"
  " \001(\005\022\022\n\nqueryTimes\030\013 \001(\005\022\025\n\rupdateCachei"
  "p\030\014 \001(\005\"3\n\024DeleteMessageRequest\022\033\n\005items"
  "\030\001 \003(\0132\014.MessageItem\"k\n\013MessageItem\022\017\n\007f"
  "romUin\030\001 \001(\003\022\r\n\005toUin\030\002 \001(\003\022\017\n\007msgType\030\003"
  " \001(\005\022\016\n\006msgSeq\030\004 \001(\005\022\016\n\006msgUid\030\005 \001(\003\022\013\n\003"
  "sig\030\007 \001(\014\"\024\n\005SubD4\022\013\n\003uin\030\001 \001(\003\"r\n\005Sub8A"
  "\022\037\n\010msg_info\030\001 \003(\0132\r.Sub8AMsgInfo\022\r\n\005app"
  "Id\030\002 \001(\005\022\016\n\006instId\030\003 \001(\005\022\027\n\017longMessageF"
  "lag\030\004 \001(\005\022\020\n\010reserved\030\005 \001(\014\"\244\001\n\014Sub8AMsg"
  "Info\022\017\n\007fromUin\030\001 \001(\003\022\r\n\005toUin\030\002 \001(\003\022\016\n\006"
  "msgSeq\030\003 \001(\005\022\016\n\006msgUid\030\004 \001(\003\022\017\n\007msgTime\030"
  "\005 \001(\003\022\021\n\tmsgRandom\030\006 \001(\005\022\016\n\006pkgNum\030\007 \001(\005"
  "\022\020\n\010pkgIndex\030\010 \001(\005\022\016\n\006devSeq\030\t \001(\005\"B\n\005Su"
  "bB3\022\014\n\004type\030\001 \001(\005\022+\n\017msgAddFrdNotify\030\002 \001"
  "(\0132\022.SubB3AddFrdNotify\".\n\021SubB3AddFrdNot"
  "ify\022\013\n\003uin\030\001 \001(\003\022\014\n\004nick\030\005 \001(\t\"]\n\005Sub44\022"
  "*\n\rfriendSyncMsg\030\001 \001(\0132\023.Sub44FriendSync"
  "Msg\022(\n\014groupSyncMsg\030\002 \001(\0132\022.Sub44GroupSy"
  "ncMsg\"\242\001\n\022Sub44FriendSyncMsg\022\013\n\003uin\030\001 \001("
  "\003\022\014\n\004fUin\030\002 \001(\003\022\023\n\013processType\030\003 \001(\005\022\014\n\004"
  "time\030\004 \001(\005\022\023\n\013processFlag\030\005 \001(\005\022\020\n\010sourc"
  "eId\030\006 \001(\005\022\023\n\013sourceSubId\030\007 \001(\005\022\022\n\nstrWor"
  "ding\030\010 \003(\t\"\376\002\n\021Sub44GroupSyncMsg\022\017\n\007msgT"
  "ype\030\001 \001(\005\022\016\n\006msgSeq\030\002 \001(\003\022\017\n\007grpCode\030\003 \001"
  "(\003\022\016\n\006gaCode\030\004 \001(\003\022\017\n\007optUin1\030\005 \001(\003\022\017\n\007o"
  "ptUin2\030\006 \001(\003\022\016\n\006msgBuf\030\007 \001(\014\022\017\n\007authKey\030"
  "\010 \001(\014\022\021\n\tmsgStatus\030\t \001(\005\022\021\n\tactionUin\030\n "
  "\001(\003\022\022\n\nactionTime\030\013 \001(\003\022\026\n\016curMaxMemCoun"
  "t\030\014 \001(\005\022\027\n\017nextMaxMemCount\030\r \001(\005\022\023\n\013curM"
  "emCount\030\016 \001(\005\022\020\n\010reqSrcId\030\017 \001(\005\022\023\n\013reqSr"
  "cSubId\030\020 \001(\005\022\023\n\013inviterRole\030\021 \001(\005\022\023\n\013ext"
  "AdminNum\030\022 \001(\005\022\023\n\013processFlag\030\023 \001(\005\"t\n\022G"
  "roupMemberReqBody\022\021\n\tgroupCode\030\001 \001(\003\022\013\n\003"
  "uin\030\002 \001(\003\022\021\n\tnewClient\030\003 \001(\010\022\022\n\nclientTy"
  "pe\030\004 \001(\005\022\027\n\017richCardNameVer\030\005 \001(\005\"\217\001\n\022Gr"
  "oupMemberRspBody\022\021\n\tgroupCode\030\001 \001(\003\022\020\n\010s"
  "elfRole\030\002 \001(\005\022!\n\007memInfo\030\003 \001(\0132\020.GroupMe"
  "mberInfo\022\036\n\026boolSelfLocationShared\030\004 \001(\010"
  "\022\021\n\tgroupType\030\005 \001(\005\"\367\004\n\017GroupMemberInfo\022"
  "\013\n\003uin\030\001 \001(\003\022\016\n\006result\030\002 \001(\005\022\016\n\006errmsg\030\003"
  " \001(\014\022\020\n\010IsFriend\030\004 \001(\010\022\016\n\006remark\030\005 \001(\014\022\023"
  "\n\013IsConcerned\030\006 \001(\010\022\016\n\006credit\030\007 \001(\005\022\014\n\004c"
  "ard\030\010 \001(\014\022\013\n\003sex\030\t \001(\005\022\020\n\010location\030\n \001(\014"
  "\022\014\n\004nick\030\013 \001(\014\022\013\n\003age\030\014 \001(\005\022\013\n\003lev\030\r \001(\014"
  "\022\014\n\004join\030\016 \001(\003\022\021\n\tlastSpeak\030\017 \001(\003\022\021\n\tgba"
  "rTitle\030\022 \001(\014\022\017\n\007gbarUrl\030\023 \001(\014\022\017\n\007gbarCnt"
  "\030\024 \001(\005\022\026\n\016isAllowModCard\030\025 \001(\010\022\r\n\005isVip\030"
  "\026 \001(\010\022\021\n\tisYearVip\030\027 \001(\010\022\022\n\nisSuperVip\030\030"
  " \001(\010\022\021\n\tisSuperQq\030\031 \001(\010\022\016\n\006vipLev\030\032 \001(\005\022"
  "\014\n\004role\030\033 \001(\005\022\026\n\016locationShared\030\034 \001(\010\022\025\n"
  "\rint64Distance\030\035 \001(\003\022\023\n\013concernType\030\036 \001("
  "\005\022\024\n\014specialTitle\030\037 \001(\014\022\036\n\026specialTitleE"
  "xpireTime\030  \001(\005\022\020\n\010phoneNum\030# \001(\014\022\013\n\003job"
  "\030$ \001(\014\022\017\n\007medalId\030% \001(\005\022\r\n\005level\030\' \001(\005\022\r"
  "\n\005honor\030) \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_data_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_data_2eproto = {
    false, false, 3501, descriptor_table_protodef_data_2eproto,
    "data.proto",
    &descriptor_table_data_2eproto_once, nullptr, 0, 21,
    schemas, file_default_instances, TableStruct_data_2eproto::offsets,
    file_level_metadata_data_2eproto, file_level_enum_descriptors_data_2eproto,
    file_level_service_descriptors_data_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_data_2eproto_getter() {
  return &descriptor_table_data_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_data_2eproto(&descriptor_table_data_2eproto);

// ===================================================================

class DeviceInfo::_Internal {
 public:
};

DeviceInfo::DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bootloader_){}
    , decltype(_impl_.procversion_){}
    , decltype(_impl_.codename_){}
    , decltype(_impl_.incremental_){}
    , decltype(_impl_.fingerprint_){}
    , decltype(_impl_.bootid_){}
    , decltype(_impl_.androidid_){}
    , decltype(_impl_.baseband_){}
    , decltype(_impl_.innerversion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bootloader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bootloader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bootloader().empty()) {
    _this->_impl_.bootloader_.Set(from._internal_bootloader(), 
      _this->GetArenaForAllocation());
  }
  _impl_.procversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.procversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_procversion().empty()) {
    _this->_impl_.procversion_.Set(from._internal_procversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.codename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.codename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codename().empty()) {
    _this->_impl_.codename_.Set(from._internal_codename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.incremental_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.incremental_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_incremental().empty()) {
    _this->_impl_.incremental_.Set(from._internal_incremental(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fingerprint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fingerprint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fingerprint().empty()) {
    _this->_impl_.fingerprint_.Set(from._internal_fingerprint(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bootid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bootid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bootid().empty()) {
    _this->_impl_.bootid_.Set(from._internal_bootid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.androidid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.androidid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_androidid().empty()) {
    _this->_impl_.androidid_.Set(from._internal_androidid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.baseband_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.baseband_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_baseband().empty()) {
    _this->_impl_.baseband_.Set(from._internal_baseband(), 
      _this->GetArenaForAllocation());
  }
  _impl_.innerversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.innerversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_innerversion().empty()) {
    _this->_impl_.innerversion_.Set(from._internal_innerversion(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:DeviceInfo)
}

inline void DeviceInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bootloader_){}
    , decltype(_impl_.procversion_){}
    , decltype(_impl_.codename_){}
    , decltype(_impl_.incremental_){}
    , decltype(_impl_.fingerprint_){}
    , decltype(_impl_.bootid_){}
    , decltype(_impl_.androidid_){}
    , decltype(_impl_.baseband_){}
    , decltype(_impl_.innerversion_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bootloader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bootloader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.procversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.procversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.codename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.codename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.incremental_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.incremental_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fingerprint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fingerprint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bootid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bootid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.androidid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.androidid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.baseband_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.baseband_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.innerversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.innerversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:DeviceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bootloader_.Destroy();
  _impl_.procversion_.Destroy();
  _impl_.codename_.Destroy();
  _impl_.incremental_.Destroy();
  _impl_.fingerprint_.Destroy();
  _impl_.bootid_.Destroy();
  _impl_.androidid_.Destroy();
  _impl_.baseband_.Destroy();
  _impl_.innerversion_.Destroy();
}

void DeviceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bootloader_.ClearToEmpty();
  _impl_.procversion_.ClearToEmpty();
  _impl_.codename_.ClearToEmpty();
  _impl_.incremental_.ClearToEmpty();
  _impl_.fingerprint_.ClearToEmpty();
  _impl_.bootid_.ClearToEmpty();
  _impl_.androidid_.ClearToEmpty();
  _impl_.baseband_.ClearToEmpty();
  _impl_.innerversion_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bootloader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bootloader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DeviceInfo.bootloader"));
        } else
          goto handle_unusual;
        continue;
      // string procVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_procversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DeviceInfo.procVersion"));
        } else
          goto handle_unusual;
        continue;
      // string codename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_codename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DeviceInfo.codename"));
        } else
          goto handle_unusual;
        continue;
      // string incremental = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_incremental();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DeviceInfo.incremental"));
        } else
          goto handle_unusual;
        continue;
      // string fingerprint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_fingerprint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DeviceInfo.fingerprint"));
        } else
          goto handle_unusual;
        continue;
      // string bootId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_bootid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DeviceInfo.bootId"));
        } else
          goto handle_unusual;
        continue;
      // string androidId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_androidid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DeviceInfo.androidId"));
        } else
          goto handle_unusual;
        continue;
      // string baseBand = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_baseband();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DeviceInfo.baseBand"));
        } else
          goto handle_unusual;
        continue;
      // string innerVersion = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_innerversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DeviceInfo.innerVersion"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string bootloader = 1;
  if (!this->_internal_bootloader().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bootloader().data(), static_cast<int>(this->_internal_bootloader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeviceInfo.bootloader");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bootloader(), target);
  }

  // string procVersion = 2;
  if (!this->_internal_procversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_procversion().data(), static_cast<int>(this->_internal_procversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeviceInfo.procVersion");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_procversion(), target);
  }

  // string codename = 3;
  if (!this->_internal_codename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codename().data(), static_cast<int>(this->_internal_codename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeviceInfo.codename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_codename(), target);
  }

  // string incremental = 4;
  if (!this->_internal_incremental().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_incremental().data(), static_cast<int>(this->_internal_incremental().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeviceInfo.incremental");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_incremental(), target);
  }

  // string fingerprint = 5;
  if (!this->_internal_fingerprint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fingerprint().data(), static_cast<int>(this->_internal_fingerprint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeviceInfo.fingerprint");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_fingerprint(), target);
  }

  // string bootId = 6;
  if (!this->_internal_bootid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bootid().data(), static_cast<int>(this->_internal_bootid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeviceInfo.bootId");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_bootid(), target);
  }

  // string androidId = 7;
  if (!this->_internal_androidid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_androidid().data(), static_cast<int>(this->_internal_androidid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeviceInfo.androidId");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_androidid(), target);
  }

  // string baseBand = 8;
  if (!this->_internal_baseband().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_baseband().data(), static_cast<int>(this->_internal_baseband().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeviceInfo.baseBand");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_baseband(), target);
  }

  // string innerVersion = 9;
  if (!this->_internal_innerversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_innerversion().data(), static_cast<int>(this->_internal_innerversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeviceInfo.innerVersion");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_innerversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bootloader = 1;
  if (!this->_internal_bootloader().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bootloader());
  }

  // string procVersion = 2;
  if (!this->_internal_procversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_procversion());
  }

  // string codename = 3;
  if (!this->_internal_codename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codename());
  }

  // string incremental = 4;
  if (!this->_internal_incremental().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_incremental());
  }

  // string fingerprint = 5;
  if (!this->_internal_fingerprint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fingerprint());
  }

  // string bootId = 6;
  if (!this->_internal_bootid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bootid());
  }

  // string androidId = 7;
  if (!this->_internal_androidid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_androidid());
  }

  // string baseBand = 8;
  if (!this->_internal_baseband().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_baseband());
  }

  // string innerVersion = 9;
  if (!this->_internal_innerversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_innerversion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceInfo::GetClassData() const { return &_class_data_; }


void DeviceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceInfo*>(&to_msg);
  auto& from = static_cast<const DeviceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DeviceInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bootloader().empty()) {
    _this->_internal_set_bootloader(from._internal_bootloader());
  }
  if (!from._internal_procversion().empty()) {
    _this->_internal_set_procversion(from._internal_procversion());
  }
  if (!from._internal_codename().empty()) {
    _this->_internal_set_codename(from._internal_codename());
  }
  if (!from._internal_incremental().empty()) {
    _this->_internal_set_incremental(from._internal_incremental());
  }
  if (!from._internal_fingerprint().empty()) {
    _this->_internal_set_fingerprint(from._internal_fingerprint());
  }
  if (!from._internal_bootid().empty()) {
    _this->_internal_set_bootid(from._internal_bootid());
  }
  if (!from._internal_androidid().empty()) {
    _this->_internal_set_androidid(from._internal_androidid());
  }
  if (!from._internal_baseband().empty()) {
    _this->_internal_set_baseband(from._internal_baseband());
  }
  if (!from._internal_innerversion().empty()) {
    _this->_internal_set_innerversion(from._internal_innerversion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bootloader_, lhs_arena,
      &other->_impl_.bootloader_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.procversion_, lhs_arena,
      &other->_impl_.procversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.codename_, lhs_arena,
      &other->_impl_.codename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.incremental_, lhs_arena,
      &other->_impl_.incremental_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fingerprint_, lhs_arena,
      &other->_impl_.fingerprint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bootid_, lhs_arena,
      &other->_impl_.bootid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.androidid_, lhs_arena,
      &other->_impl_.androidid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.baseband_, lhs_arena,
      &other->_impl_.baseband_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.innerversion_, lhs_arena,
      &other->_impl_.innerversion_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[0]);
}

// ===================================================================

class RequestBody::_Internal {
 public:
};

RequestBody::RequestBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RequestBody)
}
RequestBody::RequestBody(const RequestBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rpt_config_list_){from._impl_.rpt_config_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RequestBody)
}

inline void RequestBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rpt_config_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestBody::~RequestBody() {
  // @@protoc_insertion_point(destructor:RequestBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rpt_config_list_.~RepeatedPtrField();
}

void RequestBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestBody::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rpt_config_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ConfigSeq rpt_config_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rpt_config_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RequestBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ConfigSeq rpt_config_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rpt_config_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_rpt_config_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestBody)
  return target;
}

size_t RequestBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ConfigSeq rpt_config_list = 1;
  total_size += 1UL * this->_internal_rpt_config_list_size();
  for (const auto& msg : this->_impl_.rpt_config_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestBody::GetClassData() const { return &_class_data_; }


void RequestBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestBody*>(&to_msg);
  auto& from = static_cast<const RequestBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RequestBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rpt_config_list_.MergeFrom(from._impl_.rpt_config_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestBody::CopyFrom(const RequestBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBody::IsInitialized() const {
  return true;
}

void RequestBody::InternalSwap(RequestBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rpt_config_list_.InternalSwap(&other->_impl_.rpt_config_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[1]);
}

// ===================================================================

class ConfigSeq::_Internal {
 public:
};

ConfigSeq::ConfigSeq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ConfigSeq)
}
ConfigSeq::ConfigSeq(const ConfigSeq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfigSeq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:ConfigSeq)
}

inline void ConfigSeq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConfigSeq::~ConfigSeq() {
  // @@protoc_insertion_point(destructor:ConfigSeq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfigSeq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfigSeq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfigSeq::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigSeq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigSeq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigSeq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigSeq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigSeq)
  return target;
}

size_t ConfigSeq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigSeq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigSeq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfigSeq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigSeq::GetClassData() const { return &_class_data_; }


void ConfigSeq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfigSeq*>(&to_msg);
  auto& from = static_cast<const ConfigSeq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ConfigSeq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigSeq::CopyFrom(const ConfigSeq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigSeq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigSeq::IsInitialized() const {
  return true;
}

void ConfigSeq::InternalSwap(ConfigSeq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigSeq, _impl_.version_)
      + sizeof(ConfigSeq::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(ConfigSeq, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigSeq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[2]);
}

// ===================================================================

class D50ReqBody::_Internal {
 public:
};

D50ReqBody::D50ReqBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:D50ReqBody)
}
D50ReqBody::D50ReqBody(const D50ReqBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  D50ReqBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uinlist_){from._impl_.uinlist_}
    , /*decltype(_impl_._uinlist_cached_byte_size_)*/{0}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.maxpkgsize_){}
    , decltype(_impl_.starttime_){}
    , decltype(_impl_.startindex_){}
    , decltype(_impl_.reqnum_){}
    , decltype(_impl_.reqmusicswitch_){}
    , decltype(_impl_.reqmutualmarkalienation_){}
    , decltype(_impl_.reqmutualmarkscore_){}
    , decltype(_impl_.reqksingswitch_){}
    , decltype(_impl_.reqmutualmarklbsshare_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.appid_, &from._impl_.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reqmutualmarklbsshare_) -
    reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.reqmutualmarklbsshare_));
  // @@protoc_insertion_point(copy_constructor:D50ReqBody)
}

inline void D50ReqBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uinlist_){arena}
    , /*decltype(_impl_._uinlist_cached_byte_size_)*/{0}
    , decltype(_impl_.appid_){int64_t{0}}
    , decltype(_impl_.maxpkgsize_){0}
    , decltype(_impl_.starttime_){0}
    , decltype(_impl_.startindex_){0}
    , decltype(_impl_.reqnum_){0}
    , decltype(_impl_.reqmusicswitch_){0}
    , decltype(_impl_.reqmutualmarkalienation_){0}
    , decltype(_impl_.reqmutualmarkscore_){0}
    , decltype(_impl_.reqksingswitch_){0}
    , decltype(_impl_.reqmutualmarklbsshare_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

D50ReqBody::~D50ReqBody() {
  // @@protoc_insertion_point(destructor:D50ReqBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void D50ReqBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uinlist_.~RepeatedField();
}

void D50ReqBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void D50ReqBody::Clear() {
// @@protoc_insertion_point(message_clear_start:D50ReqBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uinlist_.Clear();
  ::memset(&_impl_.appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reqmutualmarklbsshare_) -
      reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.reqmutualmarklbsshare_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* D50ReqBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maxPkgSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.maxpkgsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 startTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 startIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.startindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.reqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 uinList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_uinlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_uinlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqMusicSwitch = 91001;
      case 91001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.reqmusicswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqMutualmarkAlienation = 101001;
      case 101001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.reqmutualmarkalienation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqMutualmarkScore = 141001;
      case 141001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.reqmutualmarkscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqKsingSwitch = 151001;
      case 151001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.reqksingswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqMutualmarkLbsshare = 181001;
      case 181001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.reqmutualmarklbsshare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* D50ReqBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:D50ReqBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 appid = 1;
  if (this->_internal_appid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_appid(), target);
  }

  // int32 maxPkgSize = 2;
  if (this->_internal_maxpkgsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxpkgsize(), target);
  }

  // int32 startTime = 3;
  if (this->_internal_starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_starttime(), target);
  }

  // int32 startIndex = 4;
  if (this->_internal_startindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_startindex(), target);
  }

  // int32 reqNum = 5;
  if (this->_internal_reqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_reqnum(), target);
  }

  // repeated int64 uinList = 6;
  {
    int byte_size = _impl_._uinlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_uinlist(), byte_size, target);
    }
  }

  // int32 reqMusicSwitch = 91001;
  if (this->_internal_reqmusicswitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(91001, this->_internal_reqmusicswitch(), target);
  }

  // int32 reqMutualmarkAlienation = 101001;
  if (this->_internal_reqmutualmarkalienation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(101001, this->_internal_reqmutualmarkalienation(), target);
  }

  // int32 reqMutualmarkScore = 141001;
  if (this->_internal_reqmutualmarkscore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(141001, this->_internal_reqmutualmarkscore(), target);
  }

  // int32 reqKsingSwitch = 151001;
  if (this->_internal_reqksingswitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(151001, this->_internal_reqksingswitch(), target);
  }

  // int32 reqMutualmarkLbsshare = 181001;
  if (this->_internal_reqmutualmarklbsshare() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(181001, this->_internal_reqmutualmarklbsshare(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:D50ReqBody)
  return target;
}

size_t D50ReqBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:D50ReqBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 uinList = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.uinlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._uinlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 appid = 1;
  if (this->_internal_appid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_appid());
  }

  // int32 maxPkgSize = 2;
  if (this->_internal_maxpkgsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxpkgsize());
  }

  // int32 startTime = 3;
  if (this->_internal_starttime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_starttime());
  }

  // int32 startIndex = 4;
  if (this->_internal_startindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_startindex());
  }

  // int32 reqNum = 5;
  if (this->_internal_reqnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reqnum());
  }

  // int32 reqMusicSwitch = 91001;
  if (this->_internal_reqmusicswitch() != 0) {
    total_size += 3 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_reqmusicswitch());
  }

  // int32 reqMutualmarkAlienation = 101001;
  if (this->_internal_reqmutualmarkalienation() != 0) {
    total_size += 3 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_reqmutualmarkalienation());
  }

  // int32 reqMutualmarkScore = 141001;
  if (this->_internal_reqmutualmarkscore() != 0) {
    total_size += 3 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_reqmutualmarkscore());
  }

  // int32 reqKsingSwitch = 151001;
  if (this->_internal_reqksingswitch() != 0) {
    total_size += 3 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_reqksingswitch());
  }

  // int32 reqMutualmarkLbsshare = 181001;
  if (this->_internal_reqmutualmarklbsshare() != 0) {
    total_size += 3 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_reqmutualmarklbsshare());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData D50ReqBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    D50ReqBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*D50ReqBody::GetClassData() const { return &_class_data_; }


void D50ReqBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<D50ReqBody*>(&to_msg);
  auto& from = static_cast<const D50ReqBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:D50ReqBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uinlist_.MergeFrom(from._impl_.uinlist_);
  if (from._internal_appid() != 0) {
    _this->_internal_set_appid(from._internal_appid());
  }
  if (from._internal_maxpkgsize() != 0) {
    _this->_internal_set_maxpkgsize(from._internal_maxpkgsize());
  }
  if (from._internal_starttime() != 0) {
    _this->_internal_set_starttime(from._internal_starttime());
  }
  if (from._internal_startindex() != 0) {
    _this->_internal_set_startindex(from._internal_startindex());
  }
  if (from._internal_reqnum() != 0) {
    _this->_internal_set_reqnum(from._internal_reqnum());
  }
  if (from._internal_reqmusicswitch() != 0) {
    _this->_internal_set_reqmusicswitch(from._internal_reqmusicswitch());
  }
  if (from._internal_reqmutualmarkalienation() != 0) {
    _this->_internal_set_reqmutualmarkalienation(from._internal_reqmutualmarkalienation());
  }
  if (from._internal_reqmutualmarkscore() != 0) {
    _this->_internal_set_reqmutualmarkscore(from._internal_reqmutualmarkscore());
  }
  if (from._internal_reqksingswitch() != 0) {
    _this->_internal_set_reqksingswitch(from._internal_reqksingswitch());
  }
  if (from._internal_reqmutualmarklbsshare() != 0) {
    _this->_internal_set_reqmutualmarklbsshare(from._internal_reqmutualmarklbsshare());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void D50ReqBody::CopyFrom(const D50ReqBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:D50ReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool D50ReqBody::IsInitialized() const {
  return true;
}

void D50ReqBody::InternalSwap(D50ReqBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.uinlist_.InternalSwap(&other->_impl_.uinlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(D50ReqBody, _impl_.reqmutualmarklbsshare_)
      + sizeof(D50ReqBody::_impl_.reqmutualmarklbsshare_)
      - PROTOBUF_FIELD_OFFSET(D50ReqBody, _impl_.appid_)>(
          reinterpret_cast<char*>(&_impl_.appid_),
          reinterpret_cast<char*>(&other->_impl_.appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata D50ReqBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[3]);
}

// ===================================================================

class ReqDataHighwayHead::_Internal {
 public:
  static const ::DataHighwayHead& msgbasehead(const ReqDataHighwayHead* msg);
  static const ::SegHead& msgseghead(const ReqDataHighwayHead* msg);
};

const ::DataHighwayHead&
ReqDataHighwayHead::_Internal::msgbasehead(const ReqDataHighwayHead* msg) {
  return *msg->_impl_.msgbasehead_;
}
const ::SegHead&
ReqDataHighwayHead::_Internal::msgseghead(const ReqDataHighwayHead* msg) {
  return *msg->_impl_.msgseghead_;
}
ReqDataHighwayHead::ReqDataHighwayHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ReqDataHighwayHead)
}
ReqDataHighwayHead::ReqDataHighwayHead(const ReqDataHighwayHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReqDataHighwayHead* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reqextendinfo_){}
    , decltype(_impl_.msgbasehead_){nullptr}
    , decltype(_impl_.msgseghead_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reqextendinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reqextendinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reqextendinfo().empty()) {
    _this->_impl_.reqextendinfo_.Set(from._internal_reqextendinfo(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_msgbasehead()) {
    _this->_impl_.msgbasehead_ = new ::DataHighwayHead(*from._impl_.msgbasehead_);
  }
  if (from._internal_has_msgseghead()) {
    _this->_impl_.msgseghead_ = new ::SegHead(*from._impl_.msgseghead_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:ReqDataHighwayHead)
}

inline void ReqDataHighwayHead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reqextendinfo_){}
    , decltype(_impl_.msgbasehead_){nullptr}
    , decltype(_impl_.msgseghead_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reqextendinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reqextendinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReqDataHighwayHead::~ReqDataHighwayHead() {
  // @@protoc_insertion_point(destructor:ReqDataHighwayHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqDataHighwayHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reqextendinfo_.Destroy();
  if (this != internal_default_instance()) delete _impl_.msgbasehead_;
  if (this != internal_default_instance()) delete _impl_.msgseghead_;
}

void ReqDataHighwayHead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReqDataHighwayHead::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqDataHighwayHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reqextendinfo_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.msgbasehead_ != nullptr) {
    delete _impl_.msgbasehead_;
  }
  _impl_.msgbasehead_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.msgseghead_ != nullptr) {
    delete _impl_.msgseghead_;
  }
  _impl_.msgseghead_ = nullptr;
  _impl_.timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDataHighwayHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DataHighwayHead msgBasehead = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgbasehead(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SegHead msgSeghead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgseghead(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes reqExtendinfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_reqextendinfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqDataHighwayHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqDataHighwayHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DataHighwayHead msgBasehead = 1;
  if (this->_internal_has_msgbasehead()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::msgbasehead(this),
        _Internal::msgbasehead(this).GetCachedSize(), target, stream);
  }

  // .SegHead msgSeghead = 2;
  if (this->_internal_has_msgseghead()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::msgseghead(this),
        _Internal::msgseghead(this).GetCachedSize(), target, stream);
  }

  // bytes reqExtendinfo = 3;
  if (!this->_internal_reqextendinfo().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_reqextendinfo(), target);
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqDataHighwayHead)
  return target;
}

size_t ReqDataHighwayHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqDataHighwayHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes reqExtendinfo = 3;
  if (!this->_internal_reqextendinfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reqextendinfo());
  }

  // .DataHighwayHead msgBasehead = 1;
  if (this->_internal_has_msgbasehead()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.msgbasehead_);
  }

  // .SegHead msgSeghead = 2;
  if (this->_internal_has_msgseghead()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.msgseghead_);
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqDataHighwayHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReqDataHighwayHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqDataHighwayHead::GetClassData() const { return &_class_data_; }


void ReqDataHighwayHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReqDataHighwayHead*>(&to_msg);
  auto& from = static_cast<const ReqDataHighwayHead&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ReqDataHighwayHead)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reqextendinfo().empty()) {
    _this->_internal_set_reqextendinfo(from._internal_reqextendinfo());
  }
  if (from._internal_has_msgbasehead()) {
    _this->_internal_mutable_msgbasehead()->::DataHighwayHead::MergeFrom(
        from._internal_msgbasehead());
  }
  if (from._internal_has_msgseghead()) {
    _this->_internal_mutable_msgseghead()->::SegHead::MergeFrom(
        from._internal_msgseghead());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqDataHighwayHead::CopyFrom(const ReqDataHighwayHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqDataHighwayHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDataHighwayHead::IsInitialized() const {
  return true;
}

void ReqDataHighwayHead::InternalSwap(ReqDataHighwayHead* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reqextendinfo_, lhs_arena,
      &other->_impl_.reqextendinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqDataHighwayHead, _impl_.timestamp_)
      + sizeof(ReqDataHighwayHead::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(ReqDataHighwayHead, _impl_.msgbasehead_)>(
          reinterpret_cast<char*>(&_impl_.msgbasehead_),
          reinterpret_cast<char*>(&other->_impl_.msgbasehead_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDataHighwayHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[4]);
}

// ===================================================================

class RspDataHighwayHead::_Internal {
 public:
  static const ::DataHighwayHead& msgbasehead(const RspDataHighwayHead* msg);
  static const ::SegHead& msgseghead(const RspDataHighwayHead* msg);
};

const ::DataHighwayHead&
RspDataHighwayHead::_Internal::msgbasehead(const RspDataHighwayHead* msg) {
  return *msg->_impl_.msgbasehead_;
}
const ::SegHead&
RspDataHighwayHead::_Internal::msgseghead(const RspDataHighwayHead* msg) {
  return *msg->_impl_.msgseghead_;
}
RspDataHighwayHead::RspDataHighwayHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RspDataHighwayHead)
}
RspDataHighwayHead::RspDataHighwayHead(const RspDataHighwayHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RspDataHighwayHead* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rspextendinfo_){}
    , decltype(_impl_.msgbasehead_){nullptr}
    , decltype(_impl_.msgseghead_){nullptr}
    , decltype(_impl_.errorcode_){}
    , decltype(_impl_.allowretry_){}
    , decltype(_impl_.cachecost_){}
    , decltype(_impl_.htcost_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.range_){}
    , decltype(_impl_.isreset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rspextendinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rspextendinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rspextendinfo().empty()) {
    _this->_impl_.rspextendinfo_.Set(from._internal_rspextendinfo(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_msgbasehead()) {
    _this->_impl_.msgbasehead_ = new ::DataHighwayHead(*from._impl_.msgbasehead_);
  }
  if (from._internal_has_msgseghead()) {
    _this->_impl_.msgseghead_ = new ::SegHead(*from._impl_.msgseghead_);
  }
  ::memcpy(&_impl_.errorcode_, &from._impl_.errorcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isreset_) -
    reinterpret_cast<char*>(&_impl_.errorcode_)) + sizeof(_impl_.isreset_));
  // @@protoc_insertion_point(copy_constructor:RspDataHighwayHead)
}

inline void RspDataHighwayHead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rspextendinfo_){}
    , decltype(_impl_.msgbasehead_){nullptr}
    , decltype(_impl_.msgseghead_){nullptr}
    , decltype(_impl_.errorcode_){0}
    , decltype(_impl_.allowretry_){0}
    , decltype(_impl_.cachecost_){0}
    , decltype(_impl_.htcost_){0}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.range_){int64_t{0}}
    , decltype(_impl_.isreset_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rspextendinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rspextendinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RspDataHighwayHead::~RspDataHighwayHead() {
  // @@protoc_insertion_point(destructor:RspDataHighwayHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RspDataHighwayHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rspextendinfo_.Destroy();
  if (this != internal_default_instance()) delete _impl_.msgbasehead_;
  if (this != internal_default_instance()) delete _impl_.msgseghead_;
}

void RspDataHighwayHead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RspDataHighwayHead::Clear() {
// @@protoc_insertion_point(message_clear_start:RspDataHighwayHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rspextendinfo_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.msgbasehead_ != nullptr) {
    delete _impl_.msgbasehead_;
  }
  _impl_.msgbasehead_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.msgseghead_ != nullptr) {
    delete _impl_.msgseghead_;
  }
  _impl_.msgseghead_ = nullptr;
  ::memset(&_impl_.errorcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isreset_) -
      reinterpret_cast<char*>(&_impl_.errorcode_)) + sizeof(_impl_.isreset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RspDataHighwayHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DataHighwayHead msgBasehead = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgbasehead(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SegHead msgSeghead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgseghead(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 errorCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 allowRetry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.allowretry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cachecost = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.cachecost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 htcost = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.htcost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes rspExtendinfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_rspextendinfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 range = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 isReset = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.isreset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RspDataHighwayHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RspDataHighwayHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DataHighwayHead msgBasehead = 1;
  if (this->_internal_has_msgbasehead()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::msgbasehead(this),
        _Internal::msgbasehead(this).GetCachedSize(), target, stream);
  }

  // .SegHead msgSeghead = 2;
  if (this->_internal_has_msgseghead()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::msgseghead(this),
        _Internal::msgseghead(this).GetCachedSize(), target, stream);
  }

  // int32 errorCode = 3;
  if (this->_internal_errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_errorcode(), target);
  }

  // int32 allowRetry = 4;
  if (this->_internal_allowretry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_allowretry(), target);
  }

  // int32 cachecost = 5;
  if (this->_internal_cachecost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_cachecost(), target);
  }

  // int32 htcost = 6;
  if (this->_internal_htcost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_htcost(), target);
  }

  // bytes rspExtendinfo = 7;
  if (!this->_internal_rspextendinfo().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_rspextendinfo(), target);
  }

  // int64 timestamp = 8;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_timestamp(), target);
  }

  // int64 range = 9;
  if (this->_internal_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_range(), target);
  }

  // int32 isReset = 10;
  if (this->_internal_isreset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_isreset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RspDataHighwayHead)
  return target;
}

size_t RspDataHighwayHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RspDataHighwayHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rspExtendinfo = 7;
  if (!this->_internal_rspextendinfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rspextendinfo());
  }

  // .DataHighwayHead msgBasehead = 1;
  if (this->_internal_has_msgbasehead()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.msgbasehead_);
  }

  // .SegHead msgSeghead = 2;
  if (this->_internal_has_msgseghead()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.msgseghead_);
  }

  // int32 errorCode = 3;
  if (this->_internal_errorcode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_errorcode());
  }

  // int32 allowRetry = 4;
  if (this->_internal_allowretry() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_allowretry());
  }

  // int32 cachecost = 5;
  if (this->_internal_cachecost() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cachecost());
  }

  // int32 htcost = 6;
  if (this->_internal_htcost() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_htcost());
  }

  // int64 timestamp = 8;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int64 range = 9;
  if (this->_internal_range() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_range());
  }

  // int32 isReset = 10;
  if (this->_internal_isreset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_isreset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RspDataHighwayHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RspDataHighwayHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RspDataHighwayHead::GetClassData() const { return &_class_data_; }


void RspDataHighwayHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RspDataHighwayHead*>(&to_msg);
  auto& from = static_cast<const RspDataHighwayHead&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RspDataHighwayHead)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rspextendinfo().empty()) {
    _this->_internal_set_rspextendinfo(from._internal_rspextendinfo());
  }
  if (from._internal_has_msgbasehead()) {
    _this->_internal_mutable_msgbasehead()->::DataHighwayHead::MergeFrom(
        from._internal_msgbasehead());
  }
  if (from._internal_has_msgseghead()) {
    _this->_internal_mutable_msgseghead()->::SegHead::MergeFrom(
        from._internal_msgseghead());
  }
  if (from._internal_errorcode() != 0) {
    _this->_internal_set_errorcode(from._internal_errorcode());
  }
  if (from._internal_allowretry() != 0) {
    _this->_internal_set_allowretry(from._internal_allowretry());
  }
  if (from._internal_cachecost() != 0) {
    _this->_internal_set_cachecost(from._internal_cachecost());
  }
  if (from._internal_htcost() != 0) {
    _this->_internal_set_htcost(from._internal_htcost());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_range() != 0) {
    _this->_internal_set_range(from._internal_range());
  }
  if (from._internal_isreset() != 0) {
    _this->_internal_set_isreset(from._internal_isreset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RspDataHighwayHead::CopyFrom(const RspDataHighwayHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RspDataHighwayHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspDataHighwayHead::IsInitialized() const {
  return true;
}

void RspDataHighwayHead::InternalSwap(RspDataHighwayHead* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rspextendinfo_, lhs_arena,
      &other->_impl_.rspextendinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RspDataHighwayHead, _impl_.isreset_)
      + sizeof(RspDataHighwayHead::_impl_.isreset_)
      - PROTOBUF_FIELD_OFFSET(RspDataHighwayHead, _impl_.msgbasehead_)>(
          reinterpret_cast<char*>(&_impl_.msgbasehead_),
          reinterpret_cast<char*>(&other->_impl_.msgbasehead_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RspDataHighwayHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[5]);
}

// ===================================================================

class DataHighwayHead::_Internal {
 public:
};

DataHighwayHead::DataHighwayHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DataHighwayHead)
}
DataHighwayHead::DataHighwayHead(const DataHighwayHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataHighwayHead* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uin_){}
    , decltype(_impl_.command_){}
    , decltype(_impl_.buildver_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.seq_){}
    , decltype(_impl_.retrytimes_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.dataflag_){}
    , decltype(_impl_.commandid_){}
    , decltype(_impl_.localeid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uin().empty()) {
    _this->_impl_.uin_.Set(from._internal_uin(), 
      _this->GetArenaForAllocation());
  }
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_command().empty()) {
    _this->_impl_.command_.Set(from._internal_command(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buildver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buildver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buildver().empty()) {
    _this->_impl_.buildver_.Set(from._internal_buildver(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.localeid_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.localeid_));
  // @@protoc_insertion_point(copy_constructor:DataHighwayHead)
}

inline void DataHighwayHead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uin_){}
    , decltype(_impl_.command_){}
    , decltype(_impl_.buildver_){}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.seq_){0}
    , decltype(_impl_.retrytimes_){0}
    , decltype(_impl_.appid_){0}
    , decltype(_impl_.dataflag_){0}
    , decltype(_impl_.commandid_){0}
    , decltype(_impl_.localeid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buildver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buildver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataHighwayHead::~DataHighwayHead() {
  // @@protoc_insertion_point(destructor:DataHighwayHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataHighwayHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uin_.Destroy();
  _impl_.command_.Destroy();
  _impl_.buildver_.Destroy();
}

void DataHighwayHead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataHighwayHead::Clear() {
// @@protoc_insertion_point(message_clear_start:DataHighwayHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uin_.ClearToEmpty();
  _impl_.command_.ClearToEmpty();
  _impl_.buildver_.ClearToEmpty();
  ::memset(&_impl_.version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.localeid_) -
      reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.localeid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataHighwayHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DataHighwayHead.uin"));
        } else
          goto handle_unusual;
        continue;
      // string command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_command();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DataHighwayHead.command"));
        } else
          goto handle_unusual;
        continue;
      // int32 seq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 retryTimes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.retrytimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 appid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dataflag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.dataflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 commandId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.commandid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string buildVer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_buildver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DataHighwayHead.buildVer"));
        } else
          goto handle_unusual;
        continue;
      // int32 localeId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.localeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataHighwayHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataHighwayHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // string uin = 2;
  if (!this->_internal_uin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uin().data(), static_cast<int>(this->_internal_uin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataHighwayHead.uin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uin(), target);
  }

  // string command = 3;
  if (!this->_internal_command().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataHighwayHead.command");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_command(), target);
  }

  // int32 seq = 4;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_seq(), target);
  }

  // int32 retryTimes = 5;
  if (this->_internal_retrytimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_retrytimes(), target);
  }

  // int32 appid = 6;
  if (this->_internal_appid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_appid(), target);
  }

  // int32 dataflag = 7;
  if (this->_internal_dataflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_dataflag(), target);
  }

  // int32 commandId = 8;
  if (this->_internal_commandid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_commandid(), target);
  }

  // string buildVer = 9;
  if (!this->_internal_buildver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buildver().data(), static_cast<int>(this->_internal_buildver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataHighwayHead.buildVer");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_buildver(), target);
  }

  // int32 localeId = 10;
  if (this->_internal_localeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_localeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataHighwayHead)
  return target;
}

size_t DataHighwayHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataHighwayHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uin = 2;
  if (!this->_internal_uin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uin());
  }

  // string command = 3;
  if (!this->_internal_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // string buildVer = 9;
  if (!this->_internal_buildver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buildver());
  }

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  // int32 seq = 4;
  if (this->_internal_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seq());
  }

  // int32 retryTimes = 5;
  if (this->_internal_retrytimes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_retrytimes());
  }

  // int32 appid = 6;
  if (this->_internal_appid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_appid());
  }

  // int32 dataflag = 7;
  if (this->_internal_dataflag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dataflag());
  }

  // int32 commandId = 8;
  if (this->_internal_commandid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_commandid());
  }

  // int32 localeId = 10;
  if (this->_internal_localeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_localeid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataHighwayHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataHighwayHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataHighwayHead::GetClassData() const { return &_class_data_; }


void DataHighwayHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataHighwayHead*>(&to_msg);
  auto& from = static_cast<const DataHighwayHead&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DataHighwayHead)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uin().empty()) {
    _this->_internal_set_uin(from._internal_uin());
  }
  if (!from._internal_command().empty()) {
    _this->_internal_set_command(from._internal_command());
  }
  if (!from._internal_buildver().empty()) {
    _this->_internal_set_buildver(from._internal_buildver());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_seq() != 0) {
    _this->_internal_set_seq(from._internal_seq());
  }
  if (from._internal_retrytimes() != 0) {
    _this->_internal_set_retrytimes(from._internal_retrytimes());
  }
  if (from._internal_appid() != 0) {
    _this->_internal_set_appid(from._internal_appid());
  }
  if (from._internal_dataflag() != 0) {
    _this->_internal_set_dataflag(from._internal_dataflag());
  }
  if (from._internal_commandid() != 0) {
    _this->_internal_set_commandid(from._internal_commandid());
  }
  if (from._internal_localeid() != 0) {
    _this->_internal_set_localeid(from._internal_localeid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataHighwayHead::CopyFrom(const DataHighwayHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataHighwayHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataHighwayHead::IsInitialized() const {
  return true;
}

void DataHighwayHead::InternalSwap(DataHighwayHead* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uin_, lhs_arena,
      &other->_impl_.uin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.command_, lhs_arena,
      &other->_impl_.command_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buildver_, lhs_arena,
      &other->_impl_.buildver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataHighwayHead, _impl_.localeid_)
      + sizeof(DataHighwayHead::_impl_.localeid_)
      - PROTOBUF_FIELD_OFFSET(DataHighwayHead, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataHighwayHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[6]);
}

// ===================================================================

class SegHead::_Internal {
 public:
};

SegHead::SegHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SegHead)
}
SegHead::SegHead(const SegHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SegHead* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceticket_){}
    , decltype(_impl_.md5_){}
    , decltype(_impl_.filemd5_){}
    , decltype(_impl_.filesize_){}
    , decltype(_impl_.serviceid_){}
    , decltype(_impl_.datalength_){}
    , decltype(_impl_.dataoffset_){}
    , decltype(_impl_.rtcode_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.cacheaddr_){}
    , decltype(_impl_.querytimes_){}
    , decltype(_impl_.updatecacheip_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serviceticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serviceticket().empty()) {
    _this->_impl_.serviceticket_.Set(from._internal_serviceticket(), 
      _this->GetArenaForAllocation());
  }
  _impl_.md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_md5().empty()) {
    _this->_impl_.md5_.Set(from._internal_md5(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filemd5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filemd5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filemd5().empty()) {
    _this->_impl_.filemd5_.Set(from._internal_filemd5(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.filesize_, &from._impl_.filesize_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.updatecacheip_) -
    reinterpret_cast<char*>(&_impl_.filesize_)) + sizeof(_impl_.updatecacheip_));
  // @@protoc_insertion_point(copy_constructor:SegHead)
}

inline void SegHead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceticket_){}
    , decltype(_impl_.md5_){}
    , decltype(_impl_.filemd5_){}
    , decltype(_impl_.filesize_){int64_t{0}}
    , decltype(_impl_.serviceid_){0}
    , decltype(_impl_.datalength_){0}
    , decltype(_impl_.dataoffset_){int64_t{0}}
    , decltype(_impl_.rtcode_){0}
    , decltype(_impl_.flag_){0}
    , decltype(_impl_.cacheaddr_){0}
    , decltype(_impl_.querytimes_){0}
    , decltype(_impl_.updatecacheip_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.serviceticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filemd5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filemd5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SegHead::~SegHead() {
  // @@protoc_insertion_point(destructor:SegHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SegHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serviceticket_.Destroy();
  _impl_.md5_.Destroy();
  _impl_.filemd5_.Destroy();
}

void SegHead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SegHead::Clear() {
// @@protoc_insertion_point(message_clear_start:SegHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serviceticket_.ClearToEmpty();
  _impl_.md5_.ClearToEmpty();
  _impl_.filemd5_.ClearToEmpty();
  ::memset(&_impl_.filesize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.updatecacheip_) -
      reinterpret_cast<char*>(&_impl_.filesize_)) + sizeof(_impl_.updatecacheip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 serviceid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.serviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 filesize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dataoffset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.dataoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 datalength = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datalength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rtcode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.rtcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes serviceticket = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_serviceticket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes md5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_md5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes fileMd5 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_filemd5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cacheAddr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.cacheaddr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 queryTimes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.querytimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 updateCacheip = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.updatecacheip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SegHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serviceid = 1;
  if (this->_internal_serviceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_serviceid(), target);
  }

  // int64 filesize = 2;
  if (this->_internal_filesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_filesize(), target);
  }

  // int64 dataoffset = 3;
  if (this->_internal_dataoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_dataoffset(), target);
  }

  // int32 datalength = 4;
  if (this->_internal_datalength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_datalength(), target);
  }

  // int32 rtcode = 5;
  if (this->_internal_rtcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_rtcode(), target);
  }

  // bytes serviceticket = 6;
  if (!this->_internal_serviceticket().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_serviceticket(), target);
  }

  // int32 flag = 7;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_flag(), target);
  }

  // bytes md5 = 8;
  if (!this->_internal_md5().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_md5(), target);
  }

  // bytes fileMd5 = 9;
  if (!this->_internal_filemd5().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_filemd5(), target);
  }

  // int32 cacheAddr = 10;
  if (this->_internal_cacheaddr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_cacheaddr(), target);
  }

  // int32 queryTimes = 11;
  if (this->_internal_querytimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_querytimes(), target);
  }

  // int32 updateCacheip = 12;
  if (this->_internal_updatecacheip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_updatecacheip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SegHead)
  return target;
}

size_t SegHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SegHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes serviceticket = 6;
  if (!this->_internal_serviceticket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serviceticket());
  }

  // bytes md5 = 8;
  if (!this->_internal_md5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_md5());
  }

  // bytes fileMd5 = 9;
  if (!this->_internal_filemd5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_filemd5());
  }

  // int64 filesize = 2;
  if (this->_internal_filesize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_filesize());
  }

  // int32 serviceid = 1;
  if (this->_internal_serviceid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serviceid());
  }

  // int32 datalength = 4;
  if (this->_internal_datalength() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_datalength());
  }

  // int64 dataoffset = 3;
  if (this->_internal_dataoffset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dataoffset());
  }

  // int32 rtcode = 5;
  if (this->_internal_rtcode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rtcode());
  }

  // int32 flag = 7;
  if (this->_internal_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_flag());
  }

  // int32 cacheAddr = 10;
  if (this->_internal_cacheaddr() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cacheaddr());
  }

  // int32 queryTimes = 11;
  if (this->_internal_querytimes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_querytimes());
  }

  // int32 updateCacheip = 12;
  if (this->_internal_updatecacheip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_updatecacheip());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SegHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegHead::GetClassData() const { return &_class_data_; }


void SegHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SegHead*>(&to_msg);
  auto& from = static_cast<const SegHead&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SegHead)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serviceticket().empty()) {
    _this->_internal_set_serviceticket(from._internal_serviceticket());
  }
  if (!from._internal_md5().empty()) {
    _this->_internal_set_md5(from._internal_md5());
  }
  if (!from._internal_filemd5().empty()) {
    _this->_internal_set_filemd5(from._internal_filemd5());
  }
  if (from._internal_filesize() != 0) {
    _this->_internal_set_filesize(from._internal_filesize());
  }
  if (from._internal_serviceid() != 0) {
    _this->_internal_set_serviceid(from._internal_serviceid());
  }
  if (from._internal_datalength() != 0) {
    _this->_internal_set_datalength(from._internal_datalength());
  }
  if (from._internal_dataoffset() != 0) {
    _this->_internal_set_dataoffset(from._internal_dataoffset());
  }
  if (from._internal_rtcode() != 0) {
    _this->_internal_set_rtcode(from._internal_rtcode());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_cacheaddr() != 0) {
    _this->_internal_set_cacheaddr(from._internal_cacheaddr());
  }
  if (from._internal_querytimes() != 0) {
    _this->_internal_set_querytimes(from._internal_querytimes());
  }
  if (from._internal_updatecacheip() != 0) {
    _this->_internal_set_updatecacheip(from._internal_updatecacheip());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegHead::CopyFrom(const SegHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SegHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegHead::IsInitialized() const {
  return true;
}

void SegHead::InternalSwap(SegHead* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serviceticket_, lhs_arena,
      &other->_impl_.serviceticket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.md5_, lhs_arena,
      &other->_impl_.md5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filemd5_, lhs_arena,
      &other->_impl_.filemd5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegHead, _impl_.updatecacheip_)
      + sizeof(SegHead::_impl_.updatecacheip_)
      - PROTOBUF_FIELD_OFFSET(SegHead, _impl_.filesize_)>(
          reinterpret_cast<char*>(&_impl_.filesize_),
          reinterpret_cast<char*>(&other->_impl_.filesize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[7]);
}

// ===================================================================

class DeleteMessageRequest::_Internal {
 public:
};

DeleteMessageRequest::DeleteMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DeleteMessageRequest)
}
DeleteMessageRequest::DeleteMessageRequest(const DeleteMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteMessageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DeleteMessageRequest)
}

inline void DeleteMessageRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteMessageRequest::~DeleteMessageRequest() {
  // @@protoc_insertion_point(destructor:DeleteMessageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteMessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void DeleteMessageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DeleteMessageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteMessageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .MessageItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteMessageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeleteMessageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MessageItem items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeleteMessageRequest)
  return target;
}

size_t DeleteMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeleteMessageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MessageItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteMessageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteMessageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteMessageRequest::GetClassData() const { return &_class_data_; }


void DeleteMessageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteMessageRequest*>(&to_msg);
  auto& from = static_cast<const DeleteMessageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DeleteMessageRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteMessageRequest::CopyFrom(const DeleteMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeleteMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMessageRequest::IsInitialized() const {
  return true;
}

void DeleteMessageRequest::InternalSwap(DeleteMessageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteMessageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[8]);
}

// ===================================================================

class MessageItem::_Internal {
 public:
};

MessageItem::MessageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MessageItem)
}
MessageItem::MessageItem(const MessageItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sig_){}
    , decltype(_impl_.fromuin_){}
    , decltype(_impl_.touin_){}
    , decltype(_impl_.msgtype_){}
    , decltype(_impl_.msgseq_){}
    , decltype(_impl_.msguid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sig_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sig().empty()) {
    _this->_impl_.sig_.Set(from._internal_sig(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.fromuin_, &from._impl_.fromuin_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.msguid_) -
    reinterpret_cast<char*>(&_impl_.fromuin_)) + sizeof(_impl_.msguid_));
  // @@protoc_insertion_point(copy_constructor:MessageItem)
}

inline void MessageItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sig_){}
    , decltype(_impl_.fromuin_){int64_t{0}}
    , decltype(_impl_.touin_){int64_t{0}}
    , decltype(_impl_.msgtype_){0}
    , decltype(_impl_.msgseq_){0}
    , decltype(_impl_.msguid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sig_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MessageItem::~MessageItem() {
  // @@protoc_insertion_point(destructor:MessageItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sig_.Destroy();
}

void MessageItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageItem::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sig_.ClearToEmpty();
  ::memset(&_impl_.fromuin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.msguid_) -
      reinterpret_cast<char*>(&_impl_.fromuin_)) + sizeof(_impl_.msguid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 fromUin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fromuin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 toUin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.touin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msgType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.msgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msgSeq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.msgseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 msgUid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.msguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sig = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_sig();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 fromUin = 1;
  if (this->_internal_fromuin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_fromuin(), target);
  }

  // int64 toUin = 2;
  if (this->_internal_touin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_touin(), target);
  }

  // int32 msgType = 3;
  if (this->_internal_msgtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_msgtype(), target);
  }

  // int32 msgSeq = 4;
  if (this->_internal_msgseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_msgseq(), target);
  }

  // int64 msgUid = 5;
  if (this->_internal_msguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_msguid(), target);
  }

  // bytes sig = 7;
  if (!this->_internal_sig().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_sig(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageItem)
  return target;
}

size_t MessageItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sig = 7;
  if (!this->_internal_sig().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sig());
  }

  // int64 fromUin = 1;
  if (this->_internal_fromuin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fromuin());
  }

  // int64 toUin = 2;
  if (this->_internal_touin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_touin());
  }

  // int32 msgType = 3;
  if (this->_internal_msgtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msgtype());
  }

  // int32 msgSeq = 4;
  if (this->_internal_msgseq() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msgseq());
  }

  // int64 msgUid = 5;
  if (this->_internal_msguid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_msguid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageItem::GetClassData() const { return &_class_data_; }


void MessageItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageItem*>(&to_msg);
  auto& from = static_cast<const MessageItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MessageItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sig().empty()) {
    _this->_internal_set_sig(from._internal_sig());
  }
  if (from._internal_fromuin() != 0) {
    _this->_internal_set_fromuin(from._internal_fromuin());
  }
  if (from._internal_touin() != 0) {
    _this->_internal_set_touin(from._internal_touin());
  }
  if (from._internal_msgtype() != 0) {
    _this->_internal_set_msgtype(from._internal_msgtype());
  }
  if (from._internal_msgseq() != 0) {
    _this->_internal_set_msgseq(from._internal_msgseq());
  }
  if (from._internal_msguid() != 0) {
    _this->_internal_set_msguid(from._internal_msguid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageItem::CopyFrom(const MessageItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageItem::IsInitialized() const {
  return true;
}

void MessageItem::InternalSwap(MessageItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sig_, lhs_arena,
      &other->_impl_.sig_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageItem, _impl_.msguid_)
      + sizeof(MessageItem::_impl_.msguid_)
      - PROTOBUF_FIELD_OFFSET(MessageItem, _impl_.fromuin_)>(
          reinterpret_cast<char*>(&_impl_.fromuin_),
          reinterpret_cast<char*>(&other->_impl_.fromuin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[9]);
}

// ===================================================================

class SubD4::_Internal {
 public:
};

SubD4::SubD4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SubD4)
}
SubD4::SubD4(const SubD4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubD4* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uin_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.uin_ = from._impl_.uin_;
  // @@protoc_insertion_point(copy_constructor:SubD4)
}

inline void SubD4::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uin_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubD4::~SubD4() {
  // @@protoc_insertion_point(destructor:SubD4)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubD4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubD4::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubD4::Clear() {
// @@protoc_insertion_point(message_clear_start:SubD4)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uin_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubD4::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.uin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubD4::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubD4)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uin = 1;
  if (this->_internal_uin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_uin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubD4)
  return target;
}

size_t SubD4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubD4)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 uin = 1;
  if (this->_internal_uin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_uin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubD4::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubD4::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubD4::GetClassData() const { return &_class_data_; }


void SubD4::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubD4*>(&to_msg);
  auto& from = static_cast<const SubD4&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SubD4)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uin() != 0) {
    _this->_internal_set_uin(from._internal_uin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubD4::CopyFrom(const SubD4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubD4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubD4::IsInitialized() const {
  return true;
}

void SubD4::InternalSwap(SubD4* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.uin_, other->_impl_.uin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubD4::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[10]);
}

// ===================================================================

class Sub8A::_Internal {
 public:
};

Sub8A::Sub8A(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Sub8A)
}
Sub8A::Sub8A(const Sub8A& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sub8A* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_info_){from._impl_.msg_info_}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.instid_){}
    , decltype(_impl_.longmessageflag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserved().empty()) {
    _this->_impl_.reserved_.Set(from._internal_reserved(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.appid_, &from._impl_.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.longmessageflag_) -
    reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.longmessageflag_));
  // @@protoc_insertion_point(copy_constructor:Sub8A)
}

inline void Sub8A::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_info_){arena}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.appid_){0}
    , decltype(_impl_.instid_){0}
    , decltype(_impl_.longmessageflag_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Sub8A::~Sub8A() {
  // @@protoc_insertion_point(destructor:Sub8A)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sub8A::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_info_.~RepeatedPtrField();
  _impl_.reserved_.Destroy();
}

void Sub8A::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sub8A::Clear() {
// @@protoc_insertion_point(message_clear_start:Sub8A)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_info_.Clear();
  _impl_.reserved_.ClearToEmpty();
  ::memset(&_impl_.appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.longmessageflag_) -
      reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.longmessageflag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sub8A::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Sub8AMsgInfo msg_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 appId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 instId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.instid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 longMessageFlag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.longmessageflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes reserved = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_reserved();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sub8A::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Sub8A)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Sub8AMsgInfo msg_info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_msg_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_msg_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 appId = 2;
  if (this->_internal_appid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_appid(), target);
  }

  // int32 instId = 3;
  if (this->_internal_instid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_instid(), target);
  }

  // int32 longMessageFlag = 4;
  if (this->_internal_longmessageflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_longmessageflag(), target);
  }

  // bytes reserved = 5;
  if (!this->_internal_reserved().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_reserved(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Sub8A)
  return target;
}

size_t Sub8A::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Sub8A)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Sub8AMsgInfo msg_info = 1;
  total_size += 1UL * this->_internal_msg_info_size();
  for (const auto& msg : this->_impl_.msg_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes reserved = 5;
  if (!this->_internal_reserved().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reserved());
  }

  // int32 appId = 2;
  if (this->_internal_appid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_appid());
  }

  // int32 instId = 3;
  if (this->_internal_instid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_instid());
  }

  // int32 longMessageFlag = 4;
  if (this->_internal_longmessageflag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_longmessageflag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sub8A::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sub8A::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sub8A::GetClassData() const { return &_class_data_; }


void Sub8A::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sub8A*>(&to_msg);
  auto& from = static_cast<const Sub8A&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Sub8A)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.msg_info_.MergeFrom(from._impl_.msg_info_);
  if (!from._internal_reserved().empty()) {
    _this->_internal_set_reserved(from._internal_reserved());
  }
  if (from._internal_appid() != 0) {
    _this->_internal_set_appid(from._internal_appid());
  }
  if (from._internal_instid() != 0) {
    _this->_internal_set_instid(from._internal_instid());
  }
  if (from._internal_longmessageflag() != 0) {
    _this->_internal_set_longmessageflag(from._internal_longmessageflag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sub8A::CopyFrom(const Sub8A& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Sub8A)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sub8A::IsInitialized() const {
  return true;
}

void Sub8A::InternalSwap(Sub8A* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.msg_info_.InternalSwap(&other->_impl_.msg_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reserved_, lhs_arena,
      &other->_impl_.reserved_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sub8A, _impl_.longmessageflag_)
      + sizeof(Sub8A::_impl_.longmessageflag_)
      - PROTOBUF_FIELD_OFFSET(Sub8A, _impl_.appid_)>(
          reinterpret_cast<char*>(&_impl_.appid_),
          reinterpret_cast<char*>(&other->_impl_.appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sub8A::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[11]);
}

// ===================================================================

class Sub8AMsgInfo::_Internal {
 public:
};

Sub8AMsgInfo::Sub8AMsgInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Sub8AMsgInfo)
}
Sub8AMsgInfo::Sub8AMsgInfo(const Sub8AMsgInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sub8AMsgInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fromuin_){}
    , decltype(_impl_.touin_){}
    , decltype(_impl_.msguid_){}
    , decltype(_impl_.msgseq_){}
    , decltype(_impl_.msgrandom_){}
    , decltype(_impl_.msgtime_){}
    , decltype(_impl_.pkgnum_){}
    , decltype(_impl_.pkgindex_){}
    , decltype(_impl_.devseq_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fromuin_, &from._impl_.fromuin_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.devseq_) -
    reinterpret_cast<char*>(&_impl_.fromuin_)) + sizeof(_impl_.devseq_));
  // @@protoc_insertion_point(copy_constructor:Sub8AMsgInfo)
}

inline void Sub8AMsgInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fromuin_){int64_t{0}}
    , decltype(_impl_.touin_){int64_t{0}}
    , decltype(_impl_.msguid_){int64_t{0}}
    , decltype(_impl_.msgseq_){0}
    , decltype(_impl_.msgrandom_){0}
    , decltype(_impl_.msgtime_){int64_t{0}}
    , decltype(_impl_.pkgnum_){0}
    , decltype(_impl_.pkgindex_){0}
    , decltype(_impl_.devseq_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Sub8AMsgInfo::~Sub8AMsgInfo() {
  // @@protoc_insertion_point(destructor:Sub8AMsgInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sub8AMsgInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Sub8AMsgInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sub8AMsgInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Sub8AMsgInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.fromuin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.devseq_) -
      reinterpret_cast<char*>(&_impl_.fromuin_)) + sizeof(_impl_.devseq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sub8AMsgInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 fromUin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fromuin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 toUin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.touin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msgSeq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.msgseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 msgUid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.msguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 msgTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.msgtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msgRandom = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.msgrandom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pkgNum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.pkgnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pkgIndex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.pkgindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 devSeq = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.devseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sub8AMsgInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Sub8AMsgInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 fromUin = 1;
  if (this->_internal_fromuin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_fromuin(), target);
  }

  // int64 toUin = 2;
  if (this->_internal_touin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_touin(), target);
  }

  // int32 msgSeq = 3;
  if (this->_internal_msgseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_msgseq(), target);
  }

  // int64 msgUid = 4;
  if (this->_internal_msguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_msguid(), target);
  }

  // int64 msgTime = 5;
  if (this->_internal_msgtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_msgtime(), target);
  }

  // int32 msgRandom = 6;
  if (this->_internal_msgrandom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_msgrandom(), target);
  }

  // int32 pkgNum = 7;
  if (this->_internal_pkgnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_pkgnum(), target);
  }

  // int32 pkgIndex = 8;
  if (this->_internal_pkgindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_pkgindex(), target);
  }

  // int32 devSeq = 9;
  if (this->_internal_devseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_devseq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Sub8AMsgInfo)
  return target;
}

size_t Sub8AMsgInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Sub8AMsgInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 fromUin = 1;
  if (this->_internal_fromuin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fromuin());
  }

  // int64 toUin = 2;
  if (this->_internal_touin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_touin());
  }

  // int64 msgUid = 4;
  if (this->_internal_msguid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_msguid());
  }

  // int32 msgSeq = 3;
  if (this->_internal_msgseq() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msgseq());
  }

  // int32 msgRandom = 6;
  if (this->_internal_msgrandom() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msgrandom());
  }

  // int64 msgTime = 5;
  if (this->_internal_msgtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_msgtime());
  }

  // int32 pkgNum = 7;
  if (this->_internal_pkgnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pkgnum());
  }

  // int32 pkgIndex = 8;
  if (this->_internal_pkgindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pkgindex());
  }

  // int32 devSeq = 9;
  if (this->_internal_devseq() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_devseq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sub8AMsgInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sub8AMsgInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sub8AMsgInfo::GetClassData() const { return &_class_data_; }


void Sub8AMsgInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sub8AMsgInfo*>(&to_msg);
  auto& from = static_cast<const Sub8AMsgInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Sub8AMsgInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fromuin() != 0) {
    _this->_internal_set_fromuin(from._internal_fromuin());
  }
  if (from._internal_touin() != 0) {
    _this->_internal_set_touin(from._internal_touin());
  }
  if (from._internal_msguid() != 0) {
    _this->_internal_set_msguid(from._internal_msguid());
  }
  if (from._internal_msgseq() != 0) {
    _this->_internal_set_msgseq(from._internal_msgseq());
  }
  if (from._internal_msgrandom() != 0) {
    _this->_internal_set_msgrandom(from._internal_msgrandom());
  }
  if (from._internal_msgtime() != 0) {
    _this->_internal_set_msgtime(from._internal_msgtime());
  }
  if (from._internal_pkgnum() != 0) {
    _this->_internal_set_pkgnum(from._internal_pkgnum());
  }
  if (from._internal_pkgindex() != 0) {
    _this->_internal_set_pkgindex(from._internal_pkgindex());
  }
  if (from._internal_devseq() != 0) {
    _this->_internal_set_devseq(from._internal_devseq());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sub8AMsgInfo::CopyFrom(const Sub8AMsgInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Sub8AMsgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sub8AMsgInfo::IsInitialized() const {
  return true;
}

void Sub8AMsgInfo::InternalSwap(Sub8AMsgInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sub8AMsgInfo, _impl_.devseq_)
      + sizeof(Sub8AMsgInfo::_impl_.devseq_)
      - PROTOBUF_FIELD_OFFSET(Sub8AMsgInfo, _impl_.fromuin_)>(
          reinterpret_cast<char*>(&_impl_.fromuin_),
          reinterpret_cast<char*>(&other->_impl_.fromuin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sub8AMsgInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[12]);
}

// ===================================================================

class SubB3::_Internal {
 public:
  static const ::SubB3AddFrdNotify& msgaddfrdnotify(const SubB3* msg);
};

const ::SubB3AddFrdNotify&
SubB3::_Internal::msgaddfrdnotify(const SubB3* msg) {
  return *msg->_impl_.msgaddfrdnotify_;
}
SubB3::SubB3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SubB3)
}
SubB3::SubB3(const SubB3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubB3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msgaddfrdnotify_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msgaddfrdnotify()) {
    _this->_impl_.msgaddfrdnotify_ = new ::SubB3AddFrdNotify(*from._impl_.msgaddfrdnotify_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:SubB3)
}

inline void SubB3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msgaddfrdnotify_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubB3::~SubB3() {
  // @@protoc_insertion_point(destructor:SubB3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubB3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.msgaddfrdnotify_;
}

void SubB3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubB3::Clear() {
// @@protoc_insertion_point(message_clear_start:SubB3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.msgaddfrdnotify_ != nullptr) {
    delete _impl_.msgaddfrdnotify_;
  }
  _impl_.msgaddfrdnotify_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubB3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SubB3AddFrdNotify msgAddFrdNotify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgaddfrdnotify(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubB3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubB3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // .SubB3AddFrdNotify msgAddFrdNotify = 2;
  if (this->_internal_has_msgaddfrdnotify()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::msgaddfrdnotify(this),
        _Internal::msgaddfrdnotify(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubB3)
  return target;
}

size_t SubB3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubB3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SubB3AddFrdNotify msgAddFrdNotify = 2;
  if (this->_internal_has_msgaddfrdnotify()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.msgaddfrdnotify_);
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubB3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubB3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubB3::GetClassData() const { return &_class_data_; }


void SubB3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubB3*>(&to_msg);
  auto& from = static_cast<const SubB3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SubB3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msgaddfrdnotify()) {
    _this->_internal_mutable_msgaddfrdnotify()->::SubB3AddFrdNotify::MergeFrom(
        from._internal_msgaddfrdnotify());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubB3::CopyFrom(const SubB3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubB3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubB3::IsInitialized() const {
  return true;
}

void SubB3::InternalSwap(SubB3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubB3, _impl_.type_)
      + sizeof(SubB3::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SubB3, _impl_.msgaddfrdnotify_)>(
          reinterpret_cast<char*>(&_impl_.msgaddfrdnotify_),
          reinterpret_cast<char*>(&other->_impl_.msgaddfrdnotify_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubB3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[13]);
}

// ===================================================================

class SubB3AddFrdNotify::_Internal {
 public:
};

SubB3AddFrdNotify::SubB3AddFrdNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SubB3AddFrdNotify)
}
SubB3AddFrdNotify::SubB3AddFrdNotify(const SubB3AddFrdNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubB3AddFrdNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nick_){}
    , decltype(_impl_.uin_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nick().empty()) {
    _this->_impl_.nick_.Set(from._internal_nick(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.uin_ = from._impl_.uin_;
  // @@protoc_insertion_point(copy_constructor:SubB3AddFrdNotify)
}

inline void SubB3AddFrdNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nick_){}
    , decltype(_impl_.uin_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubB3AddFrdNotify::~SubB3AddFrdNotify() {
  // @@protoc_insertion_point(destructor:SubB3AddFrdNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubB3AddFrdNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nick_.Destroy();
}

void SubB3AddFrdNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubB3AddFrdNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:SubB3AddFrdNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nick_.ClearToEmpty();
  _impl_.uin_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubB3AddFrdNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.uin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_nick();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SubB3AddFrdNotify.nick"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubB3AddFrdNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubB3AddFrdNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uin = 1;
  if (this->_internal_uin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_uin(), target);
  }

  // string nick = 5;
  if (!this->_internal_nick().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SubB3AddFrdNotify.nick");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubB3AddFrdNotify)
  return target;
}

size_t SubB3AddFrdNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubB3AddFrdNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 5;
  if (!this->_internal_nick().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // int64 uin = 1;
  if (this->_internal_uin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_uin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubB3AddFrdNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubB3AddFrdNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubB3AddFrdNotify::GetClassData() const { return &_class_data_; }


void SubB3AddFrdNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubB3AddFrdNotify*>(&to_msg);
  auto& from = static_cast<const SubB3AddFrdNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SubB3AddFrdNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nick().empty()) {
    _this->_internal_set_nick(from._internal_nick());
  }
  if (from._internal_uin() != 0) {
    _this->_internal_set_uin(from._internal_uin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubB3AddFrdNotify::CopyFrom(const SubB3AddFrdNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubB3AddFrdNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubB3AddFrdNotify::IsInitialized() const {
  return true;
}

void SubB3AddFrdNotify::InternalSwap(SubB3AddFrdNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nick_, lhs_arena,
      &other->_impl_.nick_, rhs_arena
  );
  swap(_impl_.uin_, other->_impl_.uin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubB3AddFrdNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[14]);
}

// ===================================================================

class Sub44::_Internal {
 public:
  static const ::Sub44FriendSyncMsg& friendsyncmsg(const Sub44* msg);
  static const ::Sub44GroupSyncMsg& groupsyncmsg(const Sub44* msg);
};

const ::Sub44FriendSyncMsg&
Sub44::_Internal::friendsyncmsg(const Sub44* msg) {
  return *msg->_impl_.friendsyncmsg_;
}
const ::Sub44GroupSyncMsg&
Sub44::_Internal::groupsyncmsg(const Sub44* msg) {
  return *msg->_impl_.groupsyncmsg_;
}
Sub44::Sub44(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Sub44)
}
Sub44::Sub44(const Sub44& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sub44* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.friendsyncmsg_){nullptr}
    , decltype(_impl_.groupsyncmsg_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_friendsyncmsg()) {
    _this->_impl_.friendsyncmsg_ = new ::Sub44FriendSyncMsg(*from._impl_.friendsyncmsg_);
  }
  if (from._internal_has_groupsyncmsg()) {
    _this->_impl_.groupsyncmsg_ = new ::Sub44GroupSyncMsg(*from._impl_.groupsyncmsg_);
  }
  // @@protoc_insertion_point(copy_constructor:Sub44)
}

inline void Sub44::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.friendsyncmsg_){nullptr}
    , decltype(_impl_.groupsyncmsg_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Sub44::~Sub44() {
  // @@protoc_insertion_point(destructor:Sub44)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sub44::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.friendsyncmsg_;
  if (this != internal_default_instance()) delete _impl_.groupsyncmsg_;
}

void Sub44::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sub44::Clear() {
// @@protoc_insertion_point(message_clear_start:Sub44)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.friendsyncmsg_ != nullptr) {
    delete _impl_.friendsyncmsg_;
  }
  _impl_.friendsyncmsg_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.groupsyncmsg_ != nullptr) {
    delete _impl_.groupsyncmsg_;
  }
  _impl_.groupsyncmsg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sub44::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Sub44FriendSyncMsg friendSyncMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_friendsyncmsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Sub44GroupSyncMsg groupSyncMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_groupsyncmsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sub44::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Sub44)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Sub44FriendSyncMsg friendSyncMsg = 1;
  if (this->_internal_has_friendsyncmsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::friendsyncmsg(this),
        _Internal::friendsyncmsg(this).GetCachedSize(), target, stream);
  }

  // .Sub44GroupSyncMsg groupSyncMsg = 2;
  if (this->_internal_has_groupsyncmsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::groupsyncmsg(this),
        _Internal::groupsyncmsg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Sub44)
  return target;
}

size_t Sub44::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Sub44)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Sub44FriendSyncMsg friendSyncMsg = 1;
  if (this->_internal_has_friendsyncmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.friendsyncmsg_);
  }

  // .Sub44GroupSyncMsg groupSyncMsg = 2;
  if (this->_internal_has_groupsyncmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.groupsyncmsg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sub44::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sub44::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sub44::GetClassData() const { return &_class_data_; }


void Sub44::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sub44*>(&to_msg);
  auto& from = static_cast<const Sub44&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Sub44)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_friendsyncmsg()) {
    _this->_internal_mutable_friendsyncmsg()->::Sub44FriendSyncMsg::MergeFrom(
        from._internal_friendsyncmsg());
  }
  if (from._internal_has_groupsyncmsg()) {
    _this->_internal_mutable_groupsyncmsg()->::Sub44GroupSyncMsg::MergeFrom(
        from._internal_groupsyncmsg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sub44::CopyFrom(const Sub44& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Sub44)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sub44::IsInitialized() const {
  return true;
}

void Sub44::InternalSwap(Sub44* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sub44, _impl_.groupsyncmsg_)
      + sizeof(Sub44::_impl_.groupsyncmsg_)
      - PROTOBUF_FIELD_OFFSET(Sub44, _impl_.friendsyncmsg_)>(
          reinterpret_cast<char*>(&_impl_.friendsyncmsg_),
          reinterpret_cast<char*>(&other->_impl_.friendsyncmsg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sub44::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[15]);
}

// ===================================================================

class Sub44FriendSyncMsg::_Internal {
 public:
};

Sub44FriendSyncMsg::Sub44FriendSyncMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Sub44FriendSyncMsg)
}
Sub44FriendSyncMsg::Sub44FriendSyncMsg(const Sub44FriendSyncMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sub44FriendSyncMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.strwording_){from._impl_.strwording_}
    , decltype(_impl_.uin_){}
    , decltype(_impl_.fuin_){}
    , decltype(_impl_.processtype_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.processflag_){}
    , decltype(_impl_.sourceid_){}
    , decltype(_impl_.sourcesubid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.uin_, &from._impl_.uin_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sourcesubid_) -
    reinterpret_cast<char*>(&_impl_.uin_)) + sizeof(_impl_.sourcesubid_));
  // @@protoc_insertion_point(copy_constructor:Sub44FriendSyncMsg)
}

inline void Sub44FriendSyncMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.strwording_){arena}
    , decltype(_impl_.uin_){int64_t{0}}
    , decltype(_impl_.fuin_){int64_t{0}}
    , decltype(_impl_.processtype_){0}
    , decltype(_impl_.time_){0}
    , decltype(_impl_.processflag_){0}
    , decltype(_impl_.sourceid_){0}
    , decltype(_impl_.sourcesubid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Sub44FriendSyncMsg::~Sub44FriendSyncMsg() {
  // @@protoc_insertion_point(destructor:Sub44FriendSyncMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sub44FriendSyncMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strwording_.~RepeatedPtrField();
}

void Sub44FriendSyncMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sub44FriendSyncMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Sub44FriendSyncMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.strwording_.Clear();
  ::memset(&_impl_.uin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sourcesubid_) -
      reinterpret_cast<char*>(&_impl_.uin_)) + sizeof(_impl_.sourcesubid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sub44FriendSyncMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.uin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 fUin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.fuin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 processType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.processtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 processFlag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.processflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sourceId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.sourceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sourceSubId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.sourcesubid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string strWording = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strwording();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Sub44FriendSyncMsg.strWording"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sub44FriendSyncMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Sub44FriendSyncMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uin = 1;
  if (this->_internal_uin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_uin(), target);
  }

  // int64 fUin = 2;
  if (this->_internal_fuin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_fuin(), target);
  }

  // int32 processType = 3;
  if (this->_internal_processtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_processtype(), target);
  }

  // int32 time = 4;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_time(), target);
  }

  // int32 processFlag = 5;
  if (this->_internal_processflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_processflag(), target);
  }

  // int32 sourceId = 6;
  if (this->_internal_sourceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_sourceid(), target);
  }

  // int32 sourceSubId = 7;
  if (this->_internal_sourcesubid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_sourcesubid(), target);
  }

  // repeated string strWording = 8;
  for (int i = 0, n = this->_internal_strwording_size(); i < n; i++) {
    const auto& s = this->_internal_strwording(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Sub44FriendSyncMsg.strWording");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Sub44FriendSyncMsg)
  return target;
}

size_t Sub44FriendSyncMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Sub44FriendSyncMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string strWording = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.strwording_.size());
  for (int i = 0, n = _impl_.strwording_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.strwording_.Get(i));
  }

  // int64 uin = 1;
  if (this->_internal_uin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_uin());
  }

  // int64 fUin = 2;
  if (this->_internal_fuin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fuin());
  }

  // int32 processType = 3;
  if (this->_internal_processtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_processtype());
  }

  // int32 time = 4;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time());
  }

  // int32 processFlag = 5;
  if (this->_internal_processflag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_processflag());
  }

  // int32 sourceId = 6;
  if (this->_internal_sourceid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sourceid());
  }

  // int32 sourceSubId = 7;
  if (this->_internal_sourcesubid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sourcesubid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sub44FriendSyncMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sub44FriendSyncMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sub44FriendSyncMsg::GetClassData() const { return &_class_data_; }


void Sub44FriendSyncMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sub44FriendSyncMsg*>(&to_msg);
  auto& from = static_cast<const Sub44FriendSyncMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Sub44FriendSyncMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.strwording_.MergeFrom(from._impl_.strwording_);
  if (from._internal_uin() != 0) {
    _this->_internal_set_uin(from._internal_uin());
  }
  if (from._internal_fuin() != 0) {
    _this->_internal_set_fuin(from._internal_fuin());
  }
  if (from._internal_processtype() != 0) {
    _this->_internal_set_processtype(from._internal_processtype());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_processflag() != 0) {
    _this->_internal_set_processflag(from._internal_processflag());
  }
  if (from._internal_sourceid() != 0) {
    _this->_internal_set_sourceid(from._internal_sourceid());
  }
  if (from._internal_sourcesubid() != 0) {
    _this->_internal_set_sourcesubid(from._internal_sourcesubid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sub44FriendSyncMsg::CopyFrom(const Sub44FriendSyncMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Sub44FriendSyncMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sub44FriendSyncMsg::IsInitialized() const {
  return true;
}

void Sub44FriendSyncMsg::InternalSwap(Sub44FriendSyncMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.strwording_.InternalSwap(&other->_impl_.strwording_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sub44FriendSyncMsg, _impl_.sourcesubid_)
      + sizeof(Sub44FriendSyncMsg::_impl_.sourcesubid_)
      - PROTOBUF_FIELD_OFFSET(Sub44FriendSyncMsg, _impl_.uin_)>(
          reinterpret_cast<char*>(&_impl_.uin_),
          reinterpret_cast<char*>(&other->_impl_.uin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sub44FriendSyncMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[16]);
}

// ===================================================================

class Sub44GroupSyncMsg::_Internal {
 public:
};

Sub44GroupSyncMsg::Sub44GroupSyncMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Sub44GroupSyncMsg)
}
Sub44GroupSyncMsg::Sub44GroupSyncMsg(const Sub44GroupSyncMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sub44GroupSyncMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msgbuf_){}
    , decltype(_impl_.authkey_){}
    , decltype(_impl_.msgseq_){}
    , decltype(_impl_.grpcode_){}
    , decltype(_impl_.gacode_){}
    , decltype(_impl_.optuin1_){}
    , decltype(_impl_.msgtype_){}
    , decltype(_impl_.msgstatus_){}
    , decltype(_impl_.optuin2_){}
    , decltype(_impl_.actionuin_){}
    , decltype(_impl_.actiontime_){}
    , decltype(_impl_.curmaxmemcount_){}
    , decltype(_impl_.nextmaxmemcount_){}
    , decltype(_impl_.curmemcount_){}
    , decltype(_impl_.reqsrcid_){}
    , decltype(_impl_.reqsrcsubid_){}
    , decltype(_impl_.inviterrole_){}
    , decltype(_impl_.extadminnum_){}
    , decltype(_impl_.processflag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msgbuf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgbuf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msgbuf().empty()) {
    _this->_impl_.msgbuf_.Set(from._internal_msgbuf(), 
      _this->GetArenaForAllocation());
  }
  _impl_.authkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_authkey().empty()) {
    _this->_impl_.authkey_.Set(from._internal_authkey(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.msgseq_, &from._impl_.msgseq_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.processflag_) -
    reinterpret_cast<char*>(&_impl_.msgseq_)) + sizeof(_impl_.processflag_));
  // @@protoc_insertion_point(copy_constructor:Sub44GroupSyncMsg)
}

inline void Sub44GroupSyncMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msgbuf_){}
    , decltype(_impl_.authkey_){}
    , decltype(_impl_.msgseq_){int64_t{0}}
    , decltype(_impl_.grpcode_){int64_t{0}}
    , decltype(_impl_.gacode_){int64_t{0}}
    , decltype(_impl_.optuin1_){int64_t{0}}
    , decltype(_impl_.msgtype_){0}
    , decltype(_impl_.msgstatus_){0}
    , decltype(_impl_.optuin2_){int64_t{0}}
    , decltype(_impl_.actionuin_){int64_t{0}}
    , decltype(_impl_.actiontime_){int64_t{0}}
    , decltype(_impl_.curmaxmemcount_){0}
    , decltype(_impl_.nextmaxmemcount_){0}
    , decltype(_impl_.curmemcount_){0}
    , decltype(_impl_.reqsrcid_){0}
    , decltype(_impl_.reqsrcsubid_){0}
    , decltype(_impl_.inviterrole_){0}
    , decltype(_impl_.extadminnum_){0}
    , decltype(_impl_.processflag_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msgbuf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgbuf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.authkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Sub44GroupSyncMsg::~Sub44GroupSyncMsg() {
  // @@protoc_insertion_point(destructor:Sub44GroupSyncMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sub44GroupSyncMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msgbuf_.Destroy();
  _impl_.authkey_.Destroy();
}

void Sub44GroupSyncMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sub44GroupSyncMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Sub44GroupSyncMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msgbuf_.ClearToEmpty();
  _impl_.authkey_.ClearToEmpty();
  ::memset(&_impl_.msgseq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.processflag_) -
      reinterpret_cast<char*>(&_impl_.msgseq_)) + sizeof(_impl_.processflag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sub44GroupSyncMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 msgType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.msgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 msgSeq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.msgseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 grpCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.grpcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gaCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.gacode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 optUin1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.optuin1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 optUin2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.optuin2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes msgBuf = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_msgbuf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes authKey = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_authkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msgStatus = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.msgstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 actionUin = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.actionuin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 actionTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.actiontime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 curMaxMemCount = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.curmaxmemcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nextMaxMemCount = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.nextmaxmemcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 curMemCount = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.curmemcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqSrcId = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.reqsrcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqSrcSubId = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.reqsrcsubid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 inviterRole = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.inviterrole_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 extAdminNum = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.extadminnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 processFlag = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.processflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sub44GroupSyncMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Sub44GroupSyncMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgType = 1;
  if (this->_internal_msgtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_msgtype(), target);
  }

  // int64 msgSeq = 2;
  if (this->_internal_msgseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_msgseq(), target);
  }

  // int64 grpCode = 3;
  if (this->_internal_grpcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_grpcode(), target);
  }

  // int64 gaCode = 4;
  if (this->_internal_gacode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_gacode(), target);
  }

  // int64 optUin1 = 5;
  if (this->_internal_optuin1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_optuin1(), target);
  }

  // int64 optUin2 = 6;
  if (this->_internal_optuin2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_optuin2(), target);
  }

  // bytes msgBuf = 7;
  if (!this->_internal_msgbuf().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_msgbuf(), target);
  }

  // bytes authKey = 8;
  if (!this->_internal_authkey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_authkey(), target);
  }

  // int32 msgStatus = 9;
  if (this->_internal_msgstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_msgstatus(), target);
  }

  // int64 actionUin = 10;
  if (this->_internal_actionuin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_actionuin(), target);
  }

  // int64 actionTime = 11;
  if (this->_internal_actiontime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_actiontime(), target);
  }

  // int32 curMaxMemCount = 12;
  if (this->_internal_curmaxmemcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_curmaxmemcount(), target);
  }

  // int32 nextMaxMemCount = 13;
  if (this->_internal_nextmaxmemcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_nextmaxmemcount(), target);
  }

  // int32 curMemCount = 14;
  if (this->_internal_curmemcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_curmemcount(), target);
  }

  // int32 reqSrcId = 15;
  if (this->_internal_reqsrcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_reqsrcid(), target);
  }

  // int32 reqSrcSubId = 16;
  if (this->_internal_reqsrcsubid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_reqsrcsubid(), target);
  }

  // int32 inviterRole = 17;
  if (this->_internal_inviterrole() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_inviterrole(), target);
  }

  // int32 extAdminNum = 18;
  if (this->_internal_extadminnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_extadminnum(), target);
  }

  // int32 processFlag = 19;
  if (this->_internal_processflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_processflag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Sub44GroupSyncMsg)
  return target;
}

size_t Sub44GroupSyncMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Sub44GroupSyncMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msgBuf = 7;
  if (!this->_internal_msgbuf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msgbuf());
  }

  // bytes authKey = 8;
  if (!this->_internal_authkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_authkey());
  }

  // int64 msgSeq = 2;
  if (this->_internal_msgseq() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_msgseq());
  }

  // int64 grpCode = 3;
  if (this->_internal_grpcode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_grpcode());
  }

  // int64 gaCode = 4;
  if (this->_internal_gacode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gacode());
  }

  // int64 optUin1 = 5;
  if (this->_internal_optuin1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optuin1());
  }

  // int32 msgType = 1;
  if (this->_internal_msgtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msgtype());
  }

  // int32 msgStatus = 9;
  if (this->_internal_msgstatus() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msgstatus());
  }

  // int64 optUin2 = 6;
  if (this->_internal_optuin2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optuin2());
  }

  // int64 actionUin = 10;
  if (this->_internal_actionuin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_actionuin());
  }

  // int64 actionTime = 11;
  if (this->_internal_actiontime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_actiontime());
  }

  // int32 curMaxMemCount = 12;
  if (this->_internal_curmaxmemcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_curmaxmemcount());
  }

  // int32 nextMaxMemCount = 13;
  if (this->_internal_nextmaxmemcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nextmaxmemcount());
  }

  // int32 curMemCount = 14;
  if (this->_internal_curmemcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_curmemcount());
  }

  // int32 reqSrcId = 15;
  if (this->_internal_reqsrcid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reqsrcid());
  }

  // int32 reqSrcSubId = 16;
  if (this->_internal_reqsrcsubid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_reqsrcsubid());
  }

  // int32 inviterRole = 17;
  if (this->_internal_inviterrole() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_inviterrole());
  }

  // int32 extAdminNum = 18;
  if (this->_internal_extadminnum() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_extadminnum());
  }

  // int32 processFlag = 19;
  if (this->_internal_processflag() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_processflag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sub44GroupSyncMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sub44GroupSyncMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sub44GroupSyncMsg::GetClassData() const { return &_class_data_; }


void Sub44GroupSyncMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sub44GroupSyncMsg*>(&to_msg);
  auto& from = static_cast<const Sub44GroupSyncMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Sub44GroupSyncMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msgbuf().empty()) {
    _this->_internal_set_msgbuf(from._internal_msgbuf());
  }
  if (!from._internal_authkey().empty()) {
    _this->_internal_set_authkey(from._internal_authkey());
  }
  if (from._internal_msgseq() != 0) {
    _this->_internal_set_msgseq(from._internal_msgseq());
  }
  if (from._internal_grpcode() != 0) {
    _this->_internal_set_grpcode(from._internal_grpcode());
  }
  if (from._internal_gacode() != 0) {
    _this->_internal_set_gacode(from._internal_gacode());
  }
  if (from._internal_optuin1() != 0) {
    _this->_internal_set_optuin1(from._internal_optuin1());
  }
  if (from._internal_msgtype() != 0) {
    _this->_internal_set_msgtype(from._internal_msgtype());
  }
  if (from._internal_msgstatus() != 0) {
    _this->_internal_set_msgstatus(from._internal_msgstatus());
  }
  if (from._internal_optuin2() != 0) {
    _this->_internal_set_optuin2(from._internal_optuin2());
  }
  if (from._internal_actionuin() != 0) {
    _this->_internal_set_actionuin(from._internal_actionuin());
  }
  if (from._internal_actiontime() != 0) {
    _this->_internal_set_actiontime(from._internal_actiontime());
  }
  if (from._internal_curmaxmemcount() != 0) {
    _this->_internal_set_curmaxmemcount(from._internal_curmaxmemcount());
  }
  if (from._internal_nextmaxmemcount() != 0) {
    _this->_internal_set_nextmaxmemcount(from._internal_nextmaxmemcount());
  }
  if (from._internal_curmemcount() != 0) {
    _this->_internal_set_curmemcount(from._internal_curmemcount());
  }
  if (from._internal_reqsrcid() != 0) {
    _this->_internal_set_reqsrcid(from._internal_reqsrcid());
  }
  if (from._internal_reqsrcsubid() != 0) {
    _this->_internal_set_reqsrcsubid(from._internal_reqsrcsubid());
  }
  if (from._internal_inviterrole() != 0) {
    _this->_internal_set_inviterrole(from._internal_inviterrole());
  }
  if (from._internal_extadminnum() != 0) {
    _this->_internal_set_extadminnum(from._internal_extadminnum());
  }
  if (from._internal_processflag() != 0) {
    _this->_internal_set_processflag(from._internal_processflag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sub44GroupSyncMsg::CopyFrom(const Sub44GroupSyncMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Sub44GroupSyncMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sub44GroupSyncMsg::IsInitialized() const {
  return true;
}

void Sub44GroupSyncMsg::InternalSwap(Sub44GroupSyncMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msgbuf_, lhs_arena,
      &other->_impl_.msgbuf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.authkey_, lhs_arena,
      &other->_impl_.authkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sub44GroupSyncMsg, _impl_.processflag_)
      + sizeof(Sub44GroupSyncMsg::_impl_.processflag_)
      - PROTOBUF_FIELD_OFFSET(Sub44GroupSyncMsg, _impl_.msgseq_)>(
          reinterpret_cast<char*>(&_impl_.msgseq_),
          reinterpret_cast<char*>(&other->_impl_.msgseq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sub44GroupSyncMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[17]);
}

// ===================================================================

class GroupMemberReqBody::_Internal {
 public:
};

GroupMemberReqBody::GroupMemberReqBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GroupMemberReqBody)
}
GroupMemberReqBody::GroupMemberReqBody(const GroupMemberReqBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupMemberReqBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groupcode_){}
    , decltype(_impl_.uin_){}
    , decltype(_impl_.newclient_){}
    , decltype(_impl_.clienttype_){}
    , decltype(_impl_.richcardnamever_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.groupcode_, &from._impl_.groupcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.richcardnamever_) -
    reinterpret_cast<char*>(&_impl_.groupcode_)) + sizeof(_impl_.richcardnamever_));
  // @@protoc_insertion_point(copy_constructor:GroupMemberReqBody)
}

inline void GroupMemberReqBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.groupcode_){int64_t{0}}
    , decltype(_impl_.uin_){int64_t{0}}
    , decltype(_impl_.newclient_){false}
    , decltype(_impl_.clienttype_){0}
    , decltype(_impl_.richcardnamever_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GroupMemberReqBody::~GroupMemberReqBody() {
  // @@protoc_insertion_point(destructor:GroupMemberReqBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupMemberReqBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GroupMemberReqBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupMemberReqBody::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupMemberReqBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.groupcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.richcardnamever_) -
      reinterpret_cast<char*>(&_impl_.groupcode_)) + sizeof(_impl_.richcardnamever_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupMemberReqBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 groupCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.groupcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 uin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.uin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool newClient = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.newclient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 clientType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.clienttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 richCardNameVer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.richcardnamever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupMemberReqBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupMemberReqBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 groupCode = 1;
  if (this->_internal_groupcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_groupcode(), target);
  }

  // int64 uin = 2;
  if (this->_internal_uin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_uin(), target);
  }

  // bool newClient = 3;
  if (this->_internal_newclient() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_newclient(), target);
  }

  // int32 clientType = 4;
  if (this->_internal_clienttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_clienttype(), target);
  }

  // int32 richCardNameVer = 5;
  if (this->_internal_richcardnamever() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_richcardnamever(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupMemberReqBody)
  return target;
}

size_t GroupMemberReqBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupMemberReqBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 groupCode = 1;
  if (this->_internal_groupcode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_groupcode());
  }

  // int64 uin = 2;
  if (this->_internal_uin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_uin());
  }

  // bool newClient = 3;
  if (this->_internal_newclient() != 0) {
    total_size += 1 + 1;
  }

  // int32 clientType = 4;
  if (this->_internal_clienttype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clienttype());
  }

  // int32 richCardNameVer = 5;
  if (this->_internal_richcardnamever() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_richcardnamever());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupMemberReqBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupMemberReqBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupMemberReqBody::GetClassData() const { return &_class_data_; }


void GroupMemberReqBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupMemberReqBody*>(&to_msg);
  auto& from = static_cast<const GroupMemberReqBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GroupMemberReqBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_groupcode() != 0) {
    _this->_internal_set_groupcode(from._internal_groupcode());
  }
  if (from._internal_uin() != 0) {
    _this->_internal_set_uin(from._internal_uin());
  }
  if (from._internal_newclient() != 0) {
    _this->_internal_set_newclient(from._internal_newclient());
  }
  if (from._internal_clienttype() != 0) {
    _this->_internal_set_clienttype(from._internal_clienttype());
  }
  if (from._internal_richcardnamever() != 0) {
    _this->_internal_set_richcardnamever(from._internal_richcardnamever());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupMemberReqBody::CopyFrom(const GroupMemberReqBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupMemberReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMemberReqBody::IsInitialized() const {
  return true;
}

void GroupMemberReqBody::InternalSwap(GroupMemberReqBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupMemberReqBody, _impl_.richcardnamever_)
      + sizeof(GroupMemberReqBody::_impl_.richcardnamever_)
      - PROTOBUF_FIELD_OFFSET(GroupMemberReqBody, _impl_.groupcode_)>(
          reinterpret_cast<char*>(&_impl_.groupcode_),
          reinterpret_cast<char*>(&other->_impl_.groupcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupMemberReqBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[18]);
}

// ===================================================================

class GroupMemberRspBody::_Internal {
 public:
  static const ::GroupMemberInfo& meminfo(const GroupMemberRspBody* msg);
};

const ::GroupMemberInfo&
GroupMemberRspBody::_Internal::meminfo(const GroupMemberRspBody* msg) {
  return *msg->_impl_.meminfo_;
}
GroupMemberRspBody::GroupMemberRspBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GroupMemberRspBody)
}
GroupMemberRspBody::GroupMemberRspBody(const GroupMemberRspBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupMemberRspBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.meminfo_){nullptr}
    , decltype(_impl_.groupcode_){}
    , decltype(_impl_.selfrole_){}
    , decltype(_impl_.boolselflocationshared_){}
    , decltype(_impl_.grouptype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meminfo()) {
    _this->_impl_.meminfo_ = new ::GroupMemberInfo(*from._impl_.meminfo_);
  }
  ::memcpy(&_impl_.groupcode_, &from._impl_.groupcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grouptype_) -
    reinterpret_cast<char*>(&_impl_.groupcode_)) + sizeof(_impl_.grouptype_));
  // @@protoc_insertion_point(copy_constructor:GroupMemberRspBody)
}

inline void GroupMemberRspBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.meminfo_){nullptr}
    , decltype(_impl_.groupcode_){int64_t{0}}
    , decltype(_impl_.selfrole_){0}
    , decltype(_impl_.boolselflocationshared_){false}
    , decltype(_impl_.grouptype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GroupMemberRspBody::~GroupMemberRspBody() {
  // @@protoc_insertion_point(destructor:GroupMemberRspBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupMemberRspBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.meminfo_;
}

void GroupMemberRspBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupMemberRspBody::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupMemberRspBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.meminfo_ != nullptr) {
    delete _impl_.meminfo_;
  }
  _impl_.meminfo_ = nullptr;
  ::memset(&_impl_.groupcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grouptype_) -
      reinterpret_cast<char*>(&_impl_.groupcode_)) + sizeof(_impl_.grouptype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupMemberRspBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 groupCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.groupcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 selfRole = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.selfrole_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GroupMemberInfo memInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_meminfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool boolSelfLocationShared = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.boolselflocationshared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 groupType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.grouptype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupMemberRspBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupMemberRspBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 groupCode = 1;
  if (this->_internal_groupcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_groupcode(), target);
  }

  // int32 selfRole = 2;
  if (this->_internal_selfrole() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_selfrole(), target);
  }

  // .GroupMemberInfo memInfo = 3;
  if (this->_internal_has_meminfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::meminfo(this),
        _Internal::meminfo(this).GetCachedSize(), target, stream);
  }

  // bool boolSelfLocationShared = 4;
  if (this->_internal_boolselflocationshared() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_boolselflocationshared(), target);
  }

  // int32 groupType = 5;
  if (this->_internal_grouptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_grouptype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupMemberRspBody)
  return target;
}

size_t GroupMemberRspBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupMemberRspBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GroupMemberInfo memInfo = 3;
  if (this->_internal_has_meminfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.meminfo_);
  }

  // int64 groupCode = 1;
  if (this->_internal_groupcode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_groupcode());
  }

  // int32 selfRole = 2;
  if (this->_internal_selfrole() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_selfrole());
  }

  // bool boolSelfLocationShared = 4;
  if (this->_internal_boolselflocationshared() != 0) {
    total_size += 1 + 1;
  }

  // int32 groupType = 5;
  if (this->_internal_grouptype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grouptype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupMemberRspBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupMemberRspBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupMemberRspBody::GetClassData() const { return &_class_data_; }


void GroupMemberRspBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupMemberRspBody*>(&to_msg);
  auto& from = static_cast<const GroupMemberRspBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GroupMemberRspBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_meminfo()) {
    _this->_internal_mutable_meminfo()->::GroupMemberInfo::MergeFrom(
        from._internal_meminfo());
  }
  if (from._internal_groupcode() != 0) {
    _this->_internal_set_groupcode(from._internal_groupcode());
  }
  if (from._internal_selfrole() != 0) {
    _this->_internal_set_selfrole(from._internal_selfrole());
  }
  if (from._internal_boolselflocationshared() != 0) {
    _this->_internal_set_boolselflocationshared(from._internal_boolselflocationshared());
  }
  if (from._internal_grouptype() != 0) {
    _this->_internal_set_grouptype(from._internal_grouptype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupMemberRspBody::CopyFrom(const GroupMemberRspBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupMemberRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMemberRspBody::IsInitialized() const {
  return true;
}

void GroupMemberRspBody::InternalSwap(GroupMemberRspBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupMemberRspBody, _impl_.grouptype_)
      + sizeof(GroupMemberRspBody::_impl_.grouptype_)
      - PROTOBUF_FIELD_OFFSET(GroupMemberRspBody, _impl_.meminfo_)>(
          reinterpret_cast<char*>(&_impl_.meminfo_),
          reinterpret_cast<char*>(&other->_impl_.meminfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupMemberRspBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[19]);
}

// ===================================================================

class GroupMemberInfo::_Internal {
 public:
};

GroupMemberInfo::GroupMemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GroupMemberInfo)
}
GroupMemberInfo::GroupMemberInfo(const GroupMemberInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupMemberInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.errmsg_){}
    , decltype(_impl_.remark_){}
    , decltype(_impl_.card_){}
    , decltype(_impl_.location_){}
    , decltype(_impl_.nick_){}
    , decltype(_impl_.lev_){}
    , decltype(_impl_.gbartitle_){}
    , decltype(_impl_.gbarurl_){}
    , decltype(_impl_.specialtitle_){}
    , decltype(_impl_.phonenum_){}
    , decltype(_impl_.job_){}
    , decltype(_impl_.honor_){}
    , decltype(_impl_.uin_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.credit_){}
    , decltype(_impl_.sex_){}
    , decltype(_impl_.age_){}
    , decltype(_impl_.join_){}
    , decltype(_impl_.isfriend_){}
    , decltype(_impl_.isconcerned_){}
    , decltype(_impl_.isallowmodcard_){}
    , decltype(_impl_.isvip_){}
    , decltype(_impl_.gbarcnt_){}
    , decltype(_impl_.lastspeak_){}
    , decltype(_impl_.isyearvip_){}
    , decltype(_impl_.issupervip_){}
    , decltype(_impl_.issuperqq_){}
    , decltype(_impl_.locationshared_){}
    , decltype(_impl_.viplev_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.concerntype_){}
    , decltype(_impl_.int64distance_){}
    , decltype(_impl_.specialtitleexpiretime_){}
    , decltype(_impl_.medalid_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.remark_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remark_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remark().empty()) {
    _this->_impl_.remark_.Set(from._internal_remark(), 
      _this->GetArenaForAllocation());
  }
  _impl_.card_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.card_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_card().empty()) {
    _this->_impl_.card_.Set(from._internal_card(), 
      _this->GetArenaForAllocation());
  }
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    _this->_impl_.location_.Set(from._internal_location(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nick().empty()) {
    _this->_impl_.nick_.Set(from._internal_nick(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lev_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lev_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lev().empty()) {
    _this->_impl_.lev_.Set(from._internal_lev(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gbartitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gbartitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gbartitle().empty()) {
    _this->_impl_.gbartitle_.Set(from._internal_gbartitle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gbarurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gbarurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gbarurl().empty()) {
    _this->_impl_.gbarurl_.Set(from._internal_gbarurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.specialtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.specialtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_specialtitle().empty()) {
    _this->_impl_.specialtitle_.Set(from._internal_specialtitle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.phonenum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phonenum_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_phonenum().empty()) {
    _this->_impl_.phonenum_.Set(from._internal_phonenum(), 
      _this->GetArenaForAllocation());
  }
  _impl_.job_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_job().empty()) {
    _this->_impl_.job_.Set(from._internal_job(), 
      _this->GetArenaForAllocation());
  }
  _impl_.honor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.honor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_honor().empty()) {
    _this->_impl_.honor_.Set(from._internal_honor(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.uin_, &from._impl_.uin_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.uin_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:GroupMemberInfo)
}

inline void GroupMemberInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.errmsg_){}
    , decltype(_impl_.remark_){}
    , decltype(_impl_.card_){}
    , decltype(_impl_.location_){}
    , decltype(_impl_.nick_){}
    , decltype(_impl_.lev_){}
    , decltype(_impl_.gbartitle_){}
    , decltype(_impl_.gbarurl_){}
    , decltype(_impl_.specialtitle_){}
    , decltype(_impl_.phonenum_){}
    , decltype(_impl_.job_){}
    , decltype(_impl_.honor_){}
    , decltype(_impl_.uin_){int64_t{0}}
    , decltype(_impl_.result_){0}
    , decltype(_impl_.credit_){0}
    , decltype(_impl_.sex_){0}
    , decltype(_impl_.age_){0}
    , decltype(_impl_.join_){int64_t{0}}
    , decltype(_impl_.isfriend_){false}
    , decltype(_impl_.isconcerned_){false}
    , decltype(_impl_.isallowmodcard_){false}
    , decltype(_impl_.isvip_){false}
    , decltype(_impl_.gbarcnt_){0}
    , decltype(_impl_.lastspeak_){int64_t{0}}
    , decltype(_impl_.isyearvip_){false}
    , decltype(_impl_.issupervip_){false}
    , decltype(_impl_.issuperqq_){false}
    , decltype(_impl_.locationshared_){false}
    , decltype(_impl_.viplev_){0}
    , decltype(_impl_.role_){0}
    , decltype(_impl_.concerntype_){0}
    , decltype(_impl_.int64distance_){int64_t{0}}
    , decltype(_impl_.specialtitleexpiretime_){0}
    , decltype(_impl_.medalid_){0}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.remark_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remark_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.card_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.card_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lev_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lev_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gbartitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gbartitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gbarurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gbarurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.specialtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.specialtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phonenum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phonenum_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.job_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.honor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.honor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupMemberInfo::~GroupMemberInfo() {
  // @@protoc_insertion_point(destructor:GroupMemberInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupMemberInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.errmsg_.Destroy();
  _impl_.remark_.Destroy();
  _impl_.card_.Destroy();
  _impl_.location_.Destroy();
  _impl_.nick_.Destroy();
  _impl_.lev_.Destroy();
  _impl_.gbartitle_.Destroy();
  _impl_.gbarurl_.Destroy();
  _impl_.specialtitle_.Destroy();
  _impl_.phonenum_.Destroy();
  _impl_.job_.Destroy();
  _impl_.honor_.Destroy();
}

void GroupMemberInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupMemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupMemberInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.errmsg_.ClearToEmpty();
  _impl_.remark_.ClearToEmpty();
  _impl_.card_.ClearToEmpty();
  _impl_.location_.ClearToEmpty();
  _impl_.nick_.ClearToEmpty();
  _impl_.lev_.ClearToEmpty();
  _impl_.gbartitle_.ClearToEmpty();
  _impl_.gbarurl_.ClearToEmpty();
  _impl_.specialtitle_.ClearToEmpty();
  _impl_.phonenum_.ClearToEmpty();
  _impl_.job_.ClearToEmpty();
  _impl_.honor_.ClearToEmpty();
  ::memset(&_impl_.uin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.uin_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupMemberInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.uin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsFriend = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.isfriend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes remark = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_remark();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsConcerned = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.isconcerned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 credit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.credit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes card = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_card();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sex = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes location = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes nick = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_nick();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 age = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes lev = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_lev();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 join = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.join_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lastSpeak = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.lastspeak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes gbarTitle = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_gbartitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes gbarUrl = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_gbarurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gbarCnt = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.gbarcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isAllowModCard = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.isallowmodcard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isVip = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.isvip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isYearVip = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.isyearvip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSuperVip = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.issupervip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSuperQq = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.issuperqq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vipLev = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.viplev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 role = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool locationShared = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.locationshared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 int64Distance = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.int64distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 concernType = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.concerntype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes specialTitle = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_specialtitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 specialTitleExpireTime = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.specialtitleexpiretime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes phoneNum = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_phonenum();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes job = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_job();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 medalId = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.medalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string honor = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_honor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GroupMemberInfo.honor"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupMemberInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupMemberInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uin = 1;
  if (this->_internal_uin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_uin(), target);
  }

  // int32 result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  // bytes errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // bool IsFriend = 4;
  if (this->_internal_isfriend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_isfriend(), target);
  }

  // bytes remark = 5;
  if (!this->_internal_remark().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_remark(), target);
  }

  // bool IsConcerned = 6;
  if (this->_internal_isconcerned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_isconcerned(), target);
  }

  // int32 credit = 7;
  if (this->_internal_credit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_credit(), target);
  }

  // bytes card = 8;
  if (!this->_internal_card().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_card(), target);
  }

  // int32 sex = 9;
  if (this->_internal_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_sex(), target);
  }

  // bytes location = 10;
  if (!this->_internal_location().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_location(), target);
  }

  // bytes nick = 11;
  if (!this->_internal_nick().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_nick(), target);
  }

  // int32 age = 12;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_age(), target);
  }

  // bytes lev = 13;
  if (!this->_internal_lev().empty()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_lev(), target);
  }

  // int64 join = 14;
  if (this->_internal_join() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_join(), target);
  }

  // int64 lastSpeak = 15;
  if (this->_internal_lastspeak() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_lastspeak(), target);
  }

  // bytes gbarTitle = 18;
  if (!this->_internal_gbartitle().empty()) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_gbartitle(), target);
  }

  // bytes gbarUrl = 19;
  if (!this->_internal_gbarurl().empty()) {
    target = stream->WriteBytesMaybeAliased(
        19, this->_internal_gbarurl(), target);
  }

  // int32 gbarCnt = 20;
  if (this->_internal_gbarcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_gbarcnt(), target);
  }

  // bool isAllowModCard = 21;
  if (this->_internal_isallowmodcard() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_isallowmodcard(), target);
  }

  // bool isVip = 22;
  if (this->_internal_isvip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_isvip(), target);
  }

  // bool isYearVip = 23;
  if (this->_internal_isyearvip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_isyearvip(), target);
  }

  // bool isSuperVip = 24;
  if (this->_internal_issupervip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_issupervip(), target);
  }

  // bool isSuperQq = 25;
  if (this->_internal_issuperqq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_issuperqq(), target);
  }

  // int32 vipLev = 26;
  if (this->_internal_viplev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_viplev(), target);
  }

  // int32 role = 27;
  if (this->_internal_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_role(), target);
  }

  // bool locationShared = 28;
  if (this->_internal_locationshared() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_locationshared(), target);
  }

  // int64 int64Distance = 29;
  if (this->_internal_int64distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(29, this->_internal_int64distance(), target);
  }

  // int32 concernType = 30;
  if (this->_internal_concerntype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_concerntype(), target);
  }

  // bytes specialTitle = 31;
  if (!this->_internal_specialtitle().empty()) {
    target = stream->WriteBytesMaybeAliased(
        31, this->_internal_specialtitle(), target);
  }

  // int32 specialTitleExpireTime = 32;
  if (this->_internal_specialtitleexpiretime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(32, this->_internal_specialtitleexpiretime(), target);
  }

  // bytes phoneNum = 35;
  if (!this->_internal_phonenum().empty()) {
    target = stream->WriteBytesMaybeAliased(
        35, this->_internal_phonenum(), target);
  }

  // bytes job = 36;
  if (!this->_internal_job().empty()) {
    target = stream->WriteBytesMaybeAliased(
        36, this->_internal_job(), target);
  }

  // int32 medalId = 37;
  if (this->_internal_medalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(37, this->_internal_medalid(), target);
  }

  // int32 level = 39;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(39, this->_internal_level(), target);
  }

  // string honor = 41;
  if (!this->_internal_honor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_honor().data(), static_cast<int>(this->_internal_honor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GroupMemberInfo.honor");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_honor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupMemberInfo)
  return target;
}

size_t GroupMemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupMemberInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_errmsg());
  }

  // bytes remark = 5;
  if (!this->_internal_remark().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_remark());
  }

  // bytes card = 8;
  if (!this->_internal_card().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_card());
  }

  // bytes location = 10;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_location());
  }

  // bytes nick = 11;
  if (!this->_internal_nick().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nick());
  }

  // bytes lev = 13;
  if (!this->_internal_lev().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_lev());
  }

  // bytes gbarTitle = 18;
  if (!this->_internal_gbartitle().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gbartitle());
  }

  // bytes gbarUrl = 19;
  if (!this->_internal_gbarurl().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gbarurl());
  }

  // bytes specialTitle = 31;
  if (!this->_internal_specialtitle().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_specialtitle());
  }

  // bytes phoneNum = 35;
  if (!this->_internal_phonenum().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_phonenum());
  }

  // bytes job = 36;
  if (!this->_internal_job().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_job());
  }

  // string honor = 41;
  if (!this->_internal_honor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_honor());
  }

  // int64 uin = 1;
  if (this->_internal_uin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_uin());
  }

  // int32 result = 2;
  if (this->_internal_result() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  // int32 credit = 7;
  if (this->_internal_credit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_credit());
  }

  // int32 sex = 9;
  if (this->_internal_sex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sex());
  }

  // int32 age = 12;
  if (this->_internal_age() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_age());
  }

  // int64 join = 14;
  if (this->_internal_join() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_join());
  }

  // bool IsFriend = 4;
  if (this->_internal_isfriend() != 0) {
    total_size += 1 + 1;
  }

  // bool IsConcerned = 6;
  if (this->_internal_isconcerned() != 0) {
    total_size += 1 + 1;
  }

  // bool isAllowModCard = 21;
  if (this->_internal_isallowmodcard() != 0) {
    total_size += 2 + 1;
  }

  // bool isVip = 22;
  if (this->_internal_isvip() != 0) {
    total_size += 2 + 1;
  }

  // int32 gbarCnt = 20;
  if (this->_internal_gbarcnt() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_gbarcnt());
  }

  // int64 lastSpeak = 15;
  if (this->_internal_lastspeak() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastspeak());
  }

  // bool isYearVip = 23;
  if (this->_internal_isyearvip() != 0) {
    total_size += 2 + 1;
  }

  // bool isSuperVip = 24;
  if (this->_internal_issupervip() != 0) {
    total_size += 2 + 1;
  }

  // bool isSuperQq = 25;
  if (this->_internal_issuperqq() != 0) {
    total_size += 2 + 1;
  }

  // bool locationShared = 28;
  if (this->_internal_locationshared() != 0) {
    total_size += 2 + 1;
  }

  // int32 vipLev = 26;
  if (this->_internal_viplev() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_viplev());
  }

  // int32 role = 27;
  if (this->_internal_role() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_role());
  }

  // int32 concernType = 30;
  if (this->_internal_concerntype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_concerntype());
  }

  // int64 int64Distance = 29;
  if (this->_internal_int64distance() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_int64distance());
  }

  // int32 specialTitleExpireTime = 32;
  if (this->_internal_specialtitleexpiretime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_specialtitleexpiretime());
  }

  // int32 medalId = 37;
  if (this->_internal_medalid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_medalid());
  }

  // int32 level = 39;
  if (this->_internal_level() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupMemberInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupMemberInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupMemberInfo::GetClassData() const { return &_class_data_; }


void GroupMemberInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupMemberInfo*>(&to_msg);
  auto& from = static_cast<const GroupMemberInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GroupMemberInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if (!from._internal_remark().empty()) {
    _this->_internal_set_remark(from._internal_remark());
  }
  if (!from._internal_card().empty()) {
    _this->_internal_set_card(from._internal_card());
  }
  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  if (!from._internal_nick().empty()) {
    _this->_internal_set_nick(from._internal_nick());
  }
  if (!from._internal_lev().empty()) {
    _this->_internal_set_lev(from._internal_lev());
  }
  if (!from._internal_gbartitle().empty()) {
    _this->_internal_set_gbartitle(from._internal_gbartitle());
  }
  if (!from._internal_gbarurl().empty()) {
    _this->_internal_set_gbarurl(from._internal_gbarurl());
  }
  if (!from._internal_specialtitle().empty()) {
    _this->_internal_set_specialtitle(from._internal_specialtitle());
  }
  if (!from._internal_phonenum().empty()) {
    _this->_internal_set_phonenum(from._internal_phonenum());
  }
  if (!from._internal_job().empty()) {
    _this->_internal_set_job(from._internal_job());
  }
  if (!from._internal_honor().empty()) {
    _this->_internal_set_honor(from._internal_honor());
  }
  if (from._internal_uin() != 0) {
    _this->_internal_set_uin(from._internal_uin());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_credit() != 0) {
    _this->_internal_set_credit(from._internal_credit());
  }
  if (from._internal_sex() != 0) {
    _this->_internal_set_sex(from._internal_sex());
  }
  if (from._internal_age() != 0) {
    _this->_internal_set_age(from._internal_age());
  }
  if (from._internal_join() != 0) {
    _this->_internal_set_join(from._internal_join());
  }
  if (from._internal_isfriend() != 0) {
    _this->_internal_set_isfriend(from._internal_isfriend());
  }
  if (from._internal_isconcerned() != 0) {
    _this->_internal_set_isconcerned(from._internal_isconcerned());
  }
  if (from._internal_isallowmodcard() != 0) {
    _this->_internal_set_isallowmodcard(from._internal_isallowmodcard());
  }
  if (from._internal_isvip() != 0) {
    _this->_internal_set_isvip(from._internal_isvip());
  }
  if (from._internal_gbarcnt() != 0) {
    _this->_internal_set_gbarcnt(from._internal_gbarcnt());
  }
  if (from._internal_lastspeak() != 0) {
    _this->_internal_set_lastspeak(from._internal_lastspeak());
  }
  if (from._internal_isyearvip() != 0) {
    _this->_internal_set_isyearvip(from._internal_isyearvip());
  }
  if (from._internal_issupervip() != 0) {
    _this->_internal_set_issupervip(from._internal_issupervip());
  }
  if (from._internal_issuperqq() != 0) {
    _this->_internal_set_issuperqq(from._internal_issuperqq());
  }
  if (from._internal_locationshared() != 0) {
    _this->_internal_set_locationshared(from._internal_locationshared());
  }
  if (from._internal_viplev() != 0) {
    _this->_internal_set_viplev(from._internal_viplev());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  if (from._internal_concerntype() != 0) {
    _this->_internal_set_concerntype(from._internal_concerntype());
  }
  if (from._internal_int64distance() != 0) {
    _this->_internal_set_int64distance(from._internal_int64distance());
  }
  if (from._internal_specialtitleexpiretime() != 0) {
    _this->_internal_set_specialtitleexpiretime(from._internal_specialtitleexpiretime());
  }
  if (from._internal_medalid() != 0) {
    _this->_internal_set_medalid(from._internal_medalid());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupMemberInfo::CopyFrom(const GroupMemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupMemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMemberInfo::IsInitialized() const {
  return true;
}

void GroupMemberInfo::InternalSwap(GroupMemberInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errmsg_, lhs_arena,
      &other->_impl_.errmsg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remark_, lhs_arena,
      &other->_impl_.remark_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.card_, lhs_arena,
      &other->_impl_.card_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.location_, lhs_arena,
      &other->_impl_.location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nick_, lhs_arena,
      &other->_impl_.nick_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lev_, lhs_arena,
      &other->_impl_.lev_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gbartitle_, lhs_arena,
      &other->_impl_.gbartitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gbarurl_, lhs_arena,
      &other->_impl_.gbarurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.specialtitle_, lhs_arena,
      &other->_impl_.specialtitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phonenum_, lhs_arena,
      &other->_impl_.phonenum_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.job_, lhs_arena,
      &other->_impl_.job_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.honor_, lhs_arena,
      &other->_impl_.honor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupMemberInfo, _impl_.level_)
      + sizeof(GroupMemberInfo::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(GroupMemberInfo, _impl_.uin_)>(
          reinterpret_cast<char*>(&_impl_.uin_),
          reinterpret_cast<char*>(&other->_impl_.uin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupMemberInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DeviceInfo*
Arena::CreateMaybeMessage< ::DeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::RequestBody*
Arena::CreateMaybeMessage< ::RequestBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RequestBody >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfigSeq*
Arena::CreateMaybeMessage< ::ConfigSeq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConfigSeq >(arena);
}
template<> PROTOBUF_NOINLINE ::D50ReqBody*
Arena::CreateMaybeMessage< ::D50ReqBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::D50ReqBody >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqDataHighwayHead*
Arena::CreateMaybeMessage< ::ReqDataHighwayHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqDataHighwayHead >(arena);
}
template<> PROTOBUF_NOINLINE ::RspDataHighwayHead*
Arena::CreateMaybeMessage< ::RspDataHighwayHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RspDataHighwayHead >(arena);
}
template<> PROTOBUF_NOINLINE ::DataHighwayHead*
Arena::CreateMaybeMessage< ::DataHighwayHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataHighwayHead >(arena);
}
template<> PROTOBUF_NOINLINE ::SegHead*
Arena::CreateMaybeMessage< ::SegHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SegHead >(arena);
}
template<> PROTOBUF_NOINLINE ::DeleteMessageRequest*
Arena::CreateMaybeMessage< ::DeleteMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeleteMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MessageItem*
Arena::CreateMaybeMessage< ::MessageItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MessageItem >(arena);
}
template<> PROTOBUF_NOINLINE ::SubD4*
Arena::CreateMaybeMessage< ::SubD4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubD4 >(arena);
}
template<> PROTOBUF_NOINLINE ::Sub8A*
Arena::CreateMaybeMessage< ::Sub8A >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Sub8A >(arena);
}
template<> PROTOBUF_NOINLINE ::Sub8AMsgInfo*
Arena::CreateMaybeMessage< ::Sub8AMsgInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Sub8AMsgInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SubB3*
Arena::CreateMaybeMessage< ::SubB3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubB3 >(arena);
}
template<> PROTOBUF_NOINLINE ::SubB3AddFrdNotify*
Arena::CreateMaybeMessage< ::SubB3AddFrdNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubB3AddFrdNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::Sub44*
Arena::CreateMaybeMessage< ::Sub44 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Sub44 >(arena);
}
template<> PROTOBUF_NOINLINE ::Sub44FriendSyncMsg*
Arena::CreateMaybeMessage< ::Sub44FriendSyncMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Sub44FriendSyncMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::Sub44GroupSyncMsg*
Arena::CreateMaybeMessage< ::Sub44GroupSyncMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Sub44GroupSyncMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::GroupMemberReqBody*
Arena::CreateMaybeMessage< ::GroupMemberReqBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GroupMemberReqBody >(arena);
}
template<> PROTOBUF_NOINLINE ::GroupMemberRspBody*
Arena::CreateMaybeMessage< ::GroupMemberRspBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GroupMemberRspBody >(arena);
}
template<> PROTOBUF_NOINLINE ::GroupMemberInfo*
Arena::CreateMaybeMessage< ::GroupMemberInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GroupMemberInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

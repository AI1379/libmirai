// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2eproto;
class ConfigSeq;
struct ConfigSeqDefaultTypeInternal;
extern ConfigSeqDefaultTypeInternal _ConfigSeq_default_instance_;
class D50ReqBody;
struct D50ReqBodyDefaultTypeInternal;
extern D50ReqBodyDefaultTypeInternal _D50ReqBody_default_instance_;
class DataHighwayHead;
struct DataHighwayHeadDefaultTypeInternal;
extern DataHighwayHeadDefaultTypeInternal _DataHighwayHead_default_instance_;
class DeleteMessageRequest;
struct DeleteMessageRequestDefaultTypeInternal;
extern DeleteMessageRequestDefaultTypeInternal _DeleteMessageRequest_default_instance_;
class DeviceInfo;
struct DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class GroupMemberInfo;
struct GroupMemberInfoDefaultTypeInternal;
extern GroupMemberInfoDefaultTypeInternal _GroupMemberInfo_default_instance_;
class GroupMemberReqBody;
struct GroupMemberReqBodyDefaultTypeInternal;
extern GroupMemberReqBodyDefaultTypeInternal _GroupMemberReqBody_default_instance_;
class GroupMemberRspBody;
struct GroupMemberRspBodyDefaultTypeInternal;
extern GroupMemberRspBodyDefaultTypeInternal _GroupMemberRspBody_default_instance_;
class MessageItem;
struct MessageItemDefaultTypeInternal;
extern MessageItemDefaultTypeInternal _MessageItem_default_instance_;
class ReqDataHighwayHead;
struct ReqDataHighwayHeadDefaultTypeInternal;
extern ReqDataHighwayHeadDefaultTypeInternal _ReqDataHighwayHead_default_instance_;
class RequestBody;
struct RequestBodyDefaultTypeInternal;
extern RequestBodyDefaultTypeInternal _RequestBody_default_instance_;
class RspDataHighwayHead;
struct RspDataHighwayHeadDefaultTypeInternal;
extern RspDataHighwayHeadDefaultTypeInternal _RspDataHighwayHead_default_instance_;
class SegHead;
struct SegHeadDefaultTypeInternal;
extern SegHeadDefaultTypeInternal _SegHead_default_instance_;
class Sub44;
struct Sub44DefaultTypeInternal;
extern Sub44DefaultTypeInternal _Sub44_default_instance_;
class Sub44FriendSyncMsg;
struct Sub44FriendSyncMsgDefaultTypeInternal;
extern Sub44FriendSyncMsgDefaultTypeInternal _Sub44FriendSyncMsg_default_instance_;
class Sub44GroupSyncMsg;
struct Sub44GroupSyncMsgDefaultTypeInternal;
extern Sub44GroupSyncMsgDefaultTypeInternal _Sub44GroupSyncMsg_default_instance_;
class Sub8A;
struct Sub8ADefaultTypeInternal;
extern Sub8ADefaultTypeInternal _Sub8A_default_instance_;
class Sub8AMsgInfo;
struct Sub8AMsgInfoDefaultTypeInternal;
extern Sub8AMsgInfoDefaultTypeInternal _Sub8AMsgInfo_default_instance_;
class SubB3;
struct SubB3DefaultTypeInternal;
extern SubB3DefaultTypeInternal _SubB3_default_instance_;
class SubB3AddFrdNotify;
struct SubB3AddFrdNotifyDefaultTypeInternal;
extern SubB3AddFrdNotifyDefaultTypeInternal _SubB3AddFrdNotify_default_instance_;
class SubD4;
struct SubD4DefaultTypeInternal;
extern SubD4DefaultTypeInternal _SubD4_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ConfigSeq* Arena::CreateMaybeMessage<::ConfigSeq>(Arena*);
template<> ::D50ReqBody* Arena::CreateMaybeMessage<::D50ReqBody>(Arena*);
template<> ::DataHighwayHead* Arena::CreateMaybeMessage<::DataHighwayHead>(Arena*);
template<> ::DeleteMessageRequest* Arena::CreateMaybeMessage<::DeleteMessageRequest>(Arena*);
template<> ::DeviceInfo* Arena::CreateMaybeMessage<::DeviceInfo>(Arena*);
template<> ::GroupMemberInfo* Arena::CreateMaybeMessage<::GroupMemberInfo>(Arena*);
template<> ::GroupMemberReqBody* Arena::CreateMaybeMessage<::GroupMemberReqBody>(Arena*);
template<> ::GroupMemberRspBody* Arena::CreateMaybeMessage<::GroupMemberRspBody>(Arena*);
template<> ::MessageItem* Arena::CreateMaybeMessage<::MessageItem>(Arena*);
template<> ::ReqDataHighwayHead* Arena::CreateMaybeMessage<::ReqDataHighwayHead>(Arena*);
template<> ::RequestBody* Arena::CreateMaybeMessage<::RequestBody>(Arena*);
template<> ::RspDataHighwayHead* Arena::CreateMaybeMessage<::RspDataHighwayHead>(Arena*);
template<> ::SegHead* Arena::CreateMaybeMessage<::SegHead>(Arena*);
template<> ::Sub44* Arena::CreateMaybeMessage<::Sub44>(Arena*);
template<> ::Sub44FriendSyncMsg* Arena::CreateMaybeMessage<::Sub44FriendSyncMsg>(Arena*);
template<> ::Sub44GroupSyncMsg* Arena::CreateMaybeMessage<::Sub44GroupSyncMsg>(Arena*);
template<> ::Sub8A* Arena::CreateMaybeMessage<::Sub8A>(Arena*);
template<> ::Sub8AMsgInfo* Arena::CreateMaybeMessage<::Sub8AMsgInfo>(Arena*);
template<> ::SubB3* Arena::CreateMaybeMessage<::SubB3>(Arena*);
template<> ::SubB3AddFrdNotify* Arena::CreateMaybeMessage<::SubB3AddFrdNotify>(Arena*);
template<> ::SubD4* Arena::CreateMaybeMessage<::SubD4>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class DeviceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceInfo) */ {
 public:
  inline DeviceInfo() : DeviceInfo(nullptr) {}
  ~DeviceInfo() override;
  explicit PROTOBUF_CONSTEXPR DeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceInfo(const DeviceInfo& from);
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceInfo& from) {
    DeviceInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceInfo";
  }
  protected:
  explicit DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBootloaderFieldNumber = 1,
    kProcVersionFieldNumber = 2,
    kCodenameFieldNumber = 3,
    kIncrementalFieldNumber = 4,
    kFingerprintFieldNumber = 5,
    kBootIdFieldNumber = 6,
    kAndroidIdFieldNumber = 7,
    kBaseBandFieldNumber = 8,
    kInnerVersionFieldNumber = 9,
  };
  // string bootloader = 1;
  void clear_bootloader();
  const std::string& bootloader() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bootloader(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bootloader();
  PROTOBUF_NODISCARD std::string* release_bootloader();
  void set_allocated_bootloader(std::string* bootloader);
  private:
  const std::string& _internal_bootloader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bootloader(const std::string& value);
  std::string* _internal_mutable_bootloader();
  public:

  // string procVersion = 2;
  void clear_procversion();
  const std::string& procversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_procversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_procversion();
  PROTOBUF_NODISCARD std::string* release_procversion();
  void set_allocated_procversion(std::string* procversion);
  private:
  const std::string& _internal_procversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_procversion(const std::string& value);
  std::string* _internal_mutable_procversion();
  public:

  // string codename = 3;
  void clear_codename();
  const std::string& codename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_codename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_codename();
  PROTOBUF_NODISCARD std::string* release_codename();
  void set_allocated_codename(std::string* codename);
  private:
  const std::string& _internal_codename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codename(const std::string& value);
  std::string* _internal_mutable_codename();
  public:

  // string incremental = 4;
  void clear_incremental();
  const std::string& incremental() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_incremental(ArgT0&& arg0, ArgT... args);
  std::string* mutable_incremental();
  PROTOBUF_NODISCARD std::string* release_incremental();
  void set_allocated_incremental(std::string* incremental);
  private:
  const std::string& _internal_incremental() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_incremental(const std::string& value);
  std::string* _internal_mutable_incremental();
  public:

  // string fingerprint = 5;
  void clear_fingerprint();
  const std::string& fingerprint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fingerprint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fingerprint();
  PROTOBUF_NODISCARD std::string* release_fingerprint();
  void set_allocated_fingerprint(std::string* fingerprint);
  private:
  const std::string& _internal_fingerprint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fingerprint(const std::string& value);
  std::string* _internal_mutable_fingerprint();
  public:

  // string bootId = 6;
  void clear_bootid();
  const std::string& bootid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bootid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bootid();
  PROTOBUF_NODISCARD std::string* release_bootid();
  void set_allocated_bootid(std::string* bootid);
  private:
  const std::string& _internal_bootid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bootid(const std::string& value);
  std::string* _internal_mutable_bootid();
  public:

  // string androidId = 7;
  void clear_androidid();
  const std::string& androidid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_androidid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_androidid();
  PROTOBUF_NODISCARD std::string* release_androidid();
  void set_allocated_androidid(std::string* androidid);
  private:
  const std::string& _internal_androidid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_androidid(const std::string& value);
  std::string* _internal_mutable_androidid();
  public:

  // string baseBand = 8;
  void clear_baseband();
  const std::string& baseband() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_baseband(ArgT0&& arg0, ArgT... args);
  std::string* mutable_baseband();
  PROTOBUF_NODISCARD std::string* release_baseband();
  void set_allocated_baseband(std::string* baseband);
  private:
  const std::string& _internal_baseband() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_baseband(const std::string& value);
  std::string* _internal_mutable_baseband();
  public:

  // string innerVersion = 9;
  void clear_innerversion();
  const std::string& innerversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_innerversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_innerversion();
  PROTOBUF_NODISCARD std::string* release_innerversion();
  void set_allocated_innerversion(std::string* innerversion);
  private:
  const std::string& _internal_innerversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_innerversion(const std::string& value);
  std::string* _internal_mutable_innerversion();
  public:

  // @@protoc_insertion_point(class_scope:DeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bootloader_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr procversion_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr incremental_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fingerprint_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bootid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr androidid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr baseband_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr innerversion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class RequestBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RequestBody) */ {
 public:
  inline RequestBody() : RequestBody(nullptr) {}
  ~RequestBody() override;
  explicit PROTOBUF_CONSTEXPR RequestBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestBody(const RequestBody& from);
  RequestBody(RequestBody&& from) noexcept
    : RequestBody() {
    *this = ::std::move(from);
  }

  inline RequestBody& operator=(const RequestBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestBody& operator=(RequestBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestBody* internal_default_instance() {
    return reinterpret_cast<const RequestBody*>(
               &_RequestBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestBody& a, RequestBody& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestBody& from) {
    RequestBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RequestBody";
  }
  protected:
  explicit RequestBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRptConfigListFieldNumber = 1,
  };
  // repeated .ConfigSeq rpt_config_list = 1;
  int rpt_config_list_size() const;
  private:
  int _internal_rpt_config_list_size() const;
  public:
  void clear_rpt_config_list();
  ::ConfigSeq* mutable_rpt_config_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigSeq >*
      mutable_rpt_config_list();
  private:
  const ::ConfigSeq& _internal_rpt_config_list(int index) const;
  ::ConfigSeq* _internal_add_rpt_config_list();
  public:
  const ::ConfigSeq& rpt_config_list(int index) const;
  ::ConfigSeq* add_rpt_config_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigSeq >&
      rpt_config_list() const;

  // @@protoc_insertion_point(class_scope:RequestBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigSeq > rpt_config_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class ConfigSeq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfigSeq) */ {
 public:
  inline ConfigSeq() : ConfigSeq(nullptr) {}
  ~ConfigSeq() override;
  explicit PROTOBUF_CONSTEXPR ConfigSeq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigSeq(const ConfigSeq& from);
  ConfigSeq(ConfigSeq&& from) noexcept
    : ConfigSeq() {
    *this = ::std::move(from);
  }

  inline ConfigSeq& operator=(const ConfigSeq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigSeq& operator=(ConfigSeq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigSeq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigSeq* internal_default_instance() {
    return reinterpret_cast<const ConfigSeq*>(
               &_ConfigSeq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConfigSeq& a, ConfigSeq& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigSeq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigSeq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigSeq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigSeq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigSeq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigSeq& from) {
    ConfigSeq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigSeq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfigSeq";
  }
  protected:
  explicit ConfigSeq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 version = 2;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ConfigSeq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t type_;
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class D50ReqBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:D50ReqBody) */ {
 public:
  inline D50ReqBody() : D50ReqBody(nullptr) {}
  ~D50ReqBody() override;
  explicit PROTOBUF_CONSTEXPR D50ReqBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  D50ReqBody(const D50ReqBody& from);
  D50ReqBody(D50ReqBody&& from) noexcept
    : D50ReqBody() {
    *this = ::std::move(from);
  }

  inline D50ReqBody& operator=(const D50ReqBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline D50ReqBody& operator=(D50ReqBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const D50ReqBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const D50ReqBody* internal_default_instance() {
    return reinterpret_cast<const D50ReqBody*>(
               &_D50ReqBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(D50ReqBody& a, D50ReqBody& b) {
    a.Swap(&b);
  }
  inline void Swap(D50ReqBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(D50ReqBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  D50ReqBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<D50ReqBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const D50ReqBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const D50ReqBody& from) {
    D50ReqBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(D50ReqBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "D50ReqBody";
  }
  protected:
  explicit D50ReqBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUinListFieldNumber = 6,
    kAppidFieldNumber = 1,
    kMaxPkgSizeFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kStartIndexFieldNumber = 4,
    kReqNumFieldNumber = 5,
    kReqMusicSwitchFieldNumber = 91001,
    kReqMutualmarkAlienationFieldNumber = 101001,
    kReqMutualmarkScoreFieldNumber = 141001,
    kReqKsingSwitchFieldNumber = 151001,
    kReqMutualmarkLbsshareFieldNumber = 181001,
  };
  // repeated int64 uinList = 6;
  int uinlist_size() const;
  private:
  int _internal_uinlist_size() const;
  public:
  void clear_uinlist();
  private:
  int64_t _internal_uinlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_uinlist() const;
  void _internal_add_uinlist(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_uinlist();
  public:
  int64_t uinlist(int index) const;
  void set_uinlist(int index, int64_t value);
  void add_uinlist(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      uinlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_uinlist();

  // int64 appid = 1;
  void clear_appid();
  int64_t appid() const;
  void set_appid(int64_t value);
  private:
  int64_t _internal_appid() const;
  void _internal_set_appid(int64_t value);
  public:

  // int32 maxPkgSize = 2;
  void clear_maxpkgsize();
  int32_t maxpkgsize() const;
  void set_maxpkgsize(int32_t value);
  private:
  int32_t _internal_maxpkgsize() const;
  void _internal_set_maxpkgsize(int32_t value);
  public:

  // int32 startTime = 3;
  void clear_starttime();
  int32_t starttime() const;
  void set_starttime(int32_t value);
  private:
  int32_t _internal_starttime() const;
  void _internal_set_starttime(int32_t value);
  public:

  // int32 startIndex = 4;
  void clear_startindex();
  int32_t startindex() const;
  void set_startindex(int32_t value);
  private:
  int32_t _internal_startindex() const;
  void _internal_set_startindex(int32_t value);
  public:

  // int32 reqNum = 5;
  void clear_reqnum();
  int32_t reqnum() const;
  void set_reqnum(int32_t value);
  private:
  int32_t _internal_reqnum() const;
  void _internal_set_reqnum(int32_t value);
  public:

  // int32 reqMusicSwitch = 91001;
  void clear_reqmusicswitch();
  int32_t reqmusicswitch() const;
  void set_reqmusicswitch(int32_t value);
  private:
  int32_t _internal_reqmusicswitch() const;
  void _internal_set_reqmusicswitch(int32_t value);
  public:

  // int32 reqMutualmarkAlienation = 101001;
  void clear_reqmutualmarkalienation();
  int32_t reqmutualmarkalienation() const;
  void set_reqmutualmarkalienation(int32_t value);
  private:
  int32_t _internal_reqmutualmarkalienation() const;
  void _internal_set_reqmutualmarkalienation(int32_t value);
  public:

  // int32 reqMutualmarkScore = 141001;
  void clear_reqmutualmarkscore();
  int32_t reqmutualmarkscore() const;
  void set_reqmutualmarkscore(int32_t value);
  private:
  int32_t _internal_reqmutualmarkscore() const;
  void _internal_set_reqmutualmarkscore(int32_t value);
  public:

  // int32 reqKsingSwitch = 151001;
  void clear_reqksingswitch();
  int32_t reqksingswitch() const;
  void set_reqksingswitch(int32_t value);
  private:
  int32_t _internal_reqksingswitch() const;
  void _internal_set_reqksingswitch(int32_t value);
  public:

  // int32 reqMutualmarkLbsshare = 181001;
  void clear_reqmutualmarklbsshare();
  int32_t reqmutualmarklbsshare() const;
  void set_reqmutualmarklbsshare(int32_t value);
  private:
  int32_t _internal_reqmutualmarklbsshare() const;
  void _internal_set_reqmutualmarklbsshare(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:D50ReqBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > uinlist_;
    mutable std::atomic<int> _uinlist_cached_byte_size_;
    int64_t appid_;
    int32_t maxpkgsize_;
    int32_t starttime_;
    int32_t startindex_;
    int32_t reqnum_;
    int32_t reqmusicswitch_;
    int32_t reqmutualmarkalienation_;
    int32_t reqmutualmarkscore_;
    int32_t reqksingswitch_;
    int32_t reqmutualmarklbsshare_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class ReqDataHighwayHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqDataHighwayHead) */ {
 public:
  inline ReqDataHighwayHead() : ReqDataHighwayHead(nullptr) {}
  ~ReqDataHighwayHead() override;
  explicit PROTOBUF_CONSTEXPR ReqDataHighwayHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqDataHighwayHead(const ReqDataHighwayHead& from);
  ReqDataHighwayHead(ReqDataHighwayHead&& from) noexcept
    : ReqDataHighwayHead() {
    *this = ::std::move(from);
  }

  inline ReqDataHighwayHead& operator=(const ReqDataHighwayHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDataHighwayHead& operator=(ReqDataHighwayHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqDataHighwayHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqDataHighwayHead* internal_default_instance() {
    return reinterpret_cast<const ReqDataHighwayHead*>(
               &_ReqDataHighwayHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReqDataHighwayHead& a, ReqDataHighwayHead& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqDataHighwayHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqDataHighwayHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqDataHighwayHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqDataHighwayHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqDataHighwayHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReqDataHighwayHead& from) {
    ReqDataHighwayHead::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDataHighwayHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqDataHighwayHead";
  }
  protected:
  explicit ReqDataHighwayHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqExtendinfoFieldNumber = 3,
    kMsgBaseheadFieldNumber = 1,
    kMsgSegheadFieldNumber = 2,
    kTimestampFieldNumber = 4,
  };
  // bytes reqExtendinfo = 3;
  void clear_reqextendinfo();
  const std::string& reqextendinfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reqextendinfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reqextendinfo();
  PROTOBUF_NODISCARD std::string* release_reqextendinfo();
  void set_allocated_reqextendinfo(std::string* reqextendinfo);
  private:
  const std::string& _internal_reqextendinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reqextendinfo(const std::string& value);
  std::string* _internal_mutable_reqextendinfo();
  public:

  // .DataHighwayHead msgBasehead = 1;
  bool has_msgbasehead() const;
  private:
  bool _internal_has_msgbasehead() const;
  public:
  void clear_msgbasehead();
  const ::DataHighwayHead& msgbasehead() const;
  PROTOBUF_NODISCARD ::DataHighwayHead* release_msgbasehead();
  ::DataHighwayHead* mutable_msgbasehead();
  void set_allocated_msgbasehead(::DataHighwayHead* msgbasehead);
  private:
  const ::DataHighwayHead& _internal_msgbasehead() const;
  ::DataHighwayHead* _internal_mutable_msgbasehead();
  public:
  void unsafe_arena_set_allocated_msgbasehead(
      ::DataHighwayHead* msgbasehead);
  ::DataHighwayHead* unsafe_arena_release_msgbasehead();

  // .SegHead msgSeghead = 2;
  bool has_msgseghead() const;
  private:
  bool _internal_has_msgseghead() const;
  public:
  void clear_msgseghead();
  const ::SegHead& msgseghead() const;
  PROTOBUF_NODISCARD ::SegHead* release_msgseghead();
  ::SegHead* mutable_msgseghead();
  void set_allocated_msgseghead(::SegHead* msgseghead);
  private:
  const ::SegHead& _internal_msgseghead() const;
  ::SegHead* _internal_mutable_msgseghead();
  public:
  void unsafe_arena_set_allocated_msgseghead(
      ::SegHead* msgseghead);
  ::SegHead* unsafe_arena_release_msgseghead();

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqDataHighwayHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reqextendinfo_;
    ::DataHighwayHead* msgbasehead_;
    ::SegHead* msgseghead_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class RspDataHighwayHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RspDataHighwayHead) */ {
 public:
  inline RspDataHighwayHead() : RspDataHighwayHead(nullptr) {}
  ~RspDataHighwayHead() override;
  explicit PROTOBUF_CONSTEXPR RspDataHighwayHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RspDataHighwayHead(const RspDataHighwayHead& from);
  RspDataHighwayHead(RspDataHighwayHead&& from) noexcept
    : RspDataHighwayHead() {
    *this = ::std::move(from);
  }

  inline RspDataHighwayHead& operator=(const RspDataHighwayHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspDataHighwayHead& operator=(RspDataHighwayHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RspDataHighwayHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const RspDataHighwayHead* internal_default_instance() {
    return reinterpret_cast<const RspDataHighwayHead*>(
               &_RspDataHighwayHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RspDataHighwayHead& a, RspDataHighwayHead& b) {
    a.Swap(&b);
  }
  inline void Swap(RspDataHighwayHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RspDataHighwayHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RspDataHighwayHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RspDataHighwayHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RspDataHighwayHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RspDataHighwayHead& from) {
    RspDataHighwayHead::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspDataHighwayHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RspDataHighwayHead";
  }
  protected:
  explicit RspDataHighwayHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRspExtendinfoFieldNumber = 7,
    kMsgBaseheadFieldNumber = 1,
    kMsgSegheadFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
    kAllowRetryFieldNumber = 4,
    kCachecostFieldNumber = 5,
    kHtcostFieldNumber = 6,
    kTimestampFieldNumber = 8,
    kRangeFieldNumber = 9,
    kIsResetFieldNumber = 10,
  };
  // bytes rspExtendinfo = 7;
  void clear_rspextendinfo();
  const std::string& rspextendinfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rspextendinfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rspextendinfo();
  PROTOBUF_NODISCARD std::string* release_rspextendinfo();
  void set_allocated_rspextendinfo(std::string* rspextendinfo);
  private:
  const std::string& _internal_rspextendinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rspextendinfo(const std::string& value);
  std::string* _internal_mutable_rspextendinfo();
  public:

  // .DataHighwayHead msgBasehead = 1;
  bool has_msgbasehead() const;
  private:
  bool _internal_has_msgbasehead() const;
  public:
  void clear_msgbasehead();
  const ::DataHighwayHead& msgbasehead() const;
  PROTOBUF_NODISCARD ::DataHighwayHead* release_msgbasehead();
  ::DataHighwayHead* mutable_msgbasehead();
  void set_allocated_msgbasehead(::DataHighwayHead* msgbasehead);
  private:
  const ::DataHighwayHead& _internal_msgbasehead() const;
  ::DataHighwayHead* _internal_mutable_msgbasehead();
  public:
  void unsafe_arena_set_allocated_msgbasehead(
      ::DataHighwayHead* msgbasehead);
  ::DataHighwayHead* unsafe_arena_release_msgbasehead();

  // .SegHead msgSeghead = 2;
  bool has_msgseghead() const;
  private:
  bool _internal_has_msgseghead() const;
  public:
  void clear_msgseghead();
  const ::SegHead& msgseghead() const;
  PROTOBUF_NODISCARD ::SegHead* release_msgseghead();
  ::SegHead* mutable_msgseghead();
  void set_allocated_msgseghead(::SegHead* msgseghead);
  private:
  const ::SegHead& _internal_msgseghead() const;
  ::SegHead* _internal_mutable_msgseghead();
  public:
  void unsafe_arena_set_allocated_msgseghead(
      ::SegHead* msgseghead);
  ::SegHead* unsafe_arena_release_msgseghead();

  // int32 errorCode = 3;
  void clear_errorcode();
  int32_t errorcode() const;
  void set_errorcode(int32_t value);
  private:
  int32_t _internal_errorcode() const;
  void _internal_set_errorcode(int32_t value);
  public:

  // int32 allowRetry = 4;
  void clear_allowretry();
  int32_t allowretry() const;
  void set_allowretry(int32_t value);
  private:
  int32_t _internal_allowretry() const;
  void _internal_set_allowretry(int32_t value);
  public:

  // int32 cachecost = 5;
  void clear_cachecost();
  int32_t cachecost() const;
  void set_cachecost(int32_t value);
  private:
  int32_t _internal_cachecost() const;
  void _internal_set_cachecost(int32_t value);
  public:

  // int32 htcost = 6;
  void clear_htcost();
  int32_t htcost() const;
  void set_htcost(int32_t value);
  private:
  int32_t _internal_htcost() const;
  void _internal_set_htcost(int32_t value);
  public:

  // int64 timestamp = 8;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int64 range = 9;
  void clear_range();
  int64_t range() const;
  void set_range(int64_t value);
  private:
  int64_t _internal_range() const;
  void _internal_set_range(int64_t value);
  public:

  // int32 isReset = 10;
  void clear_isreset();
  int32_t isreset() const;
  void set_isreset(int32_t value);
  private:
  int32_t _internal_isreset() const;
  void _internal_set_isreset(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RspDataHighwayHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rspextendinfo_;
    ::DataHighwayHead* msgbasehead_;
    ::SegHead* msgseghead_;
    int32_t errorcode_;
    int32_t allowretry_;
    int32_t cachecost_;
    int32_t htcost_;
    int64_t timestamp_;
    int64_t range_;
    int32_t isreset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class DataHighwayHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataHighwayHead) */ {
 public:
  inline DataHighwayHead() : DataHighwayHead(nullptr) {}
  ~DataHighwayHead() override;
  explicit PROTOBUF_CONSTEXPR DataHighwayHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataHighwayHead(const DataHighwayHead& from);
  DataHighwayHead(DataHighwayHead&& from) noexcept
    : DataHighwayHead() {
    *this = ::std::move(from);
  }

  inline DataHighwayHead& operator=(const DataHighwayHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataHighwayHead& operator=(DataHighwayHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataHighwayHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataHighwayHead* internal_default_instance() {
    return reinterpret_cast<const DataHighwayHead*>(
               &_DataHighwayHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DataHighwayHead& a, DataHighwayHead& b) {
    a.Swap(&b);
  }
  inline void Swap(DataHighwayHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataHighwayHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataHighwayHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataHighwayHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataHighwayHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataHighwayHead& from) {
    DataHighwayHead::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataHighwayHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataHighwayHead";
  }
  protected:
  explicit DataHighwayHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUinFieldNumber = 2,
    kCommandFieldNumber = 3,
    kBuildVerFieldNumber = 9,
    kVersionFieldNumber = 1,
    kSeqFieldNumber = 4,
    kRetryTimesFieldNumber = 5,
    kAppidFieldNumber = 6,
    kDataflagFieldNumber = 7,
    kCommandIdFieldNumber = 8,
    kLocaleIdFieldNumber = 10,
  };
  // string uin = 2;
  void clear_uin();
  const std::string& uin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uin();
  PROTOBUF_NODISCARD std::string* release_uin();
  void set_allocated_uin(std::string* uin);
  private:
  const std::string& _internal_uin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uin(const std::string& value);
  std::string* _internal_mutable_uin();
  public:

  // string command = 3;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string buildVer = 9;
  void clear_buildver();
  const std::string& buildver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buildver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buildver();
  PROTOBUF_NODISCARD std::string* release_buildver();
  void set_allocated_buildver(std::string* buildver);
  private:
  const std::string& _internal_buildver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buildver(const std::string& value);
  std::string* _internal_mutable_buildver();
  public:

  // int32 version = 1;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // int32 seq = 4;
  void clear_seq();
  int32_t seq() const;
  void set_seq(int32_t value);
  private:
  int32_t _internal_seq() const;
  void _internal_set_seq(int32_t value);
  public:

  // int32 retryTimes = 5;
  void clear_retrytimes();
  int32_t retrytimes() const;
  void set_retrytimes(int32_t value);
  private:
  int32_t _internal_retrytimes() const;
  void _internal_set_retrytimes(int32_t value);
  public:

  // int32 appid = 6;
  void clear_appid();
  int32_t appid() const;
  void set_appid(int32_t value);
  private:
  int32_t _internal_appid() const;
  void _internal_set_appid(int32_t value);
  public:

  // int32 dataflag = 7;
  void clear_dataflag();
  int32_t dataflag() const;
  void set_dataflag(int32_t value);
  private:
  int32_t _internal_dataflag() const;
  void _internal_set_dataflag(int32_t value);
  public:

  // int32 commandId = 8;
  void clear_commandid();
  int32_t commandid() const;
  void set_commandid(int32_t value);
  private:
  int32_t _internal_commandid() const;
  void _internal_set_commandid(int32_t value);
  public:

  // int32 localeId = 10;
  void clear_localeid();
  int32_t localeid() const;
  void set_localeid(int32_t value);
  private:
  int32_t _internal_localeid() const;
  void _internal_set_localeid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DataHighwayHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uin_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buildver_;
    int32_t version_;
    int32_t seq_;
    int32_t retrytimes_;
    int32_t appid_;
    int32_t dataflag_;
    int32_t commandid_;
    int32_t localeid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class SegHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SegHead) */ {
 public:
  inline SegHead() : SegHead(nullptr) {}
  ~SegHead() override;
  explicit PROTOBUF_CONSTEXPR SegHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegHead(const SegHead& from);
  SegHead(SegHead&& from) noexcept
    : SegHead() {
    *this = ::std::move(from);
  }

  inline SegHead& operator=(const SegHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegHead& operator=(SegHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegHead* internal_default_instance() {
    return reinterpret_cast<const SegHead*>(
               &_SegHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SegHead& a, SegHead& b) {
    a.Swap(&b);
  }
  inline void Swap(SegHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SegHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SegHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SegHead& from) {
    SegHead::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SegHead";
  }
  protected:
  explicit SegHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceticketFieldNumber = 6,
    kMd5FieldNumber = 8,
    kFileMd5FieldNumber = 9,
    kFilesizeFieldNumber = 2,
    kServiceidFieldNumber = 1,
    kDatalengthFieldNumber = 4,
    kDataoffsetFieldNumber = 3,
    kRtcodeFieldNumber = 5,
    kFlagFieldNumber = 7,
    kCacheAddrFieldNumber = 10,
    kQueryTimesFieldNumber = 11,
    kUpdateCacheipFieldNumber = 12,
  };
  // bytes serviceticket = 6;
  void clear_serviceticket();
  const std::string& serviceticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serviceticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serviceticket();
  PROTOBUF_NODISCARD std::string* release_serviceticket();
  void set_allocated_serviceticket(std::string* serviceticket);
  private:
  const std::string& _internal_serviceticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serviceticket(const std::string& value);
  std::string* _internal_mutable_serviceticket();
  public:

  // bytes md5 = 8;
  void clear_md5();
  const std::string& md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_md5();
  PROTOBUF_NODISCARD std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // bytes fileMd5 = 9;
  void clear_filemd5();
  const std::string& filemd5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filemd5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filemd5();
  PROTOBUF_NODISCARD std::string* release_filemd5();
  void set_allocated_filemd5(std::string* filemd5);
  private:
  const std::string& _internal_filemd5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filemd5(const std::string& value);
  std::string* _internal_mutable_filemd5();
  public:

  // int64 filesize = 2;
  void clear_filesize();
  int64_t filesize() const;
  void set_filesize(int64_t value);
  private:
  int64_t _internal_filesize() const;
  void _internal_set_filesize(int64_t value);
  public:

  // int32 serviceid = 1;
  void clear_serviceid();
  int32_t serviceid() const;
  void set_serviceid(int32_t value);
  private:
  int32_t _internal_serviceid() const;
  void _internal_set_serviceid(int32_t value);
  public:

  // int32 datalength = 4;
  void clear_datalength();
  int32_t datalength() const;
  void set_datalength(int32_t value);
  private:
  int32_t _internal_datalength() const;
  void _internal_set_datalength(int32_t value);
  public:

  // int64 dataoffset = 3;
  void clear_dataoffset();
  int64_t dataoffset() const;
  void set_dataoffset(int64_t value);
  private:
  int64_t _internal_dataoffset() const;
  void _internal_set_dataoffset(int64_t value);
  public:

  // int32 rtcode = 5;
  void clear_rtcode();
  int32_t rtcode() const;
  void set_rtcode(int32_t value);
  private:
  int32_t _internal_rtcode() const;
  void _internal_set_rtcode(int32_t value);
  public:

  // int32 flag = 7;
  void clear_flag();
  int32_t flag() const;
  void set_flag(int32_t value);
  private:
  int32_t _internal_flag() const;
  void _internal_set_flag(int32_t value);
  public:

  // int32 cacheAddr = 10;
  void clear_cacheaddr();
  int32_t cacheaddr() const;
  void set_cacheaddr(int32_t value);
  private:
  int32_t _internal_cacheaddr() const;
  void _internal_set_cacheaddr(int32_t value);
  public:

  // int32 queryTimes = 11;
  void clear_querytimes();
  int32_t querytimes() const;
  void set_querytimes(int32_t value);
  private:
  int32_t _internal_querytimes() const;
  void _internal_set_querytimes(int32_t value);
  public:

  // int32 updateCacheip = 12;
  void clear_updatecacheip();
  int32_t updatecacheip() const;
  void set_updatecacheip(int32_t value);
  private:
  int32_t _internal_updatecacheip() const;
  void _internal_set_updatecacheip(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SegHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serviceticket_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filemd5_;
    int64_t filesize_;
    int32_t serviceid_;
    int32_t datalength_;
    int64_t dataoffset_;
    int32_t rtcode_;
    int32_t flag_;
    int32_t cacheaddr_;
    int32_t querytimes_;
    int32_t updatecacheip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class DeleteMessageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeleteMessageRequest) */ {
 public:
  inline DeleteMessageRequest() : DeleteMessageRequest(nullptr) {}
  ~DeleteMessageRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteMessageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteMessageRequest(const DeleteMessageRequest& from);
  DeleteMessageRequest(DeleteMessageRequest&& from) noexcept
    : DeleteMessageRequest() {
    *this = ::std::move(from);
  }

  inline DeleteMessageRequest& operator=(const DeleteMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMessageRequest& operator=(DeleteMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteMessageRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteMessageRequest*>(
               &_DeleteMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteMessageRequest& a, DeleteMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMessageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteMessageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteMessageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteMessageRequest& from) {
    DeleteMessageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMessageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeleteMessageRequest";
  }
  protected:
  explicit DeleteMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .MessageItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::MessageItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MessageItem >*
      mutable_items();
  private:
  const ::MessageItem& _internal_items(int index) const;
  ::MessageItem* _internal_add_items();
  public:
  const ::MessageItem& items(int index) const;
  ::MessageItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MessageItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:DeleteMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MessageItem > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class MessageItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageItem) */ {
 public:
  inline MessageItem() : MessageItem(nullptr) {}
  ~MessageItem() override;
  explicit PROTOBUF_CONSTEXPR MessageItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageItem(const MessageItem& from);
  MessageItem(MessageItem&& from) noexcept
    : MessageItem() {
    *this = ::std::move(from);
  }

  inline MessageItem& operator=(const MessageItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageItem& operator=(MessageItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageItem* internal_default_instance() {
    return reinterpret_cast<const MessageItem*>(
               &_MessageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MessageItem& a, MessageItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageItem& from) {
    MessageItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageItem";
  }
  protected:
  explicit MessageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSigFieldNumber = 7,
    kFromUinFieldNumber = 1,
    kToUinFieldNumber = 2,
    kMsgTypeFieldNumber = 3,
    kMsgSeqFieldNumber = 4,
    kMsgUidFieldNumber = 5,
  };
  // bytes sig = 7;
  void clear_sig();
  const std::string& sig() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sig(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sig();
  PROTOBUF_NODISCARD std::string* release_sig();
  void set_allocated_sig(std::string* sig);
  private:
  const std::string& _internal_sig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sig(const std::string& value);
  std::string* _internal_mutable_sig();
  public:

  // int64 fromUin = 1;
  void clear_fromuin();
  int64_t fromuin() const;
  void set_fromuin(int64_t value);
  private:
  int64_t _internal_fromuin() const;
  void _internal_set_fromuin(int64_t value);
  public:

  // int64 toUin = 2;
  void clear_touin();
  int64_t touin() const;
  void set_touin(int64_t value);
  private:
  int64_t _internal_touin() const;
  void _internal_set_touin(int64_t value);
  public:

  // int32 msgType = 3;
  void clear_msgtype();
  int32_t msgtype() const;
  void set_msgtype(int32_t value);
  private:
  int32_t _internal_msgtype() const;
  void _internal_set_msgtype(int32_t value);
  public:

  // int32 msgSeq = 4;
  void clear_msgseq();
  int32_t msgseq() const;
  void set_msgseq(int32_t value);
  private:
  int32_t _internal_msgseq() const;
  void _internal_set_msgseq(int32_t value);
  public:

  // int64 msgUid = 5;
  void clear_msguid();
  int64_t msguid() const;
  void set_msguid(int64_t value);
  private:
  int64_t _internal_msguid() const;
  void _internal_set_msguid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:MessageItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig_;
    int64_t fromuin_;
    int64_t touin_;
    int32_t msgtype_;
    int32_t msgseq_;
    int64_t msguid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class SubD4 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubD4) */ {
 public:
  inline SubD4() : SubD4(nullptr) {}
  ~SubD4() override;
  explicit PROTOBUF_CONSTEXPR SubD4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubD4(const SubD4& from);
  SubD4(SubD4&& from) noexcept
    : SubD4() {
    *this = ::std::move(from);
  }

  inline SubD4& operator=(const SubD4& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubD4& operator=(SubD4&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubD4& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubD4* internal_default_instance() {
    return reinterpret_cast<const SubD4*>(
               &_SubD4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SubD4& a, SubD4& b) {
    a.Swap(&b);
  }
  inline void Swap(SubD4* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubD4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubD4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubD4>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubD4& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubD4& from) {
    SubD4::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubD4* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubD4";
  }
  protected:
  explicit SubD4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUinFieldNumber = 1,
  };
  // int64 uin = 1;
  void clear_uin();
  int64_t uin() const;
  void set_uin(int64_t value);
  private:
  int64_t _internal_uin() const;
  void _internal_set_uin(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SubD4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t uin_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class Sub8A final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Sub8A) */ {
 public:
  inline Sub8A() : Sub8A(nullptr) {}
  ~Sub8A() override;
  explicit PROTOBUF_CONSTEXPR Sub8A(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sub8A(const Sub8A& from);
  Sub8A(Sub8A&& from) noexcept
    : Sub8A() {
    *this = ::std::move(from);
  }

  inline Sub8A& operator=(const Sub8A& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sub8A& operator=(Sub8A&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sub8A& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sub8A* internal_default_instance() {
    return reinterpret_cast<const Sub8A*>(
               &_Sub8A_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Sub8A& a, Sub8A& b) {
    a.Swap(&b);
  }
  inline void Swap(Sub8A* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sub8A* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sub8A* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sub8A>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sub8A& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Sub8A& from) {
    Sub8A::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sub8A* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Sub8A";
  }
  protected:
  explicit Sub8A(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgInfoFieldNumber = 1,
    kReservedFieldNumber = 5,
    kAppIdFieldNumber = 2,
    kInstIdFieldNumber = 3,
    kLongMessageFlagFieldNumber = 4,
  };
  // repeated .Sub8AMsgInfo msg_info = 1;
  int msg_info_size() const;
  private:
  int _internal_msg_info_size() const;
  public:
  void clear_msg_info();
  ::Sub8AMsgInfo* mutable_msg_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Sub8AMsgInfo >*
      mutable_msg_info();
  private:
  const ::Sub8AMsgInfo& _internal_msg_info(int index) const;
  ::Sub8AMsgInfo* _internal_add_msg_info();
  public:
  const ::Sub8AMsgInfo& msg_info(int index) const;
  ::Sub8AMsgInfo* add_msg_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Sub8AMsgInfo >&
      msg_info() const;

  // bytes reserved = 5;
  void clear_reserved();
  const std::string& reserved() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserved(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserved();
  PROTOBUF_NODISCARD std::string* release_reserved();
  void set_allocated_reserved(std::string* reserved);
  private:
  const std::string& _internal_reserved() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserved(const std::string& value);
  std::string* _internal_mutable_reserved();
  public:

  // int32 appId = 2;
  void clear_appid();
  int32_t appid() const;
  void set_appid(int32_t value);
  private:
  int32_t _internal_appid() const;
  void _internal_set_appid(int32_t value);
  public:

  // int32 instId = 3;
  void clear_instid();
  int32_t instid() const;
  void set_instid(int32_t value);
  private:
  int32_t _internal_instid() const;
  void _internal_set_instid(int32_t value);
  public:

  // int32 longMessageFlag = 4;
  void clear_longmessageflag();
  int32_t longmessageflag() const;
  void set_longmessageflag(int32_t value);
  private:
  int32_t _internal_longmessageflag() const;
  void _internal_set_longmessageflag(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Sub8A)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Sub8AMsgInfo > msg_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserved_;
    int32_t appid_;
    int32_t instid_;
    int32_t longmessageflag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class Sub8AMsgInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Sub8AMsgInfo) */ {
 public:
  inline Sub8AMsgInfo() : Sub8AMsgInfo(nullptr) {}
  ~Sub8AMsgInfo() override;
  explicit PROTOBUF_CONSTEXPR Sub8AMsgInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sub8AMsgInfo(const Sub8AMsgInfo& from);
  Sub8AMsgInfo(Sub8AMsgInfo&& from) noexcept
    : Sub8AMsgInfo() {
    *this = ::std::move(from);
  }

  inline Sub8AMsgInfo& operator=(const Sub8AMsgInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sub8AMsgInfo& operator=(Sub8AMsgInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sub8AMsgInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sub8AMsgInfo* internal_default_instance() {
    return reinterpret_cast<const Sub8AMsgInfo*>(
               &_Sub8AMsgInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Sub8AMsgInfo& a, Sub8AMsgInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Sub8AMsgInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sub8AMsgInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sub8AMsgInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sub8AMsgInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sub8AMsgInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Sub8AMsgInfo& from) {
    Sub8AMsgInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sub8AMsgInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Sub8AMsgInfo";
  }
  protected:
  explicit Sub8AMsgInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromUinFieldNumber = 1,
    kToUinFieldNumber = 2,
    kMsgUidFieldNumber = 4,
    kMsgSeqFieldNumber = 3,
    kMsgRandomFieldNumber = 6,
    kMsgTimeFieldNumber = 5,
    kPkgNumFieldNumber = 7,
    kPkgIndexFieldNumber = 8,
    kDevSeqFieldNumber = 9,
  };
  // int64 fromUin = 1;
  void clear_fromuin();
  int64_t fromuin() const;
  void set_fromuin(int64_t value);
  private:
  int64_t _internal_fromuin() const;
  void _internal_set_fromuin(int64_t value);
  public:

  // int64 toUin = 2;
  void clear_touin();
  int64_t touin() const;
  void set_touin(int64_t value);
  private:
  int64_t _internal_touin() const;
  void _internal_set_touin(int64_t value);
  public:

  // int64 msgUid = 4;
  void clear_msguid();
  int64_t msguid() const;
  void set_msguid(int64_t value);
  private:
  int64_t _internal_msguid() const;
  void _internal_set_msguid(int64_t value);
  public:

  // int32 msgSeq = 3;
  void clear_msgseq();
  int32_t msgseq() const;
  void set_msgseq(int32_t value);
  private:
  int32_t _internal_msgseq() const;
  void _internal_set_msgseq(int32_t value);
  public:

  // int32 msgRandom = 6;
  void clear_msgrandom();
  int32_t msgrandom() const;
  void set_msgrandom(int32_t value);
  private:
  int32_t _internal_msgrandom() const;
  void _internal_set_msgrandom(int32_t value);
  public:

  // int64 msgTime = 5;
  void clear_msgtime();
  int64_t msgtime() const;
  void set_msgtime(int64_t value);
  private:
  int64_t _internal_msgtime() const;
  void _internal_set_msgtime(int64_t value);
  public:

  // int32 pkgNum = 7;
  void clear_pkgnum();
  int32_t pkgnum() const;
  void set_pkgnum(int32_t value);
  private:
  int32_t _internal_pkgnum() const;
  void _internal_set_pkgnum(int32_t value);
  public:

  // int32 pkgIndex = 8;
  void clear_pkgindex();
  int32_t pkgindex() const;
  void set_pkgindex(int32_t value);
  private:
  int32_t _internal_pkgindex() const;
  void _internal_set_pkgindex(int32_t value);
  public:

  // int32 devSeq = 9;
  void clear_devseq();
  int32_t devseq() const;
  void set_devseq(int32_t value);
  private:
  int32_t _internal_devseq() const;
  void _internal_set_devseq(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Sub8AMsgInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t fromuin_;
    int64_t touin_;
    int64_t msguid_;
    int32_t msgseq_;
    int32_t msgrandom_;
    int64_t msgtime_;
    int32_t pkgnum_;
    int32_t pkgindex_;
    int32_t devseq_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class SubB3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubB3) */ {
 public:
  inline SubB3() : SubB3(nullptr) {}
  ~SubB3() override;
  explicit PROTOBUF_CONSTEXPR SubB3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubB3(const SubB3& from);
  SubB3(SubB3&& from) noexcept
    : SubB3() {
    *this = ::std::move(from);
  }

  inline SubB3& operator=(const SubB3& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubB3& operator=(SubB3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubB3& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubB3* internal_default_instance() {
    return reinterpret_cast<const SubB3*>(
               &_SubB3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SubB3& a, SubB3& b) {
    a.Swap(&b);
  }
  inline void Swap(SubB3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubB3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubB3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubB3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubB3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubB3& from) {
    SubB3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubB3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubB3";
  }
  protected:
  explicit SubB3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgAddFrdNotifyFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .SubB3AddFrdNotify msgAddFrdNotify = 2;
  bool has_msgaddfrdnotify() const;
  private:
  bool _internal_has_msgaddfrdnotify() const;
  public:
  void clear_msgaddfrdnotify();
  const ::SubB3AddFrdNotify& msgaddfrdnotify() const;
  PROTOBUF_NODISCARD ::SubB3AddFrdNotify* release_msgaddfrdnotify();
  ::SubB3AddFrdNotify* mutable_msgaddfrdnotify();
  void set_allocated_msgaddfrdnotify(::SubB3AddFrdNotify* msgaddfrdnotify);
  private:
  const ::SubB3AddFrdNotify& _internal_msgaddfrdnotify() const;
  ::SubB3AddFrdNotify* _internal_mutable_msgaddfrdnotify();
  public:
  void unsafe_arena_set_allocated_msgaddfrdnotify(
      ::SubB3AddFrdNotify* msgaddfrdnotify);
  ::SubB3AddFrdNotify* unsafe_arena_release_msgaddfrdnotify();

  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SubB3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::SubB3AddFrdNotify* msgaddfrdnotify_;
    int32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class SubB3AddFrdNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubB3AddFrdNotify) */ {
 public:
  inline SubB3AddFrdNotify() : SubB3AddFrdNotify(nullptr) {}
  ~SubB3AddFrdNotify() override;
  explicit PROTOBUF_CONSTEXPR SubB3AddFrdNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubB3AddFrdNotify(const SubB3AddFrdNotify& from);
  SubB3AddFrdNotify(SubB3AddFrdNotify&& from) noexcept
    : SubB3AddFrdNotify() {
    *this = ::std::move(from);
  }

  inline SubB3AddFrdNotify& operator=(const SubB3AddFrdNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubB3AddFrdNotify& operator=(SubB3AddFrdNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubB3AddFrdNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubB3AddFrdNotify* internal_default_instance() {
    return reinterpret_cast<const SubB3AddFrdNotify*>(
               &_SubB3AddFrdNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SubB3AddFrdNotify& a, SubB3AddFrdNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SubB3AddFrdNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubB3AddFrdNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubB3AddFrdNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubB3AddFrdNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubB3AddFrdNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubB3AddFrdNotify& from) {
    SubB3AddFrdNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubB3AddFrdNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubB3AddFrdNotify";
  }
  protected:
  explicit SubB3AddFrdNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 5,
    kUinFieldNumber = 1,
  };
  // string nick = 5;
  void clear_nick();
  const std::string& nick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick();
  PROTOBUF_NODISCARD std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // int64 uin = 1;
  void clear_uin();
  int64_t uin() const;
  void set_uin(int64_t value);
  private:
  int64_t _internal_uin() const;
  void _internal_set_uin(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SubB3AddFrdNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
    int64_t uin_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class Sub44 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Sub44) */ {
 public:
  inline Sub44() : Sub44(nullptr) {}
  ~Sub44() override;
  explicit PROTOBUF_CONSTEXPR Sub44(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sub44(const Sub44& from);
  Sub44(Sub44&& from) noexcept
    : Sub44() {
    *this = ::std::move(from);
  }

  inline Sub44& operator=(const Sub44& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sub44& operator=(Sub44&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sub44& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sub44* internal_default_instance() {
    return reinterpret_cast<const Sub44*>(
               &_Sub44_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Sub44& a, Sub44& b) {
    a.Swap(&b);
  }
  inline void Swap(Sub44* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sub44* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sub44* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sub44>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sub44& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Sub44& from) {
    Sub44::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sub44* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Sub44";
  }
  protected:
  explicit Sub44(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendSyncMsgFieldNumber = 1,
    kGroupSyncMsgFieldNumber = 2,
  };
  // .Sub44FriendSyncMsg friendSyncMsg = 1;
  bool has_friendsyncmsg() const;
  private:
  bool _internal_has_friendsyncmsg() const;
  public:
  void clear_friendsyncmsg();
  const ::Sub44FriendSyncMsg& friendsyncmsg() const;
  PROTOBUF_NODISCARD ::Sub44FriendSyncMsg* release_friendsyncmsg();
  ::Sub44FriendSyncMsg* mutable_friendsyncmsg();
  void set_allocated_friendsyncmsg(::Sub44FriendSyncMsg* friendsyncmsg);
  private:
  const ::Sub44FriendSyncMsg& _internal_friendsyncmsg() const;
  ::Sub44FriendSyncMsg* _internal_mutable_friendsyncmsg();
  public:
  void unsafe_arena_set_allocated_friendsyncmsg(
      ::Sub44FriendSyncMsg* friendsyncmsg);
  ::Sub44FriendSyncMsg* unsafe_arena_release_friendsyncmsg();

  // .Sub44GroupSyncMsg groupSyncMsg = 2;
  bool has_groupsyncmsg() const;
  private:
  bool _internal_has_groupsyncmsg() const;
  public:
  void clear_groupsyncmsg();
  const ::Sub44GroupSyncMsg& groupsyncmsg() const;
  PROTOBUF_NODISCARD ::Sub44GroupSyncMsg* release_groupsyncmsg();
  ::Sub44GroupSyncMsg* mutable_groupsyncmsg();
  void set_allocated_groupsyncmsg(::Sub44GroupSyncMsg* groupsyncmsg);
  private:
  const ::Sub44GroupSyncMsg& _internal_groupsyncmsg() const;
  ::Sub44GroupSyncMsg* _internal_mutable_groupsyncmsg();
  public:
  void unsafe_arena_set_allocated_groupsyncmsg(
      ::Sub44GroupSyncMsg* groupsyncmsg);
  ::Sub44GroupSyncMsg* unsafe_arena_release_groupsyncmsg();

  // @@protoc_insertion_point(class_scope:Sub44)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Sub44FriendSyncMsg* friendsyncmsg_;
    ::Sub44GroupSyncMsg* groupsyncmsg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class Sub44FriendSyncMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Sub44FriendSyncMsg) */ {
 public:
  inline Sub44FriendSyncMsg() : Sub44FriendSyncMsg(nullptr) {}
  ~Sub44FriendSyncMsg() override;
  explicit PROTOBUF_CONSTEXPR Sub44FriendSyncMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sub44FriendSyncMsg(const Sub44FriendSyncMsg& from);
  Sub44FriendSyncMsg(Sub44FriendSyncMsg&& from) noexcept
    : Sub44FriendSyncMsg() {
    *this = ::std::move(from);
  }

  inline Sub44FriendSyncMsg& operator=(const Sub44FriendSyncMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sub44FriendSyncMsg& operator=(Sub44FriendSyncMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sub44FriendSyncMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sub44FriendSyncMsg* internal_default_instance() {
    return reinterpret_cast<const Sub44FriendSyncMsg*>(
               &_Sub44FriendSyncMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Sub44FriendSyncMsg& a, Sub44FriendSyncMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(Sub44FriendSyncMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sub44FriendSyncMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sub44FriendSyncMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sub44FriendSyncMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sub44FriendSyncMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Sub44FriendSyncMsg& from) {
    Sub44FriendSyncMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sub44FriendSyncMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Sub44FriendSyncMsg";
  }
  protected:
  explicit Sub44FriendSyncMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrWordingFieldNumber = 8,
    kUinFieldNumber = 1,
    kFUinFieldNumber = 2,
    kProcessTypeFieldNumber = 3,
    kTimeFieldNumber = 4,
    kProcessFlagFieldNumber = 5,
    kSourceIdFieldNumber = 6,
    kSourceSubIdFieldNumber = 7,
  };
  // repeated string strWording = 8;
  int strwording_size() const;
  private:
  int _internal_strwording_size() const;
  public:
  void clear_strwording();
  const std::string& strwording(int index) const;
  std::string* mutable_strwording(int index);
  void set_strwording(int index, const std::string& value);
  void set_strwording(int index, std::string&& value);
  void set_strwording(int index, const char* value);
  void set_strwording(int index, const char* value, size_t size);
  std::string* add_strwording();
  void add_strwording(const std::string& value);
  void add_strwording(std::string&& value);
  void add_strwording(const char* value);
  void add_strwording(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& strwording() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_strwording();
  private:
  const std::string& _internal_strwording(int index) const;
  std::string* _internal_add_strwording();
  public:

  // int64 uin = 1;
  void clear_uin();
  int64_t uin() const;
  void set_uin(int64_t value);
  private:
  int64_t _internal_uin() const;
  void _internal_set_uin(int64_t value);
  public:

  // int64 fUin = 2;
  void clear_fuin();
  int64_t fuin() const;
  void set_fuin(int64_t value);
  private:
  int64_t _internal_fuin() const;
  void _internal_set_fuin(int64_t value);
  public:

  // int32 processType = 3;
  void clear_processtype();
  int32_t processtype() const;
  void set_processtype(int32_t value);
  private:
  int32_t _internal_processtype() const;
  void _internal_set_processtype(int32_t value);
  public:

  // int32 time = 4;
  void clear_time();
  int32_t time() const;
  void set_time(int32_t value);
  private:
  int32_t _internal_time() const;
  void _internal_set_time(int32_t value);
  public:

  // int32 processFlag = 5;
  void clear_processflag();
  int32_t processflag() const;
  void set_processflag(int32_t value);
  private:
  int32_t _internal_processflag() const;
  void _internal_set_processflag(int32_t value);
  public:

  // int32 sourceId = 6;
  void clear_sourceid();
  int32_t sourceid() const;
  void set_sourceid(int32_t value);
  private:
  int32_t _internal_sourceid() const;
  void _internal_set_sourceid(int32_t value);
  public:

  // int32 sourceSubId = 7;
  void clear_sourcesubid();
  int32_t sourcesubid() const;
  void set_sourcesubid(int32_t value);
  private:
  int32_t _internal_sourcesubid() const;
  void _internal_set_sourcesubid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Sub44FriendSyncMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> strwording_;
    int64_t uin_;
    int64_t fuin_;
    int32_t processtype_;
    int32_t time_;
    int32_t processflag_;
    int32_t sourceid_;
    int32_t sourcesubid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class Sub44GroupSyncMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Sub44GroupSyncMsg) */ {
 public:
  inline Sub44GroupSyncMsg() : Sub44GroupSyncMsg(nullptr) {}
  ~Sub44GroupSyncMsg() override;
  explicit PROTOBUF_CONSTEXPR Sub44GroupSyncMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sub44GroupSyncMsg(const Sub44GroupSyncMsg& from);
  Sub44GroupSyncMsg(Sub44GroupSyncMsg&& from) noexcept
    : Sub44GroupSyncMsg() {
    *this = ::std::move(from);
  }

  inline Sub44GroupSyncMsg& operator=(const Sub44GroupSyncMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sub44GroupSyncMsg& operator=(Sub44GroupSyncMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sub44GroupSyncMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sub44GroupSyncMsg* internal_default_instance() {
    return reinterpret_cast<const Sub44GroupSyncMsg*>(
               &_Sub44GroupSyncMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Sub44GroupSyncMsg& a, Sub44GroupSyncMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(Sub44GroupSyncMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sub44GroupSyncMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sub44GroupSyncMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sub44GroupSyncMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sub44GroupSyncMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Sub44GroupSyncMsg& from) {
    Sub44GroupSyncMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sub44GroupSyncMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Sub44GroupSyncMsg";
  }
  protected:
  explicit Sub44GroupSyncMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBufFieldNumber = 7,
    kAuthKeyFieldNumber = 8,
    kMsgSeqFieldNumber = 2,
    kGrpCodeFieldNumber = 3,
    kGaCodeFieldNumber = 4,
    kOptUin1FieldNumber = 5,
    kMsgTypeFieldNumber = 1,
    kMsgStatusFieldNumber = 9,
    kOptUin2FieldNumber = 6,
    kActionUinFieldNumber = 10,
    kActionTimeFieldNumber = 11,
    kCurMaxMemCountFieldNumber = 12,
    kNextMaxMemCountFieldNumber = 13,
    kCurMemCountFieldNumber = 14,
    kReqSrcIdFieldNumber = 15,
    kReqSrcSubIdFieldNumber = 16,
    kInviterRoleFieldNumber = 17,
    kExtAdminNumFieldNumber = 18,
    kProcessFlagFieldNumber = 19,
  };
  // bytes msgBuf = 7;
  void clear_msgbuf();
  const std::string& msgbuf() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgbuf(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgbuf();
  PROTOBUF_NODISCARD std::string* release_msgbuf();
  void set_allocated_msgbuf(std::string* msgbuf);
  private:
  const std::string& _internal_msgbuf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgbuf(const std::string& value);
  std::string* _internal_mutable_msgbuf();
  public:

  // bytes authKey = 8;
  void clear_authkey();
  const std::string& authkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authkey();
  PROTOBUF_NODISCARD std::string* release_authkey();
  void set_allocated_authkey(std::string* authkey);
  private:
  const std::string& _internal_authkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authkey(const std::string& value);
  std::string* _internal_mutable_authkey();
  public:

  // int64 msgSeq = 2;
  void clear_msgseq();
  int64_t msgseq() const;
  void set_msgseq(int64_t value);
  private:
  int64_t _internal_msgseq() const;
  void _internal_set_msgseq(int64_t value);
  public:

  // int64 grpCode = 3;
  void clear_grpcode();
  int64_t grpcode() const;
  void set_grpcode(int64_t value);
  private:
  int64_t _internal_grpcode() const;
  void _internal_set_grpcode(int64_t value);
  public:

  // int64 gaCode = 4;
  void clear_gacode();
  int64_t gacode() const;
  void set_gacode(int64_t value);
  private:
  int64_t _internal_gacode() const;
  void _internal_set_gacode(int64_t value);
  public:

  // int64 optUin1 = 5;
  void clear_optuin1();
  int64_t optuin1() const;
  void set_optuin1(int64_t value);
  private:
  int64_t _internal_optuin1() const;
  void _internal_set_optuin1(int64_t value);
  public:

  // int32 msgType = 1;
  void clear_msgtype();
  int32_t msgtype() const;
  void set_msgtype(int32_t value);
  private:
  int32_t _internal_msgtype() const;
  void _internal_set_msgtype(int32_t value);
  public:

  // int32 msgStatus = 9;
  void clear_msgstatus();
  int32_t msgstatus() const;
  void set_msgstatus(int32_t value);
  private:
  int32_t _internal_msgstatus() const;
  void _internal_set_msgstatus(int32_t value);
  public:

  // int64 optUin2 = 6;
  void clear_optuin2();
  int64_t optuin2() const;
  void set_optuin2(int64_t value);
  private:
  int64_t _internal_optuin2() const;
  void _internal_set_optuin2(int64_t value);
  public:

  // int64 actionUin = 10;
  void clear_actionuin();
  int64_t actionuin() const;
  void set_actionuin(int64_t value);
  private:
  int64_t _internal_actionuin() const;
  void _internal_set_actionuin(int64_t value);
  public:

  // int64 actionTime = 11;
  void clear_actiontime();
  int64_t actiontime() const;
  void set_actiontime(int64_t value);
  private:
  int64_t _internal_actiontime() const;
  void _internal_set_actiontime(int64_t value);
  public:

  // int32 curMaxMemCount = 12;
  void clear_curmaxmemcount();
  int32_t curmaxmemcount() const;
  void set_curmaxmemcount(int32_t value);
  private:
  int32_t _internal_curmaxmemcount() const;
  void _internal_set_curmaxmemcount(int32_t value);
  public:

  // int32 nextMaxMemCount = 13;
  void clear_nextmaxmemcount();
  int32_t nextmaxmemcount() const;
  void set_nextmaxmemcount(int32_t value);
  private:
  int32_t _internal_nextmaxmemcount() const;
  void _internal_set_nextmaxmemcount(int32_t value);
  public:

  // int32 curMemCount = 14;
  void clear_curmemcount();
  int32_t curmemcount() const;
  void set_curmemcount(int32_t value);
  private:
  int32_t _internal_curmemcount() const;
  void _internal_set_curmemcount(int32_t value);
  public:

  // int32 reqSrcId = 15;
  void clear_reqsrcid();
  int32_t reqsrcid() const;
  void set_reqsrcid(int32_t value);
  private:
  int32_t _internal_reqsrcid() const;
  void _internal_set_reqsrcid(int32_t value);
  public:

  // int32 reqSrcSubId = 16;
  void clear_reqsrcsubid();
  int32_t reqsrcsubid() const;
  void set_reqsrcsubid(int32_t value);
  private:
  int32_t _internal_reqsrcsubid() const;
  void _internal_set_reqsrcsubid(int32_t value);
  public:

  // int32 inviterRole = 17;
  void clear_inviterrole();
  int32_t inviterrole() const;
  void set_inviterrole(int32_t value);
  private:
  int32_t _internal_inviterrole() const;
  void _internal_set_inviterrole(int32_t value);
  public:

  // int32 extAdminNum = 18;
  void clear_extadminnum();
  int32_t extadminnum() const;
  void set_extadminnum(int32_t value);
  private:
  int32_t _internal_extadminnum() const;
  void _internal_set_extadminnum(int32_t value);
  public:

  // int32 processFlag = 19;
  void clear_processflag();
  int32_t processflag() const;
  void set_processflag(int32_t value);
  private:
  int32_t _internal_processflag() const;
  void _internal_set_processflag(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Sub44GroupSyncMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgbuf_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authkey_;
    int64_t msgseq_;
    int64_t grpcode_;
    int64_t gacode_;
    int64_t optuin1_;
    int32_t msgtype_;
    int32_t msgstatus_;
    int64_t optuin2_;
    int64_t actionuin_;
    int64_t actiontime_;
    int32_t curmaxmemcount_;
    int32_t nextmaxmemcount_;
    int32_t curmemcount_;
    int32_t reqsrcid_;
    int32_t reqsrcsubid_;
    int32_t inviterrole_;
    int32_t extadminnum_;
    int32_t processflag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class GroupMemberReqBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupMemberReqBody) */ {
 public:
  inline GroupMemberReqBody() : GroupMemberReqBody(nullptr) {}
  ~GroupMemberReqBody() override;
  explicit PROTOBUF_CONSTEXPR GroupMemberReqBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupMemberReqBody(const GroupMemberReqBody& from);
  GroupMemberReqBody(GroupMemberReqBody&& from) noexcept
    : GroupMemberReqBody() {
    *this = ::std::move(from);
  }

  inline GroupMemberReqBody& operator=(const GroupMemberReqBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMemberReqBody& operator=(GroupMemberReqBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupMemberReqBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupMemberReqBody* internal_default_instance() {
    return reinterpret_cast<const GroupMemberReqBody*>(
               &_GroupMemberReqBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GroupMemberReqBody& a, GroupMemberReqBody& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMemberReqBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMemberReqBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupMemberReqBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupMemberReqBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupMemberReqBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupMemberReqBody& from) {
    GroupMemberReqBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMemberReqBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupMemberReqBody";
  }
  protected:
  explicit GroupMemberReqBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupCodeFieldNumber = 1,
    kUinFieldNumber = 2,
    kNewClientFieldNumber = 3,
    kClientTypeFieldNumber = 4,
    kRichCardNameVerFieldNumber = 5,
  };
  // int64 groupCode = 1;
  void clear_groupcode();
  int64_t groupcode() const;
  void set_groupcode(int64_t value);
  private:
  int64_t _internal_groupcode() const;
  void _internal_set_groupcode(int64_t value);
  public:

  // int64 uin = 2;
  void clear_uin();
  int64_t uin() const;
  void set_uin(int64_t value);
  private:
  int64_t _internal_uin() const;
  void _internal_set_uin(int64_t value);
  public:

  // bool newClient = 3;
  void clear_newclient();
  bool newclient() const;
  void set_newclient(bool value);
  private:
  bool _internal_newclient() const;
  void _internal_set_newclient(bool value);
  public:

  // int32 clientType = 4;
  void clear_clienttype();
  int32_t clienttype() const;
  void set_clienttype(int32_t value);
  private:
  int32_t _internal_clienttype() const;
  void _internal_set_clienttype(int32_t value);
  public:

  // int32 richCardNameVer = 5;
  void clear_richcardnamever();
  int32_t richcardnamever() const;
  void set_richcardnamever(int32_t value);
  private:
  int32_t _internal_richcardnamever() const;
  void _internal_set_richcardnamever(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GroupMemberReqBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t groupcode_;
    int64_t uin_;
    bool newclient_;
    int32_t clienttype_;
    int32_t richcardnamever_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class GroupMemberRspBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupMemberRspBody) */ {
 public:
  inline GroupMemberRspBody() : GroupMemberRspBody(nullptr) {}
  ~GroupMemberRspBody() override;
  explicit PROTOBUF_CONSTEXPR GroupMemberRspBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupMemberRspBody(const GroupMemberRspBody& from);
  GroupMemberRspBody(GroupMemberRspBody&& from) noexcept
    : GroupMemberRspBody() {
    *this = ::std::move(from);
  }

  inline GroupMemberRspBody& operator=(const GroupMemberRspBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMemberRspBody& operator=(GroupMemberRspBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupMemberRspBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupMemberRspBody* internal_default_instance() {
    return reinterpret_cast<const GroupMemberRspBody*>(
               &_GroupMemberRspBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GroupMemberRspBody& a, GroupMemberRspBody& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMemberRspBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMemberRspBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupMemberRspBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupMemberRspBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupMemberRspBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupMemberRspBody& from) {
    GroupMemberRspBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMemberRspBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupMemberRspBody";
  }
  protected:
  explicit GroupMemberRspBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemInfoFieldNumber = 3,
    kGroupCodeFieldNumber = 1,
    kSelfRoleFieldNumber = 2,
    kBoolSelfLocationSharedFieldNumber = 4,
    kGroupTypeFieldNumber = 5,
  };
  // .GroupMemberInfo memInfo = 3;
  bool has_meminfo() const;
  private:
  bool _internal_has_meminfo() const;
  public:
  void clear_meminfo();
  const ::GroupMemberInfo& meminfo() const;
  PROTOBUF_NODISCARD ::GroupMemberInfo* release_meminfo();
  ::GroupMemberInfo* mutable_meminfo();
  void set_allocated_meminfo(::GroupMemberInfo* meminfo);
  private:
  const ::GroupMemberInfo& _internal_meminfo() const;
  ::GroupMemberInfo* _internal_mutable_meminfo();
  public:
  void unsafe_arena_set_allocated_meminfo(
      ::GroupMemberInfo* meminfo);
  ::GroupMemberInfo* unsafe_arena_release_meminfo();

  // int64 groupCode = 1;
  void clear_groupcode();
  int64_t groupcode() const;
  void set_groupcode(int64_t value);
  private:
  int64_t _internal_groupcode() const;
  void _internal_set_groupcode(int64_t value);
  public:

  // int32 selfRole = 2;
  void clear_selfrole();
  int32_t selfrole() const;
  void set_selfrole(int32_t value);
  private:
  int32_t _internal_selfrole() const;
  void _internal_set_selfrole(int32_t value);
  public:

  // bool boolSelfLocationShared = 4;
  void clear_boolselflocationshared();
  bool boolselflocationshared() const;
  void set_boolselflocationshared(bool value);
  private:
  bool _internal_boolselflocationshared() const;
  void _internal_set_boolselflocationshared(bool value);
  public:

  // int32 groupType = 5;
  void clear_grouptype();
  int32_t grouptype() const;
  void set_grouptype(int32_t value);
  private:
  int32_t _internal_grouptype() const;
  void _internal_set_grouptype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GroupMemberRspBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::GroupMemberInfo* meminfo_;
    int64_t groupcode_;
    int32_t selfrole_;
    bool boolselflocationshared_;
    int32_t grouptype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class GroupMemberInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupMemberInfo) */ {
 public:
  inline GroupMemberInfo() : GroupMemberInfo(nullptr) {}
  ~GroupMemberInfo() override;
  explicit PROTOBUF_CONSTEXPR GroupMemberInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupMemberInfo(const GroupMemberInfo& from);
  GroupMemberInfo(GroupMemberInfo&& from) noexcept
    : GroupMemberInfo() {
    *this = ::std::move(from);
  }

  inline GroupMemberInfo& operator=(const GroupMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMemberInfo& operator=(GroupMemberInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupMemberInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupMemberInfo* internal_default_instance() {
    return reinterpret_cast<const GroupMemberInfo*>(
               &_GroupMemberInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GroupMemberInfo& a, GroupMemberInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMemberInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMemberInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupMemberInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupMemberInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupMemberInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupMemberInfo& from) {
    GroupMemberInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMemberInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupMemberInfo";
  }
  protected:
  explicit GroupMemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 3,
    kRemarkFieldNumber = 5,
    kCardFieldNumber = 8,
    kLocationFieldNumber = 10,
    kNickFieldNumber = 11,
    kLevFieldNumber = 13,
    kGbarTitleFieldNumber = 18,
    kGbarUrlFieldNumber = 19,
    kSpecialTitleFieldNumber = 31,
    kPhoneNumFieldNumber = 35,
    kJobFieldNumber = 36,
    kHonorFieldNumber = 41,
    kUinFieldNumber = 1,
    kResultFieldNumber = 2,
    kCreditFieldNumber = 7,
    kSexFieldNumber = 9,
    kAgeFieldNumber = 12,
    kJoinFieldNumber = 14,
    kIsFriendFieldNumber = 4,
    kIsConcernedFieldNumber = 6,
    kIsAllowModCardFieldNumber = 21,
    kIsVipFieldNumber = 22,
    kGbarCntFieldNumber = 20,
    kLastSpeakFieldNumber = 15,
    kIsYearVipFieldNumber = 23,
    kIsSuperVipFieldNumber = 24,
    kIsSuperQqFieldNumber = 25,
    kLocationSharedFieldNumber = 28,
    kVipLevFieldNumber = 26,
    kRoleFieldNumber = 27,
    kConcernTypeFieldNumber = 30,
    kInt64DistanceFieldNumber = 29,
    kSpecialTitleExpireTimeFieldNumber = 32,
    kMedalIdFieldNumber = 37,
    kLevelFieldNumber = 39,
  };
  // bytes errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bytes remark = 5;
  void clear_remark();
  const std::string& remark() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remark(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remark();
  PROTOBUF_NODISCARD std::string* release_remark();
  void set_allocated_remark(std::string* remark);
  private:
  const std::string& _internal_remark() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remark(const std::string& value);
  std::string* _internal_mutable_remark();
  public:

  // bytes card = 8;
  void clear_card();
  const std::string& card() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card();
  PROTOBUF_NODISCARD std::string* release_card();
  void set_allocated_card(std::string* card);
  private:
  const std::string& _internal_card() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card(const std::string& value);
  std::string* _internal_mutable_card();
  public:

  // bytes location = 10;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // bytes nick = 11;
  void clear_nick();
  const std::string& nick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick();
  PROTOBUF_NODISCARD std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // bytes lev = 13;
  void clear_lev();
  const std::string& lev() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lev(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lev();
  PROTOBUF_NODISCARD std::string* release_lev();
  void set_allocated_lev(std::string* lev);
  private:
  const std::string& _internal_lev() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lev(const std::string& value);
  std::string* _internal_mutable_lev();
  public:

  // bytes gbarTitle = 18;
  void clear_gbartitle();
  const std::string& gbartitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gbartitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gbartitle();
  PROTOBUF_NODISCARD std::string* release_gbartitle();
  void set_allocated_gbartitle(std::string* gbartitle);
  private:
  const std::string& _internal_gbartitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gbartitle(const std::string& value);
  std::string* _internal_mutable_gbartitle();
  public:

  // bytes gbarUrl = 19;
  void clear_gbarurl();
  const std::string& gbarurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gbarurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gbarurl();
  PROTOBUF_NODISCARD std::string* release_gbarurl();
  void set_allocated_gbarurl(std::string* gbarurl);
  private:
  const std::string& _internal_gbarurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gbarurl(const std::string& value);
  std::string* _internal_mutable_gbarurl();
  public:

  // bytes specialTitle = 31;
  void clear_specialtitle();
  const std::string& specialtitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_specialtitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_specialtitle();
  PROTOBUF_NODISCARD std::string* release_specialtitle();
  void set_allocated_specialtitle(std::string* specialtitle);
  private:
  const std::string& _internal_specialtitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_specialtitle(const std::string& value);
  std::string* _internal_mutable_specialtitle();
  public:

  // bytes phoneNum = 35;
  void clear_phonenum();
  const std::string& phonenum() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phonenum(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phonenum();
  PROTOBUF_NODISCARD std::string* release_phonenum();
  void set_allocated_phonenum(std::string* phonenum);
  private:
  const std::string& _internal_phonenum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phonenum(const std::string& value);
  std::string* _internal_mutable_phonenum();
  public:

  // bytes job = 36;
  void clear_job();
  const std::string& job() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_job(ArgT0&& arg0, ArgT... args);
  std::string* mutable_job();
  PROTOBUF_NODISCARD std::string* release_job();
  void set_allocated_job(std::string* job);
  private:
  const std::string& _internal_job() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_job(const std::string& value);
  std::string* _internal_mutable_job();
  public:

  // string honor = 41;
  void clear_honor();
  const std::string& honor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_honor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_honor();
  PROTOBUF_NODISCARD std::string* release_honor();
  void set_allocated_honor(std::string* honor);
  private:
  const std::string& _internal_honor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_honor(const std::string& value);
  std::string* _internal_mutable_honor();
  public:

  // int64 uin = 1;
  void clear_uin();
  int64_t uin() const;
  void set_uin(int64_t value);
  private:
  int64_t _internal_uin() const;
  void _internal_set_uin(int64_t value);
  public:

  // int32 result = 2;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // int32 credit = 7;
  void clear_credit();
  int32_t credit() const;
  void set_credit(int32_t value);
  private:
  int32_t _internal_credit() const;
  void _internal_set_credit(int32_t value);
  public:

  // int32 sex = 9;
  void clear_sex();
  int32_t sex() const;
  void set_sex(int32_t value);
  private:
  int32_t _internal_sex() const;
  void _internal_set_sex(int32_t value);
  public:

  // int32 age = 12;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // int64 join = 14;
  void clear_join();
  int64_t join() const;
  void set_join(int64_t value);
  private:
  int64_t _internal_join() const;
  void _internal_set_join(int64_t value);
  public:

  // bool IsFriend = 4;
  void clear_isfriend();
  bool isfriend() const;
  void set_isfriend(bool value);
  private:
  bool _internal_isfriend() const;
  void _internal_set_isfriend(bool value);
  public:

  // bool IsConcerned = 6;
  void clear_isconcerned();
  bool isconcerned() const;
  void set_isconcerned(bool value);
  private:
  bool _internal_isconcerned() const;
  void _internal_set_isconcerned(bool value);
  public:

  // bool isAllowModCard = 21;
  void clear_isallowmodcard();
  bool isallowmodcard() const;
  void set_isallowmodcard(bool value);
  private:
  bool _internal_isallowmodcard() const;
  void _internal_set_isallowmodcard(bool value);
  public:

  // bool isVip = 22;
  void clear_isvip();
  bool isvip() const;
  void set_isvip(bool value);
  private:
  bool _internal_isvip() const;
  void _internal_set_isvip(bool value);
  public:

  // int32 gbarCnt = 20;
  void clear_gbarcnt();
  int32_t gbarcnt() const;
  void set_gbarcnt(int32_t value);
  private:
  int32_t _internal_gbarcnt() const;
  void _internal_set_gbarcnt(int32_t value);
  public:

  // int64 lastSpeak = 15;
  void clear_lastspeak();
  int64_t lastspeak() const;
  void set_lastspeak(int64_t value);
  private:
  int64_t _internal_lastspeak() const;
  void _internal_set_lastspeak(int64_t value);
  public:

  // bool isYearVip = 23;
  void clear_isyearvip();
  bool isyearvip() const;
  void set_isyearvip(bool value);
  private:
  bool _internal_isyearvip() const;
  void _internal_set_isyearvip(bool value);
  public:

  // bool isSuperVip = 24;
  void clear_issupervip();
  bool issupervip() const;
  void set_issupervip(bool value);
  private:
  bool _internal_issupervip() const;
  void _internal_set_issupervip(bool value);
  public:

  // bool isSuperQq = 25;
  void clear_issuperqq();
  bool issuperqq() const;
  void set_issuperqq(bool value);
  private:
  bool _internal_issuperqq() const;
  void _internal_set_issuperqq(bool value);
  public:

  // bool locationShared = 28;
  void clear_locationshared();
  bool locationshared() const;
  void set_locationshared(bool value);
  private:
  bool _internal_locationshared() const;
  void _internal_set_locationshared(bool value);
  public:

  // int32 vipLev = 26;
  void clear_viplev();
  int32_t viplev() const;
  void set_viplev(int32_t value);
  private:
  int32_t _internal_viplev() const;
  void _internal_set_viplev(int32_t value);
  public:

  // int32 role = 27;
  void clear_role();
  int32_t role() const;
  void set_role(int32_t value);
  private:
  int32_t _internal_role() const;
  void _internal_set_role(int32_t value);
  public:

  // int32 concernType = 30;
  void clear_concerntype();
  int32_t concerntype() const;
  void set_concerntype(int32_t value);
  private:
  int32_t _internal_concerntype() const;
  void _internal_set_concerntype(int32_t value);
  public:

  // int64 int64Distance = 29;
  void clear_int64distance();
  int64_t int64distance() const;
  void set_int64distance(int64_t value);
  private:
  int64_t _internal_int64distance() const;
  void _internal_set_int64distance(int64_t value);
  public:

  // int32 specialTitleExpireTime = 32;
  void clear_specialtitleexpiretime();
  int32_t specialtitleexpiretime() const;
  void set_specialtitleexpiretime(int32_t value);
  private:
  int32_t _internal_specialtitleexpiretime() const;
  void _internal_set_specialtitleexpiretime(int32_t value);
  public:

  // int32 medalId = 37;
  void clear_medalid();
  int32_t medalid() const;
  void set_medalid(int32_t value);
  private:
  int32_t _internal_medalid() const;
  void _internal_set_medalid(int32_t value);
  public:

  // int32 level = 39;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GroupMemberInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remark_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lev_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gbartitle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gbarurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr specialtitle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phonenum_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr honor_;
    int64_t uin_;
    int32_t result_;
    int32_t credit_;
    int32_t sex_;
    int32_t age_;
    int64_t join_;
    bool isfriend_;
    bool isconcerned_;
    bool isallowmodcard_;
    bool isvip_;
    int32_t gbarcnt_;
    int64_t lastspeak_;
    bool isyearvip_;
    bool issupervip_;
    bool issuperqq_;
    bool locationshared_;
    int32_t viplev_;
    int32_t role_;
    int32_t concerntype_;
    int64_t int64distance_;
    int32_t specialtitleexpiretime_;
    int32_t medalid_;
    int32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceInfo

// string bootloader = 1;
inline void DeviceInfo::clear_bootloader() {
  _impl_.bootloader_.ClearToEmpty();
}
inline const std::string& DeviceInfo::bootloader() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.bootloader)
  return _internal_bootloader();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_bootloader(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bootloader_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DeviceInfo.bootloader)
}
inline std::string* DeviceInfo::mutable_bootloader() {
  std::string* _s = _internal_mutable_bootloader();
  // @@protoc_insertion_point(field_mutable:DeviceInfo.bootloader)
  return _s;
}
inline const std::string& DeviceInfo::_internal_bootloader() const {
  return _impl_.bootloader_.Get();
}
inline void DeviceInfo::_internal_set_bootloader(const std::string& value) {
  
  _impl_.bootloader_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_bootloader() {
  
  return _impl_.bootloader_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_bootloader() {
  // @@protoc_insertion_point(field_release:DeviceInfo.bootloader)
  return _impl_.bootloader_.Release();
}
inline void DeviceInfo::set_allocated_bootloader(std::string* bootloader) {
  if (bootloader != nullptr) {
    
  } else {
    
  }
  _impl_.bootloader_.SetAllocated(bootloader, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bootloader_.IsDefault()) {
    _impl_.bootloader_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.bootloader)
}

// string procVersion = 2;
inline void DeviceInfo::clear_procversion() {
  _impl_.procversion_.ClearToEmpty();
}
inline const std::string& DeviceInfo::procversion() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.procVersion)
  return _internal_procversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_procversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.procversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DeviceInfo.procVersion)
}
inline std::string* DeviceInfo::mutable_procversion() {
  std::string* _s = _internal_mutable_procversion();
  // @@protoc_insertion_point(field_mutable:DeviceInfo.procVersion)
  return _s;
}
inline const std::string& DeviceInfo::_internal_procversion() const {
  return _impl_.procversion_.Get();
}
inline void DeviceInfo::_internal_set_procversion(const std::string& value) {
  
  _impl_.procversion_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_procversion() {
  
  return _impl_.procversion_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_procversion() {
  // @@protoc_insertion_point(field_release:DeviceInfo.procVersion)
  return _impl_.procversion_.Release();
}
inline void DeviceInfo::set_allocated_procversion(std::string* procversion) {
  if (procversion != nullptr) {
    
  } else {
    
  }
  _impl_.procversion_.SetAllocated(procversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.procversion_.IsDefault()) {
    _impl_.procversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.procVersion)
}

// string codename = 3;
inline void DeviceInfo::clear_codename() {
  _impl_.codename_.ClearToEmpty();
}
inline const std::string& DeviceInfo::codename() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.codename)
  return _internal_codename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_codename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.codename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DeviceInfo.codename)
}
inline std::string* DeviceInfo::mutable_codename() {
  std::string* _s = _internal_mutable_codename();
  // @@protoc_insertion_point(field_mutable:DeviceInfo.codename)
  return _s;
}
inline const std::string& DeviceInfo::_internal_codename() const {
  return _impl_.codename_.Get();
}
inline void DeviceInfo::_internal_set_codename(const std::string& value) {
  
  _impl_.codename_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_codename() {
  
  return _impl_.codename_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_codename() {
  // @@protoc_insertion_point(field_release:DeviceInfo.codename)
  return _impl_.codename_.Release();
}
inline void DeviceInfo::set_allocated_codename(std::string* codename) {
  if (codename != nullptr) {
    
  } else {
    
  }
  _impl_.codename_.SetAllocated(codename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.codename_.IsDefault()) {
    _impl_.codename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.codename)
}

// string incremental = 4;
inline void DeviceInfo::clear_incremental() {
  _impl_.incremental_.ClearToEmpty();
}
inline const std::string& DeviceInfo::incremental() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.incremental)
  return _internal_incremental();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_incremental(ArgT0&& arg0, ArgT... args) {
 
 _impl_.incremental_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DeviceInfo.incremental)
}
inline std::string* DeviceInfo::mutable_incremental() {
  std::string* _s = _internal_mutable_incremental();
  // @@protoc_insertion_point(field_mutable:DeviceInfo.incremental)
  return _s;
}
inline const std::string& DeviceInfo::_internal_incremental() const {
  return _impl_.incremental_.Get();
}
inline void DeviceInfo::_internal_set_incremental(const std::string& value) {
  
  _impl_.incremental_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_incremental() {
  
  return _impl_.incremental_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_incremental() {
  // @@protoc_insertion_point(field_release:DeviceInfo.incremental)
  return _impl_.incremental_.Release();
}
inline void DeviceInfo::set_allocated_incremental(std::string* incremental) {
  if (incremental != nullptr) {
    
  } else {
    
  }
  _impl_.incremental_.SetAllocated(incremental, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.incremental_.IsDefault()) {
    _impl_.incremental_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.incremental)
}

// string fingerprint = 5;
inline void DeviceInfo::clear_fingerprint() {
  _impl_.fingerprint_.ClearToEmpty();
}
inline const std::string& DeviceInfo::fingerprint() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.fingerprint)
  return _internal_fingerprint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_fingerprint(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fingerprint_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DeviceInfo.fingerprint)
}
inline std::string* DeviceInfo::mutable_fingerprint() {
  std::string* _s = _internal_mutable_fingerprint();
  // @@protoc_insertion_point(field_mutable:DeviceInfo.fingerprint)
  return _s;
}
inline const std::string& DeviceInfo::_internal_fingerprint() const {
  return _impl_.fingerprint_.Get();
}
inline void DeviceInfo::_internal_set_fingerprint(const std::string& value) {
  
  _impl_.fingerprint_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_fingerprint() {
  
  return _impl_.fingerprint_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_fingerprint() {
  // @@protoc_insertion_point(field_release:DeviceInfo.fingerprint)
  return _impl_.fingerprint_.Release();
}
inline void DeviceInfo::set_allocated_fingerprint(std::string* fingerprint) {
  if (fingerprint != nullptr) {
    
  } else {
    
  }
  _impl_.fingerprint_.SetAllocated(fingerprint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fingerprint_.IsDefault()) {
    _impl_.fingerprint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.fingerprint)
}

// string bootId = 6;
inline void DeviceInfo::clear_bootid() {
  _impl_.bootid_.ClearToEmpty();
}
inline const std::string& DeviceInfo::bootid() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.bootId)
  return _internal_bootid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_bootid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bootid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DeviceInfo.bootId)
}
inline std::string* DeviceInfo::mutable_bootid() {
  std::string* _s = _internal_mutable_bootid();
  // @@protoc_insertion_point(field_mutable:DeviceInfo.bootId)
  return _s;
}
inline const std::string& DeviceInfo::_internal_bootid() const {
  return _impl_.bootid_.Get();
}
inline void DeviceInfo::_internal_set_bootid(const std::string& value) {
  
  _impl_.bootid_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_bootid() {
  
  return _impl_.bootid_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_bootid() {
  // @@protoc_insertion_point(field_release:DeviceInfo.bootId)
  return _impl_.bootid_.Release();
}
inline void DeviceInfo::set_allocated_bootid(std::string* bootid) {
  if (bootid != nullptr) {
    
  } else {
    
  }
  _impl_.bootid_.SetAllocated(bootid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bootid_.IsDefault()) {
    _impl_.bootid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.bootId)
}

// string androidId = 7;
inline void DeviceInfo::clear_androidid() {
  _impl_.androidid_.ClearToEmpty();
}
inline const std::string& DeviceInfo::androidid() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.androidId)
  return _internal_androidid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_androidid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.androidid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DeviceInfo.androidId)
}
inline std::string* DeviceInfo::mutable_androidid() {
  std::string* _s = _internal_mutable_androidid();
  // @@protoc_insertion_point(field_mutable:DeviceInfo.androidId)
  return _s;
}
inline const std::string& DeviceInfo::_internal_androidid() const {
  return _impl_.androidid_.Get();
}
inline void DeviceInfo::_internal_set_androidid(const std::string& value) {
  
  _impl_.androidid_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_androidid() {
  
  return _impl_.androidid_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_androidid() {
  // @@protoc_insertion_point(field_release:DeviceInfo.androidId)
  return _impl_.androidid_.Release();
}
inline void DeviceInfo::set_allocated_androidid(std::string* androidid) {
  if (androidid != nullptr) {
    
  } else {
    
  }
  _impl_.androidid_.SetAllocated(androidid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.androidid_.IsDefault()) {
    _impl_.androidid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.androidId)
}

// string baseBand = 8;
inline void DeviceInfo::clear_baseband() {
  _impl_.baseband_.ClearToEmpty();
}
inline const std::string& DeviceInfo::baseband() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.baseBand)
  return _internal_baseband();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_baseband(ArgT0&& arg0, ArgT... args) {
 
 _impl_.baseband_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DeviceInfo.baseBand)
}
inline std::string* DeviceInfo::mutable_baseband() {
  std::string* _s = _internal_mutable_baseband();
  // @@protoc_insertion_point(field_mutable:DeviceInfo.baseBand)
  return _s;
}
inline const std::string& DeviceInfo::_internal_baseband() const {
  return _impl_.baseband_.Get();
}
inline void DeviceInfo::_internal_set_baseband(const std::string& value) {
  
  _impl_.baseband_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_baseband() {
  
  return _impl_.baseband_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_baseband() {
  // @@protoc_insertion_point(field_release:DeviceInfo.baseBand)
  return _impl_.baseband_.Release();
}
inline void DeviceInfo::set_allocated_baseband(std::string* baseband) {
  if (baseband != nullptr) {
    
  } else {
    
  }
  _impl_.baseband_.SetAllocated(baseband, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.baseband_.IsDefault()) {
    _impl_.baseband_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.baseBand)
}

// string innerVersion = 9;
inline void DeviceInfo::clear_innerversion() {
  _impl_.innerversion_.ClearToEmpty();
}
inline const std::string& DeviceInfo::innerversion() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.innerVersion)
  return _internal_innerversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_innerversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.innerversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DeviceInfo.innerVersion)
}
inline std::string* DeviceInfo::mutable_innerversion() {
  std::string* _s = _internal_mutable_innerversion();
  // @@protoc_insertion_point(field_mutable:DeviceInfo.innerVersion)
  return _s;
}
inline const std::string& DeviceInfo::_internal_innerversion() const {
  return _impl_.innerversion_.Get();
}
inline void DeviceInfo::_internal_set_innerversion(const std::string& value) {
  
  _impl_.innerversion_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_innerversion() {
  
  return _impl_.innerversion_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_innerversion() {
  // @@protoc_insertion_point(field_release:DeviceInfo.innerVersion)
  return _impl_.innerversion_.Release();
}
inline void DeviceInfo::set_allocated_innerversion(std::string* innerversion) {
  if (innerversion != nullptr) {
    
  } else {
    
  }
  _impl_.innerversion_.SetAllocated(innerversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.innerversion_.IsDefault()) {
    _impl_.innerversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.innerVersion)
}

// -------------------------------------------------------------------

// RequestBody

// repeated .ConfigSeq rpt_config_list = 1;
inline int RequestBody::_internal_rpt_config_list_size() const {
  return _impl_.rpt_config_list_.size();
}
inline int RequestBody::rpt_config_list_size() const {
  return _internal_rpt_config_list_size();
}
inline void RequestBody::clear_rpt_config_list() {
  _impl_.rpt_config_list_.Clear();
}
inline ::ConfigSeq* RequestBody::mutable_rpt_config_list(int index) {
  // @@protoc_insertion_point(field_mutable:RequestBody.rpt_config_list)
  return _impl_.rpt_config_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigSeq >*
RequestBody::mutable_rpt_config_list() {
  // @@protoc_insertion_point(field_mutable_list:RequestBody.rpt_config_list)
  return &_impl_.rpt_config_list_;
}
inline const ::ConfigSeq& RequestBody::_internal_rpt_config_list(int index) const {
  return _impl_.rpt_config_list_.Get(index);
}
inline const ::ConfigSeq& RequestBody::rpt_config_list(int index) const {
  // @@protoc_insertion_point(field_get:RequestBody.rpt_config_list)
  return _internal_rpt_config_list(index);
}
inline ::ConfigSeq* RequestBody::_internal_add_rpt_config_list() {
  return _impl_.rpt_config_list_.Add();
}
inline ::ConfigSeq* RequestBody::add_rpt_config_list() {
  ::ConfigSeq* _add = _internal_add_rpt_config_list();
  // @@protoc_insertion_point(field_add:RequestBody.rpt_config_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigSeq >&
RequestBody::rpt_config_list() const {
  // @@protoc_insertion_point(field_list:RequestBody.rpt_config_list)
  return _impl_.rpt_config_list_;
}

// -------------------------------------------------------------------

// ConfigSeq

// int32 type = 1;
inline void ConfigSeq::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t ConfigSeq::_internal_type() const {
  return _impl_.type_;
}
inline int32_t ConfigSeq::type() const {
  // @@protoc_insertion_point(field_get:ConfigSeq.type)
  return _internal_type();
}
inline void ConfigSeq::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void ConfigSeq::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ConfigSeq.type)
}

// int32 version = 2;
inline void ConfigSeq::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t ConfigSeq::_internal_version() const {
  return _impl_.version_;
}
inline int32_t ConfigSeq::version() const {
  // @@protoc_insertion_point(field_get:ConfigSeq.version)
  return _internal_version();
}
inline void ConfigSeq::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void ConfigSeq::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ConfigSeq.version)
}

// -------------------------------------------------------------------

// D50ReqBody

// int64 appid = 1;
inline void D50ReqBody::clear_appid() {
  _impl_.appid_ = int64_t{0};
}
inline int64_t D50ReqBody::_internal_appid() const {
  return _impl_.appid_;
}
inline int64_t D50ReqBody::appid() const {
  // @@protoc_insertion_point(field_get:D50ReqBody.appid)
  return _internal_appid();
}
inline void D50ReqBody::_internal_set_appid(int64_t value) {
  
  _impl_.appid_ = value;
}
inline void D50ReqBody::set_appid(int64_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:D50ReqBody.appid)
}

// int32 maxPkgSize = 2;
inline void D50ReqBody::clear_maxpkgsize() {
  _impl_.maxpkgsize_ = 0;
}
inline int32_t D50ReqBody::_internal_maxpkgsize() const {
  return _impl_.maxpkgsize_;
}
inline int32_t D50ReqBody::maxpkgsize() const {
  // @@protoc_insertion_point(field_get:D50ReqBody.maxPkgSize)
  return _internal_maxpkgsize();
}
inline void D50ReqBody::_internal_set_maxpkgsize(int32_t value) {
  
  _impl_.maxpkgsize_ = value;
}
inline void D50ReqBody::set_maxpkgsize(int32_t value) {
  _internal_set_maxpkgsize(value);
  // @@protoc_insertion_point(field_set:D50ReqBody.maxPkgSize)
}

// int32 startTime = 3;
inline void D50ReqBody::clear_starttime() {
  _impl_.starttime_ = 0;
}
inline int32_t D50ReqBody::_internal_starttime() const {
  return _impl_.starttime_;
}
inline int32_t D50ReqBody::starttime() const {
  // @@protoc_insertion_point(field_get:D50ReqBody.startTime)
  return _internal_starttime();
}
inline void D50ReqBody::_internal_set_starttime(int32_t value) {
  
  _impl_.starttime_ = value;
}
inline void D50ReqBody::set_starttime(int32_t value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:D50ReqBody.startTime)
}

// int32 startIndex = 4;
inline void D50ReqBody::clear_startindex() {
  _impl_.startindex_ = 0;
}
inline int32_t D50ReqBody::_internal_startindex() const {
  return _impl_.startindex_;
}
inline int32_t D50ReqBody::startindex() const {
  // @@protoc_insertion_point(field_get:D50ReqBody.startIndex)
  return _internal_startindex();
}
inline void D50ReqBody::_internal_set_startindex(int32_t value) {
  
  _impl_.startindex_ = value;
}
inline void D50ReqBody::set_startindex(int32_t value) {
  _internal_set_startindex(value);
  // @@protoc_insertion_point(field_set:D50ReqBody.startIndex)
}

// int32 reqNum = 5;
inline void D50ReqBody::clear_reqnum() {
  _impl_.reqnum_ = 0;
}
inline int32_t D50ReqBody::_internal_reqnum() const {
  return _impl_.reqnum_;
}
inline int32_t D50ReqBody::reqnum() const {
  // @@protoc_insertion_point(field_get:D50ReqBody.reqNum)
  return _internal_reqnum();
}
inline void D50ReqBody::_internal_set_reqnum(int32_t value) {
  
  _impl_.reqnum_ = value;
}
inline void D50ReqBody::set_reqnum(int32_t value) {
  _internal_set_reqnum(value);
  // @@protoc_insertion_point(field_set:D50ReqBody.reqNum)
}

// repeated int64 uinList = 6;
inline int D50ReqBody::_internal_uinlist_size() const {
  return _impl_.uinlist_.size();
}
inline int D50ReqBody::uinlist_size() const {
  return _internal_uinlist_size();
}
inline void D50ReqBody::clear_uinlist() {
  _impl_.uinlist_.Clear();
}
inline int64_t D50ReqBody::_internal_uinlist(int index) const {
  return _impl_.uinlist_.Get(index);
}
inline int64_t D50ReqBody::uinlist(int index) const {
  // @@protoc_insertion_point(field_get:D50ReqBody.uinList)
  return _internal_uinlist(index);
}
inline void D50ReqBody::set_uinlist(int index, int64_t value) {
  _impl_.uinlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:D50ReqBody.uinList)
}
inline void D50ReqBody::_internal_add_uinlist(int64_t value) {
  _impl_.uinlist_.Add(value);
}
inline void D50ReqBody::add_uinlist(int64_t value) {
  _internal_add_uinlist(value);
  // @@protoc_insertion_point(field_add:D50ReqBody.uinList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
D50ReqBody::_internal_uinlist() const {
  return _impl_.uinlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
D50ReqBody::uinlist() const {
  // @@protoc_insertion_point(field_list:D50ReqBody.uinList)
  return _internal_uinlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
D50ReqBody::_internal_mutable_uinlist() {
  return &_impl_.uinlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
D50ReqBody::mutable_uinlist() {
  // @@protoc_insertion_point(field_mutable_list:D50ReqBody.uinList)
  return _internal_mutable_uinlist();
}

// int32 reqMusicSwitch = 91001;
inline void D50ReqBody::clear_reqmusicswitch() {
  _impl_.reqmusicswitch_ = 0;
}
inline int32_t D50ReqBody::_internal_reqmusicswitch() const {
  return _impl_.reqmusicswitch_;
}
inline int32_t D50ReqBody::reqmusicswitch() const {
  // @@protoc_insertion_point(field_get:D50ReqBody.reqMusicSwitch)
  return _internal_reqmusicswitch();
}
inline void D50ReqBody::_internal_set_reqmusicswitch(int32_t value) {
  
  _impl_.reqmusicswitch_ = value;
}
inline void D50ReqBody::set_reqmusicswitch(int32_t value) {
  _internal_set_reqmusicswitch(value);
  // @@protoc_insertion_point(field_set:D50ReqBody.reqMusicSwitch)
}

// int32 reqMutualmarkAlienation = 101001;
inline void D50ReqBody::clear_reqmutualmarkalienation() {
  _impl_.reqmutualmarkalienation_ = 0;
}
inline int32_t D50ReqBody::_internal_reqmutualmarkalienation() const {
  return _impl_.reqmutualmarkalienation_;
}
inline int32_t D50ReqBody::reqmutualmarkalienation() const {
  // @@protoc_insertion_point(field_get:D50ReqBody.reqMutualmarkAlienation)
  return _internal_reqmutualmarkalienation();
}
inline void D50ReqBody::_internal_set_reqmutualmarkalienation(int32_t value) {
  
  _impl_.reqmutualmarkalienation_ = value;
}
inline void D50ReqBody::set_reqmutualmarkalienation(int32_t value) {
  _internal_set_reqmutualmarkalienation(value);
  // @@protoc_insertion_point(field_set:D50ReqBody.reqMutualmarkAlienation)
}

// int32 reqMutualmarkScore = 141001;
inline void D50ReqBody::clear_reqmutualmarkscore() {
  _impl_.reqmutualmarkscore_ = 0;
}
inline int32_t D50ReqBody::_internal_reqmutualmarkscore() const {
  return _impl_.reqmutualmarkscore_;
}
inline int32_t D50ReqBody::reqmutualmarkscore() const {
  // @@protoc_insertion_point(field_get:D50ReqBody.reqMutualmarkScore)
  return _internal_reqmutualmarkscore();
}
inline void D50ReqBody::_internal_set_reqmutualmarkscore(int32_t value) {
  
  _impl_.reqmutualmarkscore_ = value;
}
inline void D50ReqBody::set_reqmutualmarkscore(int32_t value) {
  _internal_set_reqmutualmarkscore(value);
  // @@protoc_insertion_point(field_set:D50ReqBody.reqMutualmarkScore)
}

// int32 reqKsingSwitch = 151001;
inline void D50ReqBody::clear_reqksingswitch() {
  _impl_.reqksingswitch_ = 0;
}
inline int32_t D50ReqBody::_internal_reqksingswitch() const {
  return _impl_.reqksingswitch_;
}
inline int32_t D50ReqBody::reqksingswitch() const {
  // @@protoc_insertion_point(field_get:D50ReqBody.reqKsingSwitch)
  return _internal_reqksingswitch();
}
inline void D50ReqBody::_internal_set_reqksingswitch(int32_t value) {
  
  _impl_.reqksingswitch_ = value;
}
inline void D50ReqBody::set_reqksingswitch(int32_t value) {
  _internal_set_reqksingswitch(value);
  // @@protoc_insertion_point(field_set:D50ReqBody.reqKsingSwitch)
}

// int32 reqMutualmarkLbsshare = 181001;
inline void D50ReqBody::clear_reqmutualmarklbsshare() {
  _impl_.reqmutualmarklbsshare_ = 0;
}
inline int32_t D50ReqBody::_internal_reqmutualmarklbsshare() const {
  return _impl_.reqmutualmarklbsshare_;
}
inline int32_t D50ReqBody::reqmutualmarklbsshare() const {
  // @@protoc_insertion_point(field_get:D50ReqBody.reqMutualmarkLbsshare)
  return _internal_reqmutualmarklbsshare();
}
inline void D50ReqBody::_internal_set_reqmutualmarklbsshare(int32_t value) {
  
  _impl_.reqmutualmarklbsshare_ = value;
}
inline void D50ReqBody::set_reqmutualmarklbsshare(int32_t value) {
  _internal_set_reqmutualmarklbsshare(value);
  // @@protoc_insertion_point(field_set:D50ReqBody.reqMutualmarkLbsshare)
}

// -------------------------------------------------------------------

// ReqDataHighwayHead

// .DataHighwayHead msgBasehead = 1;
inline bool ReqDataHighwayHead::_internal_has_msgbasehead() const {
  return this != internal_default_instance() && _impl_.msgbasehead_ != nullptr;
}
inline bool ReqDataHighwayHead::has_msgbasehead() const {
  return _internal_has_msgbasehead();
}
inline void ReqDataHighwayHead::clear_msgbasehead() {
  if (GetArenaForAllocation() == nullptr && _impl_.msgbasehead_ != nullptr) {
    delete _impl_.msgbasehead_;
  }
  _impl_.msgbasehead_ = nullptr;
}
inline const ::DataHighwayHead& ReqDataHighwayHead::_internal_msgbasehead() const {
  const ::DataHighwayHead* p = _impl_.msgbasehead_;
  return p != nullptr ? *p : reinterpret_cast<const ::DataHighwayHead&>(
      ::_DataHighwayHead_default_instance_);
}
inline const ::DataHighwayHead& ReqDataHighwayHead::msgbasehead() const {
  // @@protoc_insertion_point(field_get:ReqDataHighwayHead.msgBasehead)
  return _internal_msgbasehead();
}
inline void ReqDataHighwayHead::unsafe_arena_set_allocated_msgbasehead(
    ::DataHighwayHead* msgbasehead) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msgbasehead_);
  }
  _impl_.msgbasehead_ = msgbasehead;
  if (msgbasehead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ReqDataHighwayHead.msgBasehead)
}
inline ::DataHighwayHead* ReqDataHighwayHead::release_msgbasehead() {
  
  ::DataHighwayHead* temp = _impl_.msgbasehead_;
  _impl_.msgbasehead_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DataHighwayHead* ReqDataHighwayHead::unsafe_arena_release_msgbasehead() {
  // @@protoc_insertion_point(field_release:ReqDataHighwayHead.msgBasehead)
  
  ::DataHighwayHead* temp = _impl_.msgbasehead_;
  _impl_.msgbasehead_ = nullptr;
  return temp;
}
inline ::DataHighwayHead* ReqDataHighwayHead::_internal_mutable_msgbasehead() {
  
  if (_impl_.msgbasehead_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataHighwayHead>(GetArenaForAllocation());
    _impl_.msgbasehead_ = p;
  }
  return _impl_.msgbasehead_;
}
inline ::DataHighwayHead* ReqDataHighwayHead::mutable_msgbasehead() {
  ::DataHighwayHead* _msg = _internal_mutable_msgbasehead();
  // @@protoc_insertion_point(field_mutable:ReqDataHighwayHead.msgBasehead)
  return _msg;
}
inline void ReqDataHighwayHead::set_allocated_msgbasehead(::DataHighwayHead* msgbasehead) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.msgbasehead_;
  }
  if (msgbasehead) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msgbasehead);
    if (message_arena != submessage_arena) {
      msgbasehead = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgbasehead, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.msgbasehead_ = msgbasehead;
  // @@protoc_insertion_point(field_set_allocated:ReqDataHighwayHead.msgBasehead)
}

// .SegHead msgSeghead = 2;
inline bool ReqDataHighwayHead::_internal_has_msgseghead() const {
  return this != internal_default_instance() && _impl_.msgseghead_ != nullptr;
}
inline bool ReqDataHighwayHead::has_msgseghead() const {
  return _internal_has_msgseghead();
}
inline void ReqDataHighwayHead::clear_msgseghead() {
  if (GetArenaForAllocation() == nullptr && _impl_.msgseghead_ != nullptr) {
    delete _impl_.msgseghead_;
  }
  _impl_.msgseghead_ = nullptr;
}
inline const ::SegHead& ReqDataHighwayHead::_internal_msgseghead() const {
  const ::SegHead* p = _impl_.msgseghead_;
  return p != nullptr ? *p : reinterpret_cast<const ::SegHead&>(
      ::_SegHead_default_instance_);
}
inline const ::SegHead& ReqDataHighwayHead::msgseghead() const {
  // @@protoc_insertion_point(field_get:ReqDataHighwayHead.msgSeghead)
  return _internal_msgseghead();
}
inline void ReqDataHighwayHead::unsafe_arena_set_allocated_msgseghead(
    ::SegHead* msgseghead) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msgseghead_);
  }
  _impl_.msgseghead_ = msgseghead;
  if (msgseghead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ReqDataHighwayHead.msgSeghead)
}
inline ::SegHead* ReqDataHighwayHead::release_msgseghead() {
  
  ::SegHead* temp = _impl_.msgseghead_;
  _impl_.msgseghead_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SegHead* ReqDataHighwayHead::unsafe_arena_release_msgseghead() {
  // @@protoc_insertion_point(field_release:ReqDataHighwayHead.msgSeghead)
  
  ::SegHead* temp = _impl_.msgseghead_;
  _impl_.msgseghead_ = nullptr;
  return temp;
}
inline ::SegHead* ReqDataHighwayHead::_internal_mutable_msgseghead() {
  
  if (_impl_.msgseghead_ == nullptr) {
    auto* p = CreateMaybeMessage<::SegHead>(GetArenaForAllocation());
    _impl_.msgseghead_ = p;
  }
  return _impl_.msgseghead_;
}
inline ::SegHead* ReqDataHighwayHead::mutable_msgseghead() {
  ::SegHead* _msg = _internal_mutable_msgseghead();
  // @@protoc_insertion_point(field_mutable:ReqDataHighwayHead.msgSeghead)
  return _msg;
}
inline void ReqDataHighwayHead::set_allocated_msgseghead(::SegHead* msgseghead) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.msgseghead_;
  }
  if (msgseghead) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msgseghead);
    if (message_arena != submessage_arena) {
      msgseghead = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgseghead, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.msgseghead_ = msgseghead;
  // @@protoc_insertion_point(field_set_allocated:ReqDataHighwayHead.msgSeghead)
}

// bytes reqExtendinfo = 3;
inline void ReqDataHighwayHead::clear_reqextendinfo() {
  _impl_.reqextendinfo_.ClearToEmpty();
}
inline const std::string& ReqDataHighwayHead::reqextendinfo() const {
  // @@protoc_insertion_point(field_get:ReqDataHighwayHead.reqExtendinfo)
  return _internal_reqextendinfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqDataHighwayHead::set_reqextendinfo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reqextendinfo_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqDataHighwayHead.reqExtendinfo)
}
inline std::string* ReqDataHighwayHead::mutable_reqextendinfo() {
  std::string* _s = _internal_mutable_reqextendinfo();
  // @@protoc_insertion_point(field_mutable:ReqDataHighwayHead.reqExtendinfo)
  return _s;
}
inline const std::string& ReqDataHighwayHead::_internal_reqextendinfo() const {
  return _impl_.reqextendinfo_.Get();
}
inline void ReqDataHighwayHead::_internal_set_reqextendinfo(const std::string& value) {
  
  _impl_.reqextendinfo_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqDataHighwayHead::_internal_mutable_reqextendinfo() {
  
  return _impl_.reqextendinfo_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqDataHighwayHead::release_reqextendinfo() {
  // @@protoc_insertion_point(field_release:ReqDataHighwayHead.reqExtendinfo)
  return _impl_.reqextendinfo_.Release();
}
inline void ReqDataHighwayHead::set_allocated_reqextendinfo(std::string* reqextendinfo) {
  if (reqextendinfo != nullptr) {
    
  } else {
    
  }
  _impl_.reqextendinfo_.SetAllocated(reqextendinfo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reqextendinfo_.IsDefault()) {
    _impl_.reqextendinfo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqDataHighwayHead.reqExtendinfo)
}

// int64 timestamp = 4;
inline void ReqDataHighwayHead::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t ReqDataHighwayHead::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t ReqDataHighwayHead::timestamp() const {
  // @@protoc_insertion_point(field_get:ReqDataHighwayHead.timestamp)
  return _internal_timestamp();
}
inline void ReqDataHighwayHead::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void ReqDataHighwayHead::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ReqDataHighwayHead.timestamp)
}

// -------------------------------------------------------------------

// RspDataHighwayHead

// .DataHighwayHead msgBasehead = 1;
inline bool RspDataHighwayHead::_internal_has_msgbasehead() const {
  return this != internal_default_instance() && _impl_.msgbasehead_ != nullptr;
}
inline bool RspDataHighwayHead::has_msgbasehead() const {
  return _internal_has_msgbasehead();
}
inline void RspDataHighwayHead::clear_msgbasehead() {
  if (GetArenaForAllocation() == nullptr && _impl_.msgbasehead_ != nullptr) {
    delete _impl_.msgbasehead_;
  }
  _impl_.msgbasehead_ = nullptr;
}
inline const ::DataHighwayHead& RspDataHighwayHead::_internal_msgbasehead() const {
  const ::DataHighwayHead* p = _impl_.msgbasehead_;
  return p != nullptr ? *p : reinterpret_cast<const ::DataHighwayHead&>(
      ::_DataHighwayHead_default_instance_);
}
inline const ::DataHighwayHead& RspDataHighwayHead::msgbasehead() const {
  // @@protoc_insertion_point(field_get:RspDataHighwayHead.msgBasehead)
  return _internal_msgbasehead();
}
inline void RspDataHighwayHead::unsafe_arena_set_allocated_msgbasehead(
    ::DataHighwayHead* msgbasehead) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msgbasehead_);
  }
  _impl_.msgbasehead_ = msgbasehead;
  if (msgbasehead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RspDataHighwayHead.msgBasehead)
}
inline ::DataHighwayHead* RspDataHighwayHead::release_msgbasehead() {
  
  ::DataHighwayHead* temp = _impl_.msgbasehead_;
  _impl_.msgbasehead_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DataHighwayHead* RspDataHighwayHead::unsafe_arena_release_msgbasehead() {
  // @@protoc_insertion_point(field_release:RspDataHighwayHead.msgBasehead)
  
  ::DataHighwayHead* temp = _impl_.msgbasehead_;
  _impl_.msgbasehead_ = nullptr;
  return temp;
}
inline ::DataHighwayHead* RspDataHighwayHead::_internal_mutable_msgbasehead() {
  
  if (_impl_.msgbasehead_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataHighwayHead>(GetArenaForAllocation());
    _impl_.msgbasehead_ = p;
  }
  return _impl_.msgbasehead_;
}
inline ::DataHighwayHead* RspDataHighwayHead::mutable_msgbasehead() {
  ::DataHighwayHead* _msg = _internal_mutable_msgbasehead();
  // @@protoc_insertion_point(field_mutable:RspDataHighwayHead.msgBasehead)
  return _msg;
}
inline void RspDataHighwayHead::set_allocated_msgbasehead(::DataHighwayHead* msgbasehead) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.msgbasehead_;
  }
  if (msgbasehead) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msgbasehead);
    if (message_arena != submessage_arena) {
      msgbasehead = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgbasehead, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.msgbasehead_ = msgbasehead;
  // @@protoc_insertion_point(field_set_allocated:RspDataHighwayHead.msgBasehead)
}

// .SegHead msgSeghead = 2;
inline bool RspDataHighwayHead::_internal_has_msgseghead() const {
  return this != internal_default_instance() && _impl_.msgseghead_ != nullptr;
}
inline bool RspDataHighwayHead::has_msgseghead() const {
  return _internal_has_msgseghead();
}
inline void RspDataHighwayHead::clear_msgseghead() {
  if (GetArenaForAllocation() == nullptr && _impl_.msgseghead_ != nullptr) {
    delete _impl_.msgseghead_;
  }
  _impl_.msgseghead_ = nullptr;
}
inline const ::SegHead& RspDataHighwayHead::_internal_msgseghead() const {
  const ::SegHead* p = _impl_.msgseghead_;
  return p != nullptr ? *p : reinterpret_cast<const ::SegHead&>(
      ::_SegHead_default_instance_);
}
inline const ::SegHead& RspDataHighwayHead::msgseghead() const {
  // @@protoc_insertion_point(field_get:RspDataHighwayHead.msgSeghead)
  return _internal_msgseghead();
}
inline void RspDataHighwayHead::unsafe_arena_set_allocated_msgseghead(
    ::SegHead* msgseghead) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msgseghead_);
  }
  _impl_.msgseghead_ = msgseghead;
  if (msgseghead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RspDataHighwayHead.msgSeghead)
}
inline ::SegHead* RspDataHighwayHead::release_msgseghead() {
  
  ::SegHead* temp = _impl_.msgseghead_;
  _impl_.msgseghead_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SegHead* RspDataHighwayHead::unsafe_arena_release_msgseghead() {
  // @@protoc_insertion_point(field_release:RspDataHighwayHead.msgSeghead)
  
  ::SegHead* temp = _impl_.msgseghead_;
  _impl_.msgseghead_ = nullptr;
  return temp;
}
inline ::SegHead* RspDataHighwayHead::_internal_mutable_msgseghead() {
  
  if (_impl_.msgseghead_ == nullptr) {
    auto* p = CreateMaybeMessage<::SegHead>(GetArenaForAllocation());
    _impl_.msgseghead_ = p;
  }
  return _impl_.msgseghead_;
}
inline ::SegHead* RspDataHighwayHead::mutable_msgseghead() {
  ::SegHead* _msg = _internal_mutable_msgseghead();
  // @@protoc_insertion_point(field_mutable:RspDataHighwayHead.msgSeghead)
  return _msg;
}
inline void RspDataHighwayHead::set_allocated_msgseghead(::SegHead* msgseghead) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.msgseghead_;
  }
  if (msgseghead) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msgseghead);
    if (message_arena != submessage_arena) {
      msgseghead = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgseghead, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.msgseghead_ = msgseghead;
  // @@protoc_insertion_point(field_set_allocated:RspDataHighwayHead.msgSeghead)
}

// int32 errorCode = 3;
inline void RspDataHighwayHead::clear_errorcode() {
  _impl_.errorcode_ = 0;
}
inline int32_t RspDataHighwayHead::_internal_errorcode() const {
  return _impl_.errorcode_;
}
inline int32_t RspDataHighwayHead::errorcode() const {
  // @@protoc_insertion_point(field_get:RspDataHighwayHead.errorCode)
  return _internal_errorcode();
}
inline void RspDataHighwayHead::_internal_set_errorcode(int32_t value) {
  
  _impl_.errorcode_ = value;
}
inline void RspDataHighwayHead::set_errorcode(int32_t value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:RspDataHighwayHead.errorCode)
}

// int32 allowRetry = 4;
inline void RspDataHighwayHead::clear_allowretry() {
  _impl_.allowretry_ = 0;
}
inline int32_t RspDataHighwayHead::_internal_allowretry() const {
  return _impl_.allowretry_;
}
inline int32_t RspDataHighwayHead::allowretry() const {
  // @@protoc_insertion_point(field_get:RspDataHighwayHead.allowRetry)
  return _internal_allowretry();
}
inline void RspDataHighwayHead::_internal_set_allowretry(int32_t value) {
  
  _impl_.allowretry_ = value;
}
inline void RspDataHighwayHead::set_allowretry(int32_t value) {
  _internal_set_allowretry(value);
  // @@protoc_insertion_point(field_set:RspDataHighwayHead.allowRetry)
}

// int32 cachecost = 5;
inline void RspDataHighwayHead::clear_cachecost() {
  _impl_.cachecost_ = 0;
}
inline int32_t RspDataHighwayHead::_internal_cachecost() const {
  return _impl_.cachecost_;
}
inline int32_t RspDataHighwayHead::cachecost() const {
  // @@protoc_insertion_point(field_get:RspDataHighwayHead.cachecost)
  return _internal_cachecost();
}
inline void RspDataHighwayHead::_internal_set_cachecost(int32_t value) {
  
  _impl_.cachecost_ = value;
}
inline void RspDataHighwayHead::set_cachecost(int32_t value) {
  _internal_set_cachecost(value);
  // @@protoc_insertion_point(field_set:RspDataHighwayHead.cachecost)
}

// int32 htcost = 6;
inline void RspDataHighwayHead::clear_htcost() {
  _impl_.htcost_ = 0;
}
inline int32_t RspDataHighwayHead::_internal_htcost() const {
  return _impl_.htcost_;
}
inline int32_t RspDataHighwayHead::htcost() const {
  // @@protoc_insertion_point(field_get:RspDataHighwayHead.htcost)
  return _internal_htcost();
}
inline void RspDataHighwayHead::_internal_set_htcost(int32_t value) {
  
  _impl_.htcost_ = value;
}
inline void RspDataHighwayHead::set_htcost(int32_t value) {
  _internal_set_htcost(value);
  // @@protoc_insertion_point(field_set:RspDataHighwayHead.htcost)
}

// bytes rspExtendinfo = 7;
inline void RspDataHighwayHead::clear_rspextendinfo() {
  _impl_.rspextendinfo_.ClearToEmpty();
}
inline const std::string& RspDataHighwayHead::rspextendinfo() const {
  // @@protoc_insertion_point(field_get:RspDataHighwayHead.rspExtendinfo)
  return _internal_rspextendinfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RspDataHighwayHead::set_rspextendinfo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rspextendinfo_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RspDataHighwayHead.rspExtendinfo)
}
inline std::string* RspDataHighwayHead::mutable_rspextendinfo() {
  std::string* _s = _internal_mutable_rspextendinfo();
  // @@protoc_insertion_point(field_mutable:RspDataHighwayHead.rspExtendinfo)
  return _s;
}
inline const std::string& RspDataHighwayHead::_internal_rspextendinfo() const {
  return _impl_.rspextendinfo_.Get();
}
inline void RspDataHighwayHead::_internal_set_rspextendinfo(const std::string& value) {
  
  _impl_.rspextendinfo_.Set(value, GetArenaForAllocation());
}
inline std::string* RspDataHighwayHead::_internal_mutable_rspextendinfo() {
  
  return _impl_.rspextendinfo_.Mutable(GetArenaForAllocation());
}
inline std::string* RspDataHighwayHead::release_rspextendinfo() {
  // @@protoc_insertion_point(field_release:RspDataHighwayHead.rspExtendinfo)
  return _impl_.rspextendinfo_.Release();
}
inline void RspDataHighwayHead::set_allocated_rspextendinfo(std::string* rspextendinfo) {
  if (rspextendinfo != nullptr) {
    
  } else {
    
  }
  _impl_.rspextendinfo_.SetAllocated(rspextendinfo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rspextendinfo_.IsDefault()) {
    _impl_.rspextendinfo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RspDataHighwayHead.rspExtendinfo)
}

// int64 timestamp = 8;
inline void RspDataHighwayHead::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t RspDataHighwayHead::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t RspDataHighwayHead::timestamp() const {
  // @@protoc_insertion_point(field_get:RspDataHighwayHead.timestamp)
  return _internal_timestamp();
}
inline void RspDataHighwayHead::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void RspDataHighwayHead::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:RspDataHighwayHead.timestamp)
}

// int64 range = 9;
inline void RspDataHighwayHead::clear_range() {
  _impl_.range_ = int64_t{0};
}
inline int64_t RspDataHighwayHead::_internal_range() const {
  return _impl_.range_;
}
inline int64_t RspDataHighwayHead::range() const {
  // @@protoc_insertion_point(field_get:RspDataHighwayHead.range)
  return _internal_range();
}
inline void RspDataHighwayHead::_internal_set_range(int64_t value) {
  
  _impl_.range_ = value;
}
inline void RspDataHighwayHead::set_range(int64_t value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:RspDataHighwayHead.range)
}

// int32 isReset = 10;
inline void RspDataHighwayHead::clear_isreset() {
  _impl_.isreset_ = 0;
}
inline int32_t RspDataHighwayHead::_internal_isreset() const {
  return _impl_.isreset_;
}
inline int32_t RspDataHighwayHead::isreset() const {
  // @@protoc_insertion_point(field_get:RspDataHighwayHead.isReset)
  return _internal_isreset();
}
inline void RspDataHighwayHead::_internal_set_isreset(int32_t value) {
  
  _impl_.isreset_ = value;
}
inline void RspDataHighwayHead::set_isreset(int32_t value) {
  _internal_set_isreset(value);
  // @@protoc_insertion_point(field_set:RspDataHighwayHead.isReset)
}

// -------------------------------------------------------------------

// DataHighwayHead

// int32 version = 1;
inline void DataHighwayHead::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t DataHighwayHead::_internal_version() const {
  return _impl_.version_;
}
inline int32_t DataHighwayHead::version() const {
  // @@protoc_insertion_point(field_get:DataHighwayHead.version)
  return _internal_version();
}
inline void DataHighwayHead::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void DataHighwayHead::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:DataHighwayHead.version)
}

// string uin = 2;
inline void DataHighwayHead::clear_uin() {
  _impl_.uin_.ClearToEmpty();
}
inline const std::string& DataHighwayHead::uin() const {
  // @@protoc_insertion_point(field_get:DataHighwayHead.uin)
  return _internal_uin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataHighwayHead::set_uin(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DataHighwayHead.uin)
}
inline std::string* DataHighwayHead::mutable_uin() {
  std::string* _s = _internal_mutable_uin();
  // @@protoc_insertion_point(field_mutable:DataHighwayHead.uin)
  return _s;
}
inline const std::string& DataHighwayHead::_internal_uin() const {
  return _impl_.uin_.Get();
}
inline void DataHighwayHead::_internal_set_uin(const std::string& value) {
  
  _impl_.uin_.Set(value, GetArenaForAllocation());
}
inline std::string* DataHighwayHead::_internal_mutable_uin() {
  
  return _impl_.uin_.Mutable(GetArenaForAllocation());
}
inline std::string* DataHighwayHead::release_uin() {
  // @@protoc_insertion_point(field_release:DataHighwayHead.uin)
  return _impl_.uin_.Release();
}
inline void DataHighwayHead::set_allocated_uin(std::string* uin) {
  if (uin != nullptr) {
    
  } else {
    
  }
  _impl_.uin_.SetAllocated(uin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uin_.IsDefault()) {
    _impl_.uin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DataHighwayHead.uin)
}

// string command = 3;
inline void DataHighwayHead::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& DataHighwayHead::command() const {
  // @@protoc_insertion_point(field_get:DataHighwayHead.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataHighwayHead::set_command(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DataHighwayHead.command)
}
inline std::string* DataHighwayHead::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:DataHighwayHead.command)
  return _s;
}
inline const std::string& DataHighwayHead::_internal_command() const {
  return _impl_.command_.Get();
}
inline void DataHighwayHead::_internal_set_command(const std::string& value) {
  
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* DataHighwayHead::_internal_mutable_command() {
  
  return _impl_.command_.Mutable(GetArenaForAllocation());
}
inline std::string* DataHighwayHead::release_command() {
  // @@protoc_insertion_point(field_release:DataHighwayHead.command)
  return _impl_.command_.Release();
}
inline void DataHighwayHead::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  _impl_.command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DataHighwayHead.command)
}

// int32 seq = 4;
inline void DataHighwayHead::clear_seq() {
  _impl_.seq_ = 0;
}
inline int32_t DataHighwayHead::_internal_seq() const {
  return _impl_.seq_;
}
inline int32_t DataHighwayHead::seq() const {
  // @@protoc_insertion_point(field_get:DataHighwayHead.seq)
  return _internal_seq();
}
inline void DataHighwayHead::_internal_set_seq(int32_t value) {
  
  _impl_.seq_ = value;
}
inline void DataHighwayHead::set_seq(int32_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:DataHighwayHead.seq)
}

// int32 retryTimes = 5;
inline void DataHighwayHead::clear_retrytimes() {
  _impl_.retrytimes_ = 0;
}
inline int32_t DataHighwayHead::_internal_retrytimes() const {
  return _impl_.retrytimes_;
}
inline int32_t DataHighwayHead::retrytimes() const {
  // @@protoc_insertion_point(field_get:DataHighwayHead.retryTimes)
  return _internal_retrytimes();
}
inline void DataHighwayHead::_internal_set_retrytimes(int32_t value) {
  
  _impl_.retrytimes_ = value;
}
inline void DataHighwayHead::set_retrytimes(int32_t value) {
  _internal_set_retrytimes(value);
  // @@protoc_insertion_point(field_set:DataHighwayHead.retryTimes)
}

// int32 appid = 6;
inline void DataHighwayHead::clear_appid() {
  _impl_.appid_ = 0;
}
inline int32_t DataHighwayHead::_internal_appid() const {
  return _impl_.appid_;
}
inline int32_t DataHighwayHead::appid() const {
  // @@protoc_insertion_point(field_get:DataHighwayHead.appid)
  return _internal_appid();
}
inline void DataHighwayHead::_internal_set_appid(int32_t value) {
  
  _impl_.appid_ = value;
}
inline void DataHighwayHead::set_appid(int32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:DataHighwayHead.appid)
}

// int32 dataflag = 7;
inline void DataHighwayHead::clear_dataflag() {
  _impl_.dataflag_ = 0;
}
inline int32_t DataHighwayHead::_internal_dataflag() const {
  return _impl_.dataflag_;
}
inline int32_t DataHighwayHead::dataflag() const {
  // @@protoc_insertion_point(field_get:DataHighwayHead.dataflag)
  return _internal_dataflag();
}
inline void DataHighwayHead::_internal_set_dataflag(int32_t value) {
  
  _impl_.dataflag_ = value;
}
inline void DataHighwayHead::set_dataflag(int32_t value) {
  _internal_set_dataflag(value);
  // @@protoc_insertion_point(field_set:DataHighwayHead.dataflag)
}

// int32 commandId = 8;
inline void DataHighwayHead::clear_commandid() {
  _impl_.commandid_ = 0;
}
inline int32_t DataHighwayHead::_internal_commandid() const {
  return _impl_.commandid_;
}
inline int32_t DataHighwayHead::commandid() const {
  // @@protoc_insertion_point(field_get:DataHighwayHead.commandId)
  return _internal_commandid();
}
inline void DataHighwayHead::_internal_set_commandid(int32_t value) {
  
  _impl_.commandid_ = value;
}
inline void DataHighwayHead::set_commandid(int32_t value) {
  _internal_set_commandid(value);
  // @@protoc_insertion_point(field_set:DataHighwayHead.commandId)
}

// string buildVer = 9;
inline void DataHighwayHead::clear_buildver() {
  _impl_.buildver_.ClearToEmpty();
}
inline const std::string& DataHighwayHead::buildver() const {
  // @@protoc_insertion_point(field_get:DataHighwayHead.buildVer)
  return _internal_buildver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataHighwayHead::set_buildver(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buildver_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DataHighwayHead.buildVer)
}
inline std::string* DataHighwayHead::mutable_buildver() {
  std::string* _s = _internal_mutable_buildver();
  // @@protoc_insertion_point(field_mutable:DataHighwayHead.buildVer)
  return _s;
}
inline const std::string& DataHighwayHead::_internal_buildver() const {
  return _impl_.buildver_.Get();
}
inline void DataHighwayHead::_internal_set_buildver(const std::string& value) {
  
  _impl_.buildver_.Set(value, GetArenaForAllocation());
}
inline std::string* DataHighwayHead::_internal_mutable_buildver() {
  
  return _impl_.buildver_.Mutable(GetArenaForAllocation());
}
inline std::string* DataHighwayHead::release_buildver() {
  // @@protoc_insertion_point(field_release:DataHighwayHead.buildVer)
  return _impl_.buildver_.Release();
}
inline void DataHighwayHead::set_allocated_buildver(std::string* buildver) {
  if (buildver != nullptr) {
    
  } else {
    
  }
  _impl_.buildver_.SetAllocated(buildver, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buildver_.IsDefault()) {
    _impl_.buildver_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DataHighwayHead.buildVer)
}

// int32 localeId = 10;
inline void DataHighwayHead::clear_localeid() {
  _impl_.localeid_ = 0;
}
inline int32_t DataHighwayHead::_internal_localeid() const {
  return _impl_.localeid_;
}
inline int32_t DataHighwayHead::localeid() const {
  // @@protoc_insertion_point(field_get:DataHighwayHead.localeId)
  return _internal_localeid();
}
inline void DataHighwayHead::_internal_set_localeid(int32_t value) {
  
  _impl_.localeid_ = value;
}
inline void DataHighwayHead::set_localeid(int32_t value) {
  _internal_set_localeid(value);
  // @@protoc_insertion_point(field_set:DataHighwayHead.localeId)
}

// -------------------------------------------------------------------

// SegHead

// int32 serviceid = 1;
inline void SegHead::clear_serviceid() {
  _impl_.serviceid_ = 0;
}
inline int32_t SegHead::_internal_serviceid() const {
  return _impl_.serviceid_;
}
inline int32_t SegHead::serviceid() const {
  // @@protoc_insertion_point(field_get:SegHead.serviceid)
  return _internal_serviceid();
}
inline void SegHead::_internal_set_serviceid(int32_t value) {
  
  _impl_.serviceid_ = value;
}
inline void SegHead::set_serviceid(int32_t value) {
  _internal_set_serviceid(value);
  // @@protoc_insertion_point(field_set:SegHead.serviceid)
}

// int64 filesize = 2;
inline void SegHead::clear_filesize() {
  _impl_.filesize_ = int64_t{0};
}
inline int64_t SegHead::_internal_filesize() const {
  return _impl_.filesize_;
}
inline int64_t SegHead::filesize() const {
  // @@protoc_insertion_point(field_get:SegHead.filesize)
  return _internal_filesize();
}
inline void SegHead::_internal_set_filesize(int64_t value) {
  
  _impl_.filesize_ = value;
}
inline void SegHead::set_filesize(int64_t value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:SegHead.filesize)
}

// int64 dataoffset = 3;
inline void SegHead::clear_dataoffset() {
  _impl_.dataoffset_ = int64_t{0};
}
inline int64_t SegHead::_internal_dataoffset() const {
  return _impl_.dataoffset_;
}
inline int64_t SegHead::dataoffset() const {
  // @@protoc_insertion_point(field_get:SegHead.dataoffset)
  return _internal_dataoffset();
}
inline void SegHead::_internal_set_dataoffset(int64_t value) {
  
  _impl_.dataoffset_ = value;
}
inline void SegHead::set_dataoffset(int64_t value) {
  _internal_set_dataoffset(value);
  // @@protoc_insertion_point(field_set:SegHead.dataoffset)
}

// int32 datalength = 4;
inline void SegHead::clear_datalength() {
  _impl_.datalength_ = 0;
}
inline int32_t SegHead::_internal_datalength() const {
  return _impl_.datalength_;
}
inline int32_t SegHead::datalength() const {
  // @@protoc_insertion_point(field_get:SegHead.datalength)
  return _internal_datalength();
}
inline void SegHead::_internal_set_datalength(int32_t value) {
  
  _impl_.datalength_ = value;
}
inline void SegHead::set_datalength(int32_t value) {
  _internal_set_datalength(value);
  // @@protoc_insertion_point(field_set:SegHead.datalength)
}

// int32 rtcode = 5;
inline void SegHead::clear_rtcode() {
  _impl_.rtcode_ = 0;
}
inline int32_t SegHead::_internal_rtcode() const {
  return _impl_.rtcode_;
}
inline int32_t SegHead::rtcode() const {
  // @@protoc_insertion_point(field_get:SegHead.rtcode)
  return _internal_rtcode();
}
inline void SegHead::_internal_set_rtcode(int32_t value) {
  
  _impl_.rtcode_ = value;
}
inline void SegHead::set_rtcode(int32_t value) {
  _internal_set_rtcode(value);
  // @@protoc_insertion_point(field_set:SegHead.rtcode)
}

// bytes serviceticket = 6;
inline void SegHead::clear_serviceticket() {
  _impl_.serviceticket_.ClearToEmpty();
}
inline const std::string& SegHead::serviceticket() const {
  // @@protoc_insertion_point(field_get:SegHead.serviceticket)
  return _internal_serviceticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SegHead::set_serviceticket(ArgT0&& arg0, ArgT... args) {
 
 _impl_.serviceticket_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SegHead.serviceticket)
}
inline std::string* SegHead::mutable_serviceticket() {
  std::string* _s = _internal_mutable_serviceticket();
  // @@protoc_insertion_point(field_mutable:SegHead.serviceticket)
  return _s;
}
inline const std::string& SegHead::_internal_serviceticket() const {
  return _impl_.serviceticket_.Get();
}
inline void SegHead::_internal_set_serviceticket(const std::string& value) {
  
  _impl_.serviceticket_.Set(value, GetArenaForAllocation());
}
inline std::string* SegHead::_internal_mutable_serviceticket() {
  
  return _impl_.serviceticket_.Mutable(GetArenaForAllocation());
}
inline std::string* SegHead::release_serviceticket() {
  // @@protoc_insertion_point(field_release:SegHead.serviceticket)
  return _impl_.serviceticket_.Release();
}
inline void SegHead::set_allocated_serviceticket(std::string* serviceticket) {
  if (serviceticket != nullptr) {
    
  } else {
    
  }
  _impl_.serviceticket_.SetAllocated(serviceticket, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serviceticket_.IsDefault()) {
    _impl_.serviceticket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SegHead.serviceticket)
}

// int32 flag = 7;
inline void SegHead::clear_flag() {
  _impl_.flag_ = 0;
}
inline int32_t SegHead::_internal_flag() const {
  return _impl_.flag_;
}
inline int32_t SegHead::flag() const {
  // @@protoc_insertion_point(field_get:SegHead.flag)
  return _internal_flag();
}
inline void SegHead::_internal_set_flag(int32_t value) {
  
  _impl_.flag_ = value;
}
inline void SegHead::set_flag(int32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:SegHead.flag)
}

// bytes md5 = 8;
inline void SegHead::clear_md5() {
  _impl_.md5_.ClearToEmpty();
}
inline const std::string& SegHead::md5() const {
  // @@protoc_insertion_point(field_get:SegHead.md5)
  return _internal_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SegHead::set_md5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.md5_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SegHead.md5)
}
inline std::string* SegHead::mutable_md5() {
  std::string* _s = _internal_mutable_md5();
  // @@protoc_insertion_point(field_mutable:SegHead.md5)
  return _s;
}
inline const std::string& SegHead::_internal_md5() const {
  return _impl_.md5_.Get();
}
inline void SegHead::_internal_set_md5(const std::string& value) {
  
  _impl_.md5_.Set(value, GetArenaForAllocation());
}
inline std::string* SegHead::_internal_mutable_md5() {
  
  return _impl_.md5_.Mutable(GetArenaForAllocation());
}
inline std::string* SegHead::release_md5() {
  // @@protoc_insertion_point(field_release:SegHead.md5)
  return _impl_.md5_.Release();
}
inline void SegHead::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  _impl_.md5_.SetAllocated(md5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.md5_.IsDefault()) {
    _impl_.md5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SegHead.md5)
}

// bytes fileMd5 = 9;
inline void SegHead::clear_filemd5() {
  _impl_.filemd5_.ClearToEmpty();
}
inline const std::string& SegHead::filemd5() const {
  // @@protoc_insertion_point(field_get:SegHead.fileMd5)
  return _internal_filemd5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SegHead::set_filemd5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filemd5_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SegHead.fileMd5)
}
inline std::string* SegHead::mutable_filemd5() {
  std::string* _s = _internal_mutable_filemd5();
  // @@protoc_insertion_point(field_mutable:SegHead.fileMd5)
  return _s;
}
inline const std::string& SegHead::_internal_filemd5() const {
  return _impl_.filemd5_.Get();
}
inline void SegHead::_internal_set_filemd5(const std::string& value) {
  
  _impl_.filemd5_.Set(value, GetArenaForAllocation());
}
inline std::string* SegHead::_internal_mutable_filemd5() {
  
  return _impl_.filemd5_.Mutable(GetArenaForAllocation());
}
inline std::string* SegHead::release_filemd5() {
  // @@protoc_insertion_point(field_release:SegHead.fileMd5)
  return _impl_.filemd5_.Release();
}
inline void SegHead::set_allocated_filemd5(std::string* filemd5) {
  if (filemd5 != nullptr) {
    
  } else {
    
  }
  _impl_.filemd5_.SetAllocated(filemd5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filemd5_.IsDefault()) {
    _impl_.filemd5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SegHead.fileMd5)
}

// int32 cacheAddr = 10;
inline void SegHead::clear_cacheaddr() {
  _impl_.cacheaddr_ = 0;
}
inline int32_t SegHead::_internal_cacheaddr() const {
  return _impl_.cacheaddr_;
}
inline int32_t SegHead::cacheaddr() const {
  // @@protoc_insertion_point(field_get:SegHead.cacheAddr)
  return _internal_cacheaddr();
}
inline void SegHead::_internal_set_cacheaddr(int32_t value) {
  
  _impl_.cacheaddr_ = value;
}
inline void SegHead::set_cacheaddr(int32_t value) {
  _internal_set_cacheaddr(value);
  // @@protoc_insertion_point(field_set:SegHead.cacheAddr)
}

// int32 queryTimes = 11;
inline void SegHead::clear_querytimes() {
  _impl_.querytimes_ = 0;
}
inline int32_t SegHead::_internal_querytimes() const {
  return _impl_.querytimes_;
}
inline int32_t SegHead::querytimes() const {
  // @@protoc_insertion_point(field_get:SegHead.queryTimes)
  return _internal_querytimes();
}
inline void SegHead::_internal_set_querytimes(int32_t value) {
  
  _impl_.querytimes_ = value;
}
inline void SegHead::set_querytimes(int32_t value) {
  _internal_set_querytimes(value);
  // @@protoc_insertion_point(field_set:SegHead.queryTimes)
}

// int32 updateCacheip = 12;
inline void SegHead::clear_updatecacheip() {
  _impl_.updatecacheip_ = 0;
}
inline int32_t SegHead::_internal_updatecacheip() const {
  return _impl_.updatecacheip_;
}
inline int32_t SegHead::updatecacheip() const {
  // @@protoc_insertion_point(field_get:SegHead.updateCacheip)
  return _internal_updatecacheip();
}
inline void SegHead::_internal_set_updatecacheip(int32_t value) {
  
  _impl_.updatecacheip_ = value;
}
inline void SegHead::set_updatecacheip(int32_t value) {
  _internal_set_updatecacheip(value);
  // @@protoc_insertion_point(field_set:SegHead.updateCacheip)
}

// -------------------------------------------------------------------

// DeleteMessageRequest

// repeated .MessageItem items = 1;
inline int DeleteMessageRequest::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int DeleteMessageRequest::items_size() const {
  return _internal_items_size();
}
inline void DeleteMessageRequest::clear_items() {
  _impl_.items_.Clear();
}
inline ::MessageItem* DeleteMessageRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:DeleteMessageRequest.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MessageItem >*
DeleteMessageRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:DeleteMessageRequest.items)
  return &_impl_.items_;
}
inline const ::MessageItem& DeleteMessageRequest::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::MessageItem& DeleteMessageRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:DeleteMessageRequest.items)
  return _internal_items(index);
}
inline ::MessageItem* DeleteMessageRequest::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::MessageItem* DeleteMessageRequest::add_items() {
  ::MessageItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:DeleteMessageRequest.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MessageItem >&
DeleteMessageRequest::items() const {
  // @@protoc_insertion_point(field_list:DeleteMessageRequest.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// MessageItem

// int64 fromUin = 1;
inline void MessageItem::clear_fromuin() {
  _impl_.fromuin_ = int64_t{0};
}
inline int64_t MessageItem::_internal_fromuin() const {
  return _impl_.fromuin_;
}
inline int64_t MessageItem::fromuin() const {
  // @@protoc_insertion_point(field_get:MessageItem.fromUin)
  return _internal_fromuin();
}
inline void MessageItem::_internal_set_fromuin(int64_t value) {
  
  _impl_.fromuin_ = value;
}
inline void MessageItem::set_fromuin(int64_t value) {
  _internal_set_fromuin(value);
  // @@protoc_insertion_point(field_set:MessageItem.fromUin)
}

// int64 toUin = 2;
inline void MessageItem::clear_touin() {
  _impl_.touin_ = int64_t{0};
}
inline int64_t MessageItem::_internal_touin() const {
  return _impl_.touin_;
}
inline int64_t MessageItem::touin() const {
  // @@protoc_insertion_point(field_get:MessageItem.toUin)
  return _internal_touin();
}
inline void MessageItem::_internal_set_touin(int64_t value) {
  
  _impl_.touin_ = value;
}
inline void MessageItem::set_touin(int64_t value) {
  _internal_set_touin(value);
  // @@protoc_insertion_point(field_set:MessageItem.toUin)
}

// int32 msgType = 3;
inline void MessageItem::clear_msgtype() {
  _impl_.msgtype_ = 0;
}
inline int32_t MessageItem::_internal_msgtype() const {
  return _impl_.msgtype_;
}
inline int32_t MessageItem::msgtype() const {
  // @@protoc_insertion_point(field_get:MessageItem.msgType)
  return _internal_msgtype();
}
inline void MessageItem::_internal_set_msgtype(int32_t value) {
  
  _impl_.msgtype_ = value;
}
inline void MessageItem::set_msgtype(int32_t value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:MessageItem.msgType)
}

// int32 msgSeq = 4;
inline void MessageItem::clear_msgseq() {
  _impl_.msgseq_ = 0;
}
inline int32_t MessageItem::_internal_msgseq() const {
  return _impl_.msgseq_;
}
inline int32_t MessageItem::msgseq() const {
  // @@protoc_insertion_point(field_get:MessageItem.msgSeq)
  return _internal_msgseq();
}
inline void MessageItem::_internal_set_msgseq(int32_t value) {
  
  _impl_.msgseq_ = value;
}
inline void MessageItem::set_msgseq(int32_t value) {
  _internal_set_msgseq(value);
  // @@protoc_insertion_point(field_set:MessageItem.msgSeq)
}

// int64 msgUid = 5;
inline void MessageItem::clear_msguid() {
  _impl_.msguid_ = int64_t{0};
}
inline int64_t MessageItem::_internal_msguid() const {
  return _impl_.msguid_;
}
inline int64_t MessageItem::msguid() const {
  // @@protoc_insertion_point(field_get:MessageItem.msgUid)
  return _internal_msguid();
}
inline void MessageItem::_internal_set_msguid(int64_t value) {
  
  _impl_.msguid_ = value;
}
inline void MessageItem::set_msguid(int64_t value) {
  _internal_set_msguid(value);
  // @@protoc_insertion_point(field_set:MessageItem.msgUid)
}

// bytes sig = 7;
inline void MessageItem::clear_sig() {
  _impl_.sig_.ClearToEmpty();
}
inline const std::string& MessageItem::sig() const {
  // @@protoc_insertion_point(field_get:MessageItem.sig)
  return _internal_sig();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageItem::set_sig(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sig_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageItem.sig)
}
inline std::string* MessageItem::mutable_sig() {
  std::string* _s = _internal_mutable_sig();
  // @@protoc_insertion_point(field_mutable:MessageItem.sig)
  return _s;
}
inline const std::string& MessageItem::_internal_sig() const {
  return _impl_.sig_.Get();
}
inline void MessageItem::_internal_set_sig(const std::string& value) {
  
  _impl_.sig_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageItem::_internal_mutable_sig() {
  
  return _impl_.sig_.Mutable(GetArenaForAllocation());
}
inline std::string* MessageItem::release_sig() {
  // @@protoc_insertion_point(field_release:MessageItem.sig)
  return _impl_.sig_.Release();
}
inline void MessageItem::set_allocated_sig(std::string* sig) {
  if (sig != nullptr) {
    
  } else {
    
  }
  _impl_.sig_.SetAllocated(sig, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sig_.IsDefault()) {
    _impl_.sig_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageItem.sig)
}

// -------------------------------------------------------------------

// SubD4

// int64 uin = 1;
inline void SubD4::clear_uin() {
  _impl_.uin_ = int64_t{0};
}
inline int64_t SubD4::_internal_uin() const {
  return _impl_.uin_;
}
inline int64_t SubD4::uin() const {
  // @@protoc_insertion_point(field_get:SubD4.uin)
  return _internal_uin();
}
inline void SubD4::_internal_set_uin(int64_t value) {
  
  _impl_.uin_ = value;
}
inline void SubD4::set_uin(int64_t value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:SubD4.uin)
}

// -------------------------------------------------------------------

// Sub8A

// repeated .Sub8AMsgInfo msg_info = 1;
inline int Sub8A::_internal_msg_info_size() const {
  return _impl_.msg_info_.size();
}
inline int Sub8A::msg_info_size() const {
  return _internal_msg_info_size();
}
inline void Sub8A::clear_msg_info() {
  _impl_.msg_info_.Clear();
}
inline ::Sub8AMsgInfo* Sub8A::mutable_msg_info(int index) {
  // @@protoc_insertion_point(field_mutable:Sub8A.msg_info)
  return _impl_.msg_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Sub8AMsgInfo >*
Sub8A::mutable_msg_info() {
  // @@protoc_insertion_point(field_mutable_list:Sub8A.msg_info)
  return &_impl_.msg_info_;
}
inline const ::Sub8AMsgInfo& Sub8A::_internal_msg_info(int index) const {
  return _impl_.msg_info_.Get(index);
}
inline const ::Sub8AMsgInfo& Sub8A::msg_info(int index) const {
  // @@protoc_insertion_point(field_get:Sub8A.msg_info)
  return _internal_msg_info(index);
}
inline ::Sub8AMsgInfo* Sub8A::_internal_add_msg_info() {
  return _impl_.msg_info_.Add();
}
inline ::Sub8AMsgInfo* Sub8A::add_msg_info() {
  ::Sub8AMsgInfo* _add = _internal_add_msg_info();
  // @@protoc_insertion_point(field_add:Sub8A.msg_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Sub8AMsgInfo >&
Sub8A::msg_info() const {
  // @@protoc_insertion_point(field_list:Sub8A.msg_info)
  return _impl_.msg_info_;
}

// int32 appId = 2;
inline void Sub8A::clear_appid() {
  _impl_.appid_ = 0;
}
inline int32_t Sub8A::_internal_appid() const {
  return _impl_.appid_;
}
inline int32_t Sub8A::appid() const {
  // @@protoc_insertion_point(field_get:Sub8A.appId)
  return _internal_appid();
}
inline void Sub8A::_internal_set_appid(int32_t value) {
  
  _impl_.appid_ = value;
}
inline void Sub8A::set_appid(int32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:Sub8A.appId)
}

// int32 instId = 3;
inline void Sub8A::clear_instid() {
  _impl_.instid_ = 0;
}
inline int32_t Sub8A::_internal_instid() const {
  return _impl_.instid_;
}
inline int32_t Sub8A::instid() const {
  // @@protoc_insertion_point(field_get:Sub8A.instId)
  return _internal_instid();
}
inline void Sub8A::_internal_set_instid(int32_t value) {
  
  _impl_.instid_ = value;
}
inline void Sub8A::set_instid(int32_t value) {
  _internal_set_instid(value);
  // @@protoc_insertion_point(field_set:Sub8A.instId)
}

// int32 longMessageFlag = 4;
inline void Sub8A::clear_longmessageflag() {
  _impl_.longmessageflag_ = 0;
}
inline int32_t Sub8A::_internal_longmessageflag() const {
  return _impl_.longmessageflag_;
}
inline int32_t Sub8A::longmessageflag() const {
  // @@protoc_insertion_point(field_get:Sub8A.longMessageFlag)
  return _internal_longmessageflag();
}
inline void Sub8A::_internal_set_longmessageflag(int32_t value) {
  
  _impl_.longmessageflag_ = value;
}
inline void Sub8A::set_longmessageflag(int32_t value) {
  _internal_set_longmessageflag(value);
  // @@protoc_insertion_point(field_set:Sub8A.longMessageFlag)
}

// bytes reserved = 5;
inline void Sub8A::clear_reserved() {
  _impl_.reserved_.ClearToEmpty();
}
inline const std::string& Sub8A::reserved() const {
  // @@protoc_insertion_point(field_get:Sub8A.reserved)
  return _internal_reserved();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sub8A::set_reserved(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reserved_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Sub8A.reserved)
}
inline std::string* Sub8A::mutable_reserved() {
  std::string* _s = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:Sub8A.reserved)
  return _s;
}
inline const std::string& Sub8A::_internal_reserved() const {
  return _impl_.reserved_.Get();
}
inline void Sub8A::_internal_set_reserved(const std::string& value) {
  
  _impl_.reserved_.Set(value, GetArenaForAllocation());
}
inline std::string* Sub8A::_internal_mutable_reserved() {
  
  return _impl_.reserved_.Mutable(GetArenaForAllocation());
}
inline std::string* Sub8A::release_reserved() {
  // @@protoc_insertion_point(field_release:Sub8A.reserved)
  return _impl_.reserved_.Release();
}
inline void Sub8A::set_allocated_reserved(std::string* reserved) {
  if (reserved != nullptr) {
    
  } else {
    
  }
  _impl_.reserved_.SetAllocated(reserved, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserved_.IsDefault()) {
    _impl_.reserved_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Sub8A.reserved)
}

// -------------------------------------------------------------------

// Sub8AMsgInfo

// int64 fromUin = 1;
inline void Sub8AMsgInfo::clear_fromuin() {
  _impl_.fromuin_ = int64_t{0};
}
inline int64_t Sub8AMsgInfo::_internal_fromuin() const {
  return _impl_.fromuin_;
}
inline int64_t Sub8AMsgInfo::fromuin() const {
  // @@protoc_insertion_point(field_get:Sub8AMsgInfo.fromUin)
  return _internal_fromuin();
}
inline void Sub8AMsgInfo::_internal_set_fromuin(int64_t value) {
  
  _impl_.fromuin_ = value;
}
inline void Sub8AMsgInfo::set_fromuin(int64_t value) {
  _internal_set_fromuin(value);
  // @@protoc_insertion_point(field_set:Sub8AMsgInfo.fromUin)
}

// int64 toUin = 2;
inline void Sub8AMsgInfo::clear_touin() {
  _impl_.touin_ = int64_t{0};
}
inline int64_t Sub8AMsgInfo::_internal_touin() const {
  return _impl_.touin_;
}
inline int64_t Sub8AMsgInfo::touin() const {
  // @@protoc_insertion_point(field_get:Sub8AMsgInfo.toUin)
  return _internal_touin();
}
inline void Sub8AMsgInfo::_internal_set_touin(int64_t value) {
  
  _impl_.touin_ = value;
}
inline void Sub8AMsgInfo::set_touin(int64_t value) {
  _internal_set_touin(value);
  // @@protoc_insertion_point(field_set:Sub8AMsgInfo.toUin)
}

// int32 msgSeq = 3;
inline void Sub8AMsgInfo::clear_msgseq() {
  _impl_.msgseq_ = 0;
}
inline int32_t Sub8AMsgInfo::_internal_msgseq() const {
  return _impl_.msgseq_;
}
inline int32_t Sub8AMsgInfo::msgseq() const {
  // @@protoc_insertion_point(field_get:Sub8AMsgInfo.msgSeq)
  return _internal_msgseq();
}
inline void Sub8AMsgInfo::_internal_set_msgseq(int32_t value) {
  
  _impl_.msgseq_ = value;
}
inline void Sub8AMsgInfo::set_msgseq(int32_t value) {
  _internal_set_msgseq(value);
  // @@protoc_insertion_point(field_set:Sub8AMsgInfo.msgSeq)
}

// int64 msgUid = 4;
inline void Sub8AMsgInfo::clear_msguid() {
  _impl_.msguid_ = int64_t{0};
}
inline int64_t Sub8AMsgInfo::_internal_msguid() const {
  return _impl_.msguid_;
}
inline int64_t Sub8AMsgInfo::msguid() const {
  // @@protoc_insertion_point(field_get:Sub8AMsgInfo.msgUid)
  return _internal_msguid();
}
inline void Sub8AMsgInfo::_internal_set_msguid(int64_t value) {
  
  _impl_.msguid_ = value;
}
inline void Sub8AMsgInfo::set_msguid(int64_t value) {
  _internal_set_msguid(value);
  // @@protoc_insertion_point(field_set:Sub8AMsgInfo.msgUid)
}

// int64 msgTime = 5;
inline void Sub8AMsgInfo::clear_msgtime() {
  _impl_.msgtime_ = int64_t{0};
}
inline int64_t Sub8AMsgInfo::_internal_msgtime() const {
  return _impl_.msgtime_;
}
inline int64_t Sub8AMsgInfo::msgtime() const {
  // @@protoc_insertion_point(field_get:Sub8AMsgInfo.msgTime)
  return _internal_msgtime();
}
inline void Sub8AMsgInfo::_internal_set_msgtime(int64_t value) {
  
  _impl_.msgtime_ = value;
}
inline void Sub8AMsgInfo::set_msgtime(int64_t value) {
  _internal_set_msgtime(value);
  // @@protoc_insertion_point(field_set:Sub8AMsgInfo.msgTime)
}

// int32 msgRandom = 6;
inline void Sub8AMsgInfo::clear_msgrandom() {
  _impl_.msgrandom_ = 0;
}
inline int32_t Sub8AMsgInfo::_internal_msgrandom() const {
  return _impl_.msgrandom_;
}
inline int32_t Sub8AMsgInfo::msgrandom() const {
  // @@protoc_insertion_point(field_get:Sub8AMsgInfo.msgRandom)
  return _internal_msgrandom();
}
inline void Sub8AMsgInfo::_internal_set_msgrandom(int32_t value) {
  
  _impl_.msgrandom_ = value;
}
inline void Sub8AMsgInfo::set_msgrandom(int32_t value) {
  _internal_set_msgrandom(value);
  // @@protoc_insertion_point(field_set:Sub8AMsgInfo.msgRandom)
}

// int32 pkgNum = 7;
inline void Sub8AMsgInfo::clear_pkgnum() {
  _impl_.pkgnum_ = 0;
}
inline int32_t Sub8AMsgInfo::_internal_pkgnum() const {
  return _impl_.pkgnum_;
}
inline int32_t Sub8AMsgInfo::pkgnum() const {
  // @@protoc_insertion_point(field_get:Sub8AMsgInfo.pkgNum)
  return _internal_pkgnum();
}
inline void Sub8AMsgInfo::_internal_set_pkgnum(int32_t value) {
  
  _impl_.pkgnum_ = value;
}
inline void Sub8AMsgInfo::set_pkgnum(int32_t value) {
  _internal_set_pkgnum(value);
  // @@protoc_insertion_point(field_set:Sub8AMsgInfo.pkgNum)
}

// int32 pkgIndex = 8;
inline void Sub8AMsgInfo::clear_pkgindex() {
  _impl_.pkgindex_ = 0;
}
inline int32_t Sub8AMsgInfo::_internal_pkgindex() const {
  return _impl_.pkgindex_;
}
inline int32_t Sub8AMsgInfo::pkgindex() const {
  // @@protoc_insertion_point(field_get:Sub8AMsgInfo.pkgIndex)
  return _internal_pkgindex();
}
inline void Sub8AMsgInfo::_internal_set_pkgindex(int32_t value) {
  
  _impl_.pkgindex_ = value;
}
inline void Sub8AMsgInfo::set_pkgindex(int32_t value) {
  _internal_set_pkgindex(value);
  // @@protoc_insertion_point(field_set:Sub8AMsgInfo.pkgIndex)
}

// int32 devSeq = 9;
inline void Sub8AMsgInfo::clear_devseq() {
  _impl_.devseq_ = 0;
}
inline int32_t Sub8AMsgInfo::_internal_devseq() const {
  return _impl_.devseq_;
}
inline int32_t Sub8AMsgInfo::devseq() const {
  // @@protoc_insertion_point(field_get:Sub8AMsgInfo.devSeq)
  return _internal_devseq();
}
inline void Sub8AMsgInfo::_internal_set_devseq(int32_t value) {
  
  _impl_.devseq_ = value;
}
inline void Sub8AMsgInfo::set_devseq(int32_t value) {
  _internal_set_devseq(value);
  // @@protoc_insertion_point(field_set:Sub8AMsgInfo.devSeq)
}

// -------------------------------------------------------------------

// SubB3

// int32 type = 1;
inline void SubB3::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t SubB3::_internal_type() const {
  return _impl_.type_;
}
inline int32_t SubB3::type() const {
  // @@protoc_insertion_point(field_get:SubB3.type)
  return _internal_type();
}
inline void SubB3::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void SubB3::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SubB3.type)
}

// .SubB3AddFrdNotify msgAddFrdNotify = 2;
inline bool SubB3::_internal_has_msgaddfrdnotify() const {
  return this != internal_default_instance() && _impl_.msgaddfrdnotify_ != nullptr;
}
inline bool SubB3::has_msgaddfrdnotify() const {
  return _internal_has_msgaddfrdnotify();
}
inline void SubB3::clear_msgaddfrdnotify() {
  if (GetArenaForAllocation() == nullptr && _impl_.msgaddfrdnotify_ != nullptr) {
    delete _impl_.msgaddfrdnotify_;
  }
  _impl_.msgaddfrdnotify_ = nullptr;
}
inline const ::SubB3AddFrdNotify& SubB3::_internal_msgaddfrdnotify() const {
  const ::SubB3AddFrdNotify* p = _impl_.msgaddfrdnotify_;
  return p != nullptr ? *p : reinterpret_cast<const ::SubB3AddFrdNotify&>(
      ::_SubB3AddFrdNotify_default_instance_);
}
inline const ::SubB3AddFrdNotify& SubB3::msgaddfrdnotify() const {
  // @@protoc_insertion_point(field_get:SubB3.msgAddFrdNotify)
  return _internal_msgaddfrdnotify();
}
inline void SubB3::unsafe_arena_set_allocated_msgaddfrdnotify(
    ::SubB3AddFrdNotify* msgaddfrdnotify) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msgaddfrdnotify_);
  }
  _impl_.msgaddfrdnotify_ = msgaddfrdnotify;
  if (msgaddfrdnotify) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SubB3.msgAddFrdNotify)
}
inline ::SubB3AddFrdNotify* SubB3::release_msgaddfrdnotify() {
  
  ::SubB3AddFrdNotify* temp = _impl_.msgaddfrdnotify_;
  _impl_.msgaddfrdnotify_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SubB3AddFrdNotify* SubB3::unsafe_arena_release_msgaddfrdnotify() {
  // @@protoc_insertion_point(field_release:SubB3.msgAddFrdNotify)
  
  ::SubB3AddFrdNotify* temp = _impl_.msgaddfrdnotify_;
  _impl_.msgaddfrdnotify_ = nullptr;
  return temp;
}
inline ::SubB3AddFrdNotify* SubB3::_internal_mutable_msgaddfrdnotify() {
  
  if (_impl_.msgaddfrdnotify_ == nullptr) {
    auto* p = CreateMaybeMessage<::SubB3AddFrdNotify>(GetArenaForAllocation());
    _impl_.msgaddfrdnotify_ = p;
  }
  return _impl_.msgaddfrdnotify_;
}
inline ::SubB3AddFrdNotify* SubB3::mutable_msgaddfrdnotify() {
  ::SubB3AddFrdNotify* _msg = _internal_mutable_msgaddfrdnotify();
  // @@protoc_insertion_point(field_mutable:SubB3.msgAddFrdNotify)
  return _msg;
}
inline void SubB3::set_allocated_msgaddfrdnotify(::SubB3AddFrdNotify* msgaddfrdnotify) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.msgaddfrdnotify_;
  }
  if (msgaddfrdnotify) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msgaddfrdnotify);
    if (message_arena != submessage_arena) {
      msgaddfrdnotify = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgaddfrdnotify, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.msgaddfrdnotify_ = msgaddfrdnotify;
  // @@protoc_insertion_point(field_set_allocated:SubB3.msgAddFrdNotify)
}

// -------------------------------------------------------------------

// SubB3AddFrdNotify

// int64 uin = 1;
inline void SubB3AddFrdNotify::clear_uin() {
  _impl_.uin_ = int64_t{0};
}
inline int64_t SubB3AddFrdNotify::_internal_uin() const {
  return _impl_.uin_;
}
inline int64_t SubB3AddFrdNotify::uin() const {
  // @@protoc_insertion_point(field_get:SubB3AddFrdNotify.uin)
  return _internal_uin();
}
inline void SubB3AddFrdNotify::_internal_set_uin(int64_t value) {
  
  _impl_.uin_ = value;
}
inline void SubB3AddFrdNotify::set_uin(int64_t value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:SubB3AddFrdNotify.uin)
}

// string nick = 5;
inline void SubB3AddFrdNotify::clear_nick() {
  _impl_.nick_.ClearToEmpty();
}
inline const std::string& SubB3AddFrdNotify::nick() const {
  // @@protoc_insertion_point(field_get:SubB3AddFrdNotify.nick)
  return _internal_nick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubB3AddFrdNotify::set_nick(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nick_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SubB3AddFrdNotify.nick)
}
inline std::string* SubB3AddFrdNotify::mutable_nick() {
  std::string* _s = _internal_mutable_nick();
  // @@protoc_insertion_point(field_mutable:SubB3AddFrdNotify.nick)
  return _s;
}
inline const std::string& SubB3AddFrdNotify::_internal_nick() const {
  return _impl_.nick_.Get();
}
inline void SubB3AddFrdNotify::_internal_set_nick(const std::string& value) {
  
  _impl_.nick_.Set(value, GetArenaForAllocation());
}
inline std::string* SubB3AddFrdNotify::_internal_mutable_nick() {
  
  return _impl_.nick_.Mutable(GetArenaForAllocation());
}
inline std::string* SubB3AddFrdNotify::release_nick() {
  // @@protoc_insertion_point(field_release:SubB3AddFrdNotify.nick)
  return _impl_.nick_.Release();
}
inline void SubB3AddFrdNotify::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  _impl_.nick_.SetAllocated(nick, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nick_.IsDefault()) {
    _impl_.nick_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SubB3AddFrdNotify.nick)
}

// -------------------------------------------------------------------

// Sub44

// .Sub44FriendSyncMsg friendSyncMsg = 1;
inline bool Sub44::_internal_has_friendsyncmsg() const {
  return this != internal_default_instance() && _impl_.friendsyncmsg_ != nullptr;
}
inline bool Sub44::has_friendsyncmsg() const {
  return _internal_has_friendsyncmsg();
}
inline void Sub44::clear_friendsyncmsg() {
  if (GetArenaForAllocation() == nullptr && _impl_.friendsyncmsg_ != nullptr) {
    delete _impl_.friendsyncmsg_;
  }
  _impl_.friendsyncmsg_ = nullptr;
}
inline const ::Sub44FriendSyncMsg& Sub44::_internal_friendsyncmsg() const {
  const ::Sub44FriendSyncMsg* p = _impl_.friendsyncmsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::Sub44FriendSyncMsg&>(
      ::_Sub44FriendSyncMsg_default_instance_);
}
inline const ::Sub44FriendSyncMsg& Sub44::friendsyncmsg() const {
  // @@protoc_insertion_point(field_get:Sub44.friendSyncMsg)
  return _internal_friendsyncmsg();
}
inline void Sub44::unsafe_arena_set_allocated_friendsyncmsg(
    ::Sub44FriendSyncMsg* friendsyncmsg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.friendsyncmsg_);
  }
  _impl_.friendsyncmsg_ = friendsyncmsg;
  if (friendsyncmsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Sub44.friendSyncMsg)
}
inline ::Sub44FriendSyncMsg* Sub44::release_friendsyncmsg() {
  
  ::Sub44FriendSyncMsg* temp = _impl_.friendsyncmsg_;
  _impl_.friendsyncmsg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Sub44FriendSyncMsg* Sub44::unsafe_arena_release_friendsyncmsg() {
  // @@protoc_insertion_point(field_release:Sub44.friendSyncMsg)
  
  ::Sub44FriendSyncMsg* temp = _impl_.friendsyncmsg_;
  _impl_.friendsyncmsg_ = nullptr;
  return temp;
}
inline ::Sub44FriendSyncMsg* Sub44::_internal_mutable_friendsyncmsg() {
  
  if (_impl_.friendsyncmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::Sub44FriendSyncMsg>(GetArenaForAllocation());
    _impl_.friendsyncmsg_ = p;
  }
  return _impl_.friendsyncmsg_;
}
inline ::Sub44FriendSyncMsg* Sub44::mutable_friendsyncmsg() {
  ::Sub44FriendSyncMsg* _msg = _internal_mutable_friendsyncmsg();
  // @@protoc_insertion_point(field_mutable:Sub44.friendSyncMsg)
  return _msg;
}
inline void Sub44::set_allocated_friendsyncmsg(::Sub44FriendSyncMsg* friendsyncmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.friendsyncmsg_;
  }
  if (friendsyncmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friendsyncmsg);
    if (message_arena != submessage_arena) {
      friendsyncmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendsyncmsg, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.friendsyncmsg_ = friendsyncmsg;
  // @@protoc_insertion_point(field_set_allocated:Sub44.friendSyncMsg)
}

// .Sub44GroupSyncMsg groupSyncMsg = 2;
inline bool Sub44::_internal_has_groupsyncmsg() const {
  return this != internal_default_instance() && _impl_.groupsyncmsg_ != nullptr;
}
inline bool Sub44::has_groupsyncmsg() const {
  return _internal_has_groupsyncmsg();
}
inline void Sub44::clear_groupsyncmsg() {
  if (GetArenaForAllocation() == nullptr && _impl_.groupsyncmsg_ != nullptr) {
    delete _impl_.groupsyncmsg_;
  }
  _impl_.groupsyncmsg_ = nullptr;
}
inline const ::Sub44GroupSyncMsg& Sub44::_internal_groupsyncmsg() const {
  const ::Sub44GroupSyncMsg* p = _impl_.groupsyncmsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::Sub44GroupSyncMsg&>(
      ::_Sub44GroupSyncMsg_default_instance_);
}
inline const ::Sub44GroupSyncMsg& Sub44::groupsyncmsg() const {
  // @@protoc_insertion_point(field_get:Sub44.groupSyncMsg)
  return _internal_groupsyncmsg();
}
inline void Sub44::unsafe_arena_set_allocated_groupsyncmsg(
    ::Sub44GroupSyncMsg* groupsyncmsg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.groupsyncmsg_);
  }
  _impl_.groupsyncmsg_ = groupsyncmsg;
  if (groupsyncmsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Sub44.groupSyncMsg)
}
inline ::Sub44GroupSyncMsg* Sub44::release_groupsyncmsg() {
  
  ::Sub44GroupSyncMsg* temp = _impl_.groupsyncmsg_;
  _impl_.groupsyncmsg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Sub44GroupSyncMsg* Sub44::unsafe_arena_release_groupsyncmsg() {
  // @@protoc_insertion_point(field_release:Sub44.groupSyncMsg)
  
  ::Sub44GroupSyncMsg* temp = _impl_.groupsyncmsg_;
  _impl_.groupsyncmsg_ = nullptr;
  return temp;
}
inline ::Sub44GroupSyncMsg* Sub44::_internal_mutable_groupsyncmsg() {
  
  if (_impl_.groupsyncmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::Sub44GroupSyncMsg>(GetArenaForAllocation());
    _impl_.groupsyncmsg_ = p;
  }
  return _impl_.groupsyncmsg_;
}
inline ::Sub44GroupSyncMsg* Sub44::mutable_groupsyncmsg() {
  ::Sub44GroupSyncMsg* _msg = _internal_mutable_groupsyncmsg();
  // @@protoc_insertion_point(field_mutable:Sub44.groupSyncMsg)
  return _msg;
}
inline void Sub44::set_allocated_groupsyncmsg(::Sub44GroupSyncMsg* groupsyncmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.groupsyncmsg_;
  }
  if (groupsyncmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(groupsyncmsg);
    if (message_arena != submessage_arena) {
      groupsyncmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groupsyncmsg, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.groupsyncmsg_ = groupsyncmsg;
  // @@protoc_insertion_point(field_set_allocated:Sub44.groupSyncMsg)
}

// -------------------------------------------------------------------

// Sub44FriendSyncMsg

// int64 uin = 1;
inline void Sub44FriendSyncMsg::clear_uin() {
  _impl_.uin_ = int64_t{0};
}
inline int64_t Sub44FriendSyncMsg::_internal_uin() const {
  return _impl_.uin_;
}
inline int64_t Sub44FriendSyncMsg::uin() const {
  // @@protoc_insertion_point(field_get:Sub44FriendSyncMsg.uin)
  return _internal_uin();
}
inline void Sub44FriendSyncMsg::_internal_set_uin(int64_t value) {
  
  _impl_.uin_ = value;
}
inline void Sub44FriendSyncMsg::set_uin(int64_t value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:Sub44FriendSyncMsg.uin)
}

// int64 fUin = 2;
inline void Sub44FriendSyncMsg::clear_fuin() {
  _impl_.fuin_ = int64_t{0};
}
inline int64_t Sub44FriendSyncMsg::_internal_fuin() const {
  return _impl_.fuin_;
}
inline int64_t Sub44FriendSyncMsg::fuin() const {
  // @@protoc_insertion_point(field_get:Sub44FriendSyncMsg.fUin)
  return _internal_fuin();
}
inline void Sub44FriendSyncMsg::_internal_set_fuin(int64_t value) {
  
  _impl_.fuin_ = value;
}
inline void Sub44FriendSyncMsg::set_fuin(int64_t value) {
  _internal_set_fuin(value);
  // @@protoc_insertion_point(field_set:Sub44FriendSyncMsg.fUin)
}

// int32 processType = 3;
inline void Sub44FriendSyncMsg::clear_processtype() {
  _impl_.processtype_ = 0;
}
inline int32_t Sub44FriendSyncMsg::_internal_processtype() const {
  return _impl_.processtype_;
}
inline int32_t Sub44FriendSyncMsg::processtype() const {
  // @@protoc_insertion_point(field_get:Sub44FriendSyncMsg.processType)
  return _internal_processtype();
}
inline void Sub44FriendSyncMsg::_internal_set_processtype(int32_t value) {
  
  _impl_.processtype_ = value;
}
inline void Sub44FriendSyncMsg::set_processtype(int32_t value) {
  _internal_set_processtype(value);
  // @@protoc_insertion_point(field_set:Sub44FriendSyncMsg.processType)
}

// int32 time = 4;
inline void Sub44FriendSyncMsg::clear_time() {
  _impl_.time_ = 0;
}
inline int32_t Sub44FriendSyncMsg::_internal_time() const {
  return _impl_.time_;
}
inline int32_t Sub44FriendSyncMsg::time() const {
  // @@protoc_insertion_point(field_get:Sub44FriendSyncMsg.time)
  return _internal_time();
}
inline void Sub44FriendSyncMsg::_internal_set_time(int32_t value) {
  
  _impl_.time_ = value;
}
inline void Sub44FriendSyncMsg::set_time(int32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Sub44FriendSyncMsg.time)
}

// int32 processFlag = 5;
inline void Sub44FriendSyncMsg::clear_processflag() {
  _impl_.processflag_ = 0;
}
inline int32_t Sub44FriendSyncMsg::_internal_processflag() const {
  return _impl_.processflag_;
}
inline int32_t Sub44FriendSyncMsg::processflag() const {
  // @@protoc_insertion_point(field_get:Sub44FriendSyncMsg.processFlag)
  return _internal_processflag();
}
inline void Sub44FriendSyncMsg::_internal_set_processflag(int32_t value) {
  
  _impl_.processflag_ = value;
}
inline void Sub44FriendSyncMsg::set_processflag(int32_t value) {
  _internal_set_processflag(value);
  // @@protoc_insertion_point(field_set:Sub44FriendSyncMsg.processFlag)
}

// int32 sourceId = 6;
inline void Sub44FriendSyncMsg::clear_sourceid() {
  _impl_.sourceid_ = 0;
}
inline int32_t Sub44FriendSyncMsg::_internal_sourceid() const {
  return _impl_.sourceid_;
}
inline int32_t Sub44FriendSyncMsg::sourceid() const {
  // @@protoc_insertion_point(field_get:Sub44FriendSyncMsg.sourceId)
  return _internal_sourceid();
}
inline void Sub44FriendSyncMsg::_internal_set_sourceid(int32_t value) {
  
  _impl_.sourceid_ = value;
}
inline void Sub44FriendSyncMsg::set_sourceid(int32_t value) {
  _internal_set_sourceid(value);
  // @@protoc_insertion_point(field_set:Sub44FriendSyncMsg.sourceId)
}

// int32 sourceSubId = 7;
inline void Sub44FriendSyncMsg::clear_sourcesubid() {
  _impl_.sourcesubid_ = 0;
}
inline int32_t Sub44FriendSyncMsg::_internal_sourcesubid() const {
  return _impl_.sourcesubid_;
}
inline int32_t Sub44FriendSyncMsg::sourcesubid() const {
  // @@protoc_insertion_point(field_get:Sub44FriendSyncMsg.sourceSubId)
  return _internal_sourcesubid();
}
inline void Sub44FriendSyncMsg::_internal_set_sourcesubid(int32_t value) {
  
  _impl_.sourcesubid_ = value;
}
inline void Sub44FriendSyncMsg::set_sourcesubid(int32_t value) {
  _internal_set_sourcesubid(value);
  // @@protoc_insertion_point(field_set:Sub44FriendSyncMsg.sourceSubId)
}

// repeated string strWording = 8;
inline int Sub44FriendSyncMsg::_internal_strwording_size() const {
  return _impl_.strwording_.size();
}
inline int Sub44FriendSyncMsg::strwording_size() const {
  return _internal_strwording_size();
}
inline void Sub44FriendSyncMsg::clear_strwording() {
  _impl_.strwording_.Clear();
}
inline std::string* Sub44FriendSyncMsg::add_strwording() {
  std::string* _s = _internal_add_strwording();
  // @@protoc_insertion_point(field_add_mutable:Sub44FriendSyncMsg.strWording)
  return _s;
}
inline const std::string& Sub44FriendSyncMsg::_internal_strwording(int index) const {
  return _impl_.strwording_.Get(index);
}
inline const std::string& Sub44FriendSyncMsg::strwording(int index) const {
  // @@protoc_insertion_point(field_get:Sub44FriendSyncMsg.strWording)
  return _internal_strwording(index);
}
inline std::string* Sub44FriendSyncMsg::mutable_strwording(int index) {
  // @@protoc_insertion_point(field_mutable:Sub44FriendSyncMsg.strWording)
  return _impl_.strwording_.Mutable(index);
}
inline void Sub44FriendSyncMsg::set_strwording(int index, const std::string& value) {
  _impl_.strwording_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Sub44FriendSyncMsg.strWording)
}
inline void Sub44FriendSyncMsg::set_strwording(int index, std::string&& value) {
  _impl_.strwording_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Sub44FriendSyncMsg.strWording)
}
inline void Sub44FriendSyncMsg::set_strwording(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.strwording_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Sub44FriendSyncMsg.strWording)
}
inline void Sub44FriendSyncMsg::set_strwording(int index, const char* value, size_t size) {
  _impl_.strwording_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Sub44FriendSyncMsg.strWording)
}
inline std::string* Sub44FriendSyncMsg::_internal_add_strwording() {
  return _impl_.strwording_.Add();
}
inline void Sub44FriendSyncMsg::add_strwording(const std::string& value) {
  _impl_.strwording_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Sub44FriendSyncMsg.strWording)
}
inline void Sub44FriendSyncMsg::add_strwording(std::string&& value) {
  _impl_.strwording_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Sub44FriendSyncMsg.strWording)
}
inline void Sub44FriendSyncMsg::add_strwording(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.strwording_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Sub44FriendSyncMsg.strWording)
}
inline void Sub44FriendSyncMsg::add_strwording(const char* value, size_t size) {
  _impl_.strwording_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Sub44FriendSyncMsg.strWording)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Sub44FriendSyncMsg::strwording() const {
  // @@protoc_insertion_point(field_list:Sub44FriendSyncMsg.strWording)
  return _impl_.strwording_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Sub44FriendSyncMsg::mutable_strwording() {
  // @@protoc_insertion_point(field_mutable_list:Sub44FriendSyncMsg.strWording)
  return &_impl_.strwording_;
}

// -------------------------------------------------------------------

// Sub44GroupSyncMsg

// int32 msgType = 1;
inline void Sub44GroupSyncMsg::clear_msgtype() {
  _impl_.msgtype_ = 0;
}
inline int32_t Sub44GroupSyncMsg::_internal_msgtype() const {
  return _impl_.msgtype_;
}
inline int32_t Sub44GroupSyncMsg::msgtype() const {
  // @@protoc_insertion_point(field_get:Sub44GroupSyncMsg.msgType)
  return _internal_msgtype();
}
inline void Sub44GroupSyncMsg::_internal_set_msgtype(int32_t value) {
  
  _impl_.msgtype_ = value;
}
inline void Sub44GroupSyncMsg::set_msgtype(int32_t value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:Sub44GroupSyncMsg.msgType)
}

// int64 msgSeq = 2;
inline void Sub44GroupSyncMsg::clear_msgseq() {
  _impl_.msgseq_ = int64_t{0};
}
inline int64_t Sub44GroupSyncMsg::_internal_msgseq() const {
  return _impl_.msgseq_;
}
inline int64_t Sub44GroupSyncMsg::msgseq() const {
  // @@protoc_insertion_point(field_get:Sub44GroupSyncMsg.msgSeq)
  return _internal_msgseq();
}
inline void Sub44GroupSyncMsg::_internal_set_msgseq(int64_t value) {
  
  _impl_.msgseq_ = value;
}
inline void Sub44GroupSyncMsg::set_msgseq(int64_t value) {
  _internal_set_msgseq(value);
  // @@protoc_insertion_point(field_set:Sub44GroupSyncMsg.msgSeq)
}

// int64 grpCode = 3;
inline void Sub44GroupSyncMsg::clear_grpcode() {
  _impl_.grpcode_ = int64_t{0};
}
inline int64_t Sub44GroupSyncMsg::_internal_grpcode() const {
  return _impl_.grpcode_;
}
inline int64_t Sub44GroupSyncMsg::grpcode() const {
  // @@protoc_insertion_point(field_get:Sub44GroupSyncMsg.grpCode)
  return _internal_grpcode();
}
inline void Sub44GroupSyncMsg::_internal_set_grpcode(int64_t value) {
  
  _impl_.grpcode_ = value;
}
inline void Sub44GroupSyncMsg::set_grpcode(int64_t value) {
  _internal_set_grpcode(value);
  // @@protoc_insertion_point(field_set:Sub44GroupSyncMsg.grpCode)
}

// int64 gaCode = 4;
inline void Sub44GroupSyncMsg::clear_gacode() {
  _impl_.gacode_ = int64_t{0};
}
inline int64_t Sub44GroupSyncMsg::_internal_gacode() const {
  return _impl_.gacode_;
}
inline int64_t Sub44GroupSyncMsg::gacode() const {
  // @@protoc_insertion_point(field_get:Sub44GroupSyncMsg.gaCode)
  return _internal_gacode();
}
inline void Sub44GroupSyncMsg::_internal_set_gacode(int64_t value) {
  
  _impl_.gacode_ = value;
}
inline void Sub44GroupSyncMsg::set_gacode(int64_t value) {
  _internal_set_gacode(value);
  // @@protoc_insertion_point(field_set:Sub44GroupSyncMsg.gaCode)
}

// int64 optUin1 = 5;
inline void Sub44GroupSyncMsg::clear_optuin1() {
  _impl_.optuin1_ = int64_t{0};
}
inline int64_t Sub44GroupSyncMsg::_internal_optuin1() const {
  return _impl_.optuin1_;
}
inline int64_t Sub44GroupSyncMsg::optuin1() const {
  // @@protoc_insertion_point(field_get:Sub44GroupSyncMsg.optUin1)
  return _internal_optuin1();
}
inline void Sub44GroupSyncMsg::_internal_set_optuin1(int64_t value) {
  
  _impl_.optuin1_ = value;
}
inline void Sub44GroupSyncMsg::set_optuin1(int64_t value) {
  _internal_set_optuin1(value);
  // @@protoc_insertion_point(field_set:Sub44GroupSyncMsg.optUin1)
}

// int64 optUin2 = 6;
inline void Sub44GroupSyncMsg::clear_optuin2() {
  _impl_.optuin2_ = int64_t{0};
}
inline int64_t Sub44GroupSyncMsg::_internal_optuin2() const {
  return _impl_.optuin2_;
}
inline int64_t Sub44GroupSyncMsg::optuin2() const {
  // @@protoc_insertion_point(field_get:Sub44GroupSyncMsg.optUin2)
  return _internal_optuin2();
}
inline void Sub44GroupSyncMsg::_internal_set_optuin2(int64_t value) {
  
  _impl_.optuin2_ = value;
}
inline void Sub44GroupSyncMsg::set_optuin2(int64_t value) {
  _internal_set_optuin2(value);
  // @@protoc_insertion_point(field_set:Sub44GroupSyncMsg.optUin2)
}

// bytes msgBuf = 7;
inline void Sub44GroupSyncMsg::clear_msgbuf() {
  _impl_.msgbuf_.ClearToEmpty();
}
inline const std::string& Sub44GroupSyncMsg::msgbuf() const {
  // @@protoc_insertion_point(field_get:Sub44GroupSyncMsg.msgBuf)
  return _internal_msgbuf();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sub44GroupSyncMsg::set_msgbuf(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msgbuf_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Sub44GroupSyncMsg.msgBuf)
}
inline std::string* Sub44GroupSyncMsg::mutable_msgbuf() {
  std::string* _s = _internal_mutable_msgbuf();
  // @@protoc_insertion_point(field_mutable:Sub44GroupSyncMsg.msgBuf)
  return _s;
}
inline const std::string& Sub44GroupSyncMsg::_internal_msgbuf() const {
  return _impl_.msgbuf_.Get();
}
inline void Sub44GroupSyncMsg::_internal_set_msgbuf(const std::string& value) {
  
  _impl_.msgbuf_.Set(value, GetArenaForAllocation());
}
inline std::string* Sub44GroupSyncMsg::_internal_mutable_msgbuf() {
  
  return _impl_.msgbuf_.Mutable(GetArenaForAllocation());
}
inline std::string* Sub44GroupSyncMsg::release_msgbuf() {
  // @@protoc_insertion_point(field_release:Sub44GroupSyncMsg.msgBuf)
  return _impl_.msgbuf_.Release();
}
inline void Sub44GroupSyncMsg::set_allocated_msgbuf(std::string* msgbuf) {
  if (msgbuf != nullptr) {
    
  } else {
    
  }
  _impl_.msgbuf_.SetAllocated(msgbuf, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msgbuf_.IsDefault()) {
    _impl_.msgbuf_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Sub44GroupSyncMsg.msgBuf)
}

// bytes authKey = 8;
inline void Sub44GroupSyncMsg::clear_authkey() {
  _impl_.authkey_.ClearToEmpty();
}
inline const std::string& Sub44GroupSyncMsg::authkey() const {
  // @@protoc_insertion_point(field_get:Sub44GroupSyncMsg.authKey)
  return _internal_authkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sub44GroupSyncMsg::set_authkey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.authkey_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Sub44GroupSyncMsg.authKey)
}
inline std::string* Sub44GroupSyncMsg::mutable_authkey() {
  std::string* _s = _internal_mutable_authkey();
  // @@protoc_insertion_point(field_mutable:Sub44GroupSyncMsg.authKey)
  return _s;
}
inline const std::string& Sub44GroupSyncMsg::_internal_authkey() const {
  return _impl_.authkey_.Get();
}
inline void Sub44GroupSyncMsg::_internal_set_authkey(const std::string& value) {
  
  _impl_.authkey_.Set(value, GetArenaForAllocation());
}
inline std::string* Sub44GroupSyncMsg::_internal_mutable_authkey() {
  
  return _impl_.authkey_.Mutable(GetArenaForAllocation());
}
inline std::string* Sub44GroupSyncMsg::release_authkey() {
  // @@protoc_insertion_point(field_release:Sub44GroupSyncMsg.authKey)
  return _impl_.authkey_.Release();
}
inline void Sub44GroupSyncMsg::set_allocated_authkey(std::string* authkey) {
  if (authkey != nullptr) {
    
  } else {
    
  }
  _impl_.authkey_.SetAllocated(authkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.authkey_.IsDefault()) {
    _impl_.authkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Sub44GroupSyncMsg.authKey)
}

// int32 msgStatus = 9;
inline void Sub44GroupSyncMsg::clear_msgstatus() {
  _impl_.msgstatus_ = 0;
}
inline int32_t Sub44GroupSyncMsg::_internal_msgstatus() const {
  return _impl_.msgstatus_;
}
inline int32_t Sub44GroupSyncMsg::msgstatus() const {
  // @@protoc_insertion_point(field_get:Sub44GroupSyncMsg.msgStatus)
  return _internal_msgstatus();
}
inline void Sub44GroupSyncMsg::_internal_set_msgstatus(int32_t value) {
  
  _impl_.msgstatus_ = value;
}
inline void Sub44GroupSyncMsg::set_msgstatus(int32_t value) {
  _internal_set_msgstatus(value);
  // @@protoc_insertion_point(field_set:Sub44GroupSyncMsg.msgStatus)
}

// int64 actionUin = 10;
inline void Sub44GroupSyncMsg::clear_actionuin() {
  _impl_.actionuin_ = int64_t{0};
}
inline int64_t Sub44GroupSyncMsg::_internal_actionuin() const {
  return _impl_.actionuin_;
}
inline int64_t Sub44GroupSyncMsg::actionuin() const {
  // @@protoc_insertion_point(field_get:Sub44GroupSyncMsg.actionUin)
  return _internal_actionuin();
}
inline void Sub44GroupSyncMsg::_internal_set_actionuin(int64_t value) {
  
  _impl_.actionuin_ = value;
}
inline void Sub44GroupSyncMsg::set_actionuin(int64_t value) {
  _internal_set_actionuin(value);
  // @@protoc_insertion_point(field_set:Sub44GroupSyncMsg.actionUin)
}

// int64 actionTime = 11;
inline void Sub44GroupSyncMsg::clear_actiontime() {
  _impl_.actiontime_ = int64_t{0};
}
inline int64_t Sub44GroupSyncMsg::_internal_actiontime() const {
  return _impl_.actiontime_;
}
inline int64_t Sub44GroupSyncMsg::actiontime() const {
  // @@protoc_insertion_point(field_get:Sub44GroupSyncMsg.actionTime)
  return _internal_actiontime();
}
inline void Sub44GroupSyncMsg::_internal_set_actiontime(int64_t value) {
  
  _impl_.actiontime_ = value;
}
inline void Sub44GroupSyncMsg::set_actiontime(int64_t value) {
  _internal_set_actiontime(value);
  // @@protoc_insertion_point(field_set:Sub44GroupSyncMsg.actionTime)
}

// int32 curMaxMemCount = 12;
inline void Sub44GroupSyncMsg::clear_curmaxmemcount() {
  _impl_.curmaxmemcount_ = 0;
}
inline int32_t Sub44GroupSyncMsg::_internal_curmaxmemcount() const {
  return _impl_.curmaxmemcount_;
}
inline int32_t Sub44GroupSyncMsg::curmaxmemcount() const {
  // @@protoc_insertion_point(field_get:Sub44GroupSyncMsg.curMaxMemCount)
  return _internal_curmaxmemcount();
}
inline void Sub44GroupSyncMsg::_internal_set_curmaxmemcount(int32_t value) {
  
  _impl_.curmaxmemcount_ = value;
}
inline void Sub44GroupSyncMsg::set_curmaxmemcount(int32_t value) {
  _internal_set_curmaxmemcount(value);
  // @@protoc_insertion_point(field_set:Sub44GroupSyncMsg.curMaxMemCount)
}

// int32 nextMaxMemCount = 13;
inline void Sub44GroupSyncMsg::clear_nextmaxmemcount() {
  _impl_.nextmaxmemcount_ = 0;
}
inline int32_t Sub44GroupSyncMsg::_internal_nextmaxmemcount() const {
  return _impl_.nextmaxmemcount_;
}
inline int32_t Sub44GroupSyncMsg::nextmaxmemcount() const {
  // @@protoc_insertion_point(field_get:Sub44GroupSyncMsg.nextMaxMemCount)
  return _internal_nextmaxmemcount();
}
inline void Sub44GroupSyncMsg::_internal_set_nextmaxmemcount(int32_t value) {
  
  _impl_.nextmaxmemcount_ = value;
}
inline void Sub44GroupSyncMsg::set_nextmaxmemcount(int32_t value) {
  _internal_set_nextmaxmemcount(value);
  // @@protoc_insertion_point(field_set:Sub44GroupSyncMsg.nextMaxMemCount)
}

// int32 curMemCount = 14;
inline void Sub44GroupSyncMsg::clear_curmemcount() {
  _impl_.curmemcount_ = 0;
}
inline int32_t Sub44GroupSyncMsg::_internal_curmemcount() const {
  return _impl_.curmemcount_;
}
inline int32_t Sub44GroupSyncMsg::curmemcount() const {
  // @@protoc_insertion_point(field_get:Sub44GroupSyncMsg.curMemCount)
  return _internal_curmemcount();
}
inline void Sub44GroupSyncMsg::_internal_set_curmemcount(int32_t value) {
  
  _impl_.curmemcount_ = value;
}
inline void Sub44GroupSyncMsg::set_curmemcount(int32_t value) {
  _internal_set_curmemcount(value);
  // @@protoc_insertion_point(field_set:Sub44GroupSyncMsg.curMemCount)
}

// int32 reqSrcId = 15;
inline void Sub44GroupSyncMsg::clear_reqsrcid() {
  _impl_.reqsrcid_ = 0;
}
inline int32_t Sub44GroupSyncMsg::_internal_reqsrcid() const {
  return _impl_.reqsrcid_;
}
inline int32_t Sub44GroupSyncMsg::reqsrcid() const {
  // @@protoc_insertion_point(field_get:Sub44GroupSyncMsg.reqSrcId)
  return _internal_reqsrcid();
}
inline void Sub44GroupSyncMsg::_internal_set_reqsrcid(int32_t value) {
  
  _impl_.reqsrcid_ = value;
}
inline void Sub44GroupSyncMsg::set_reqsrcid(int32_t value) {
  _internal_set_reqsrcid(value);
  // @@protoc_insertion_point(field_set:Sub44GroupSyncMsg.reqSrcId)
}

// int32 reqSrcSubId = 16;
inline void Sub44GroupSyncMsg::clear_reqsrcsubid() {
  _impl_.reqsrcsubid_ = 0;
}
inline int32_t Sub44GroupSyncMsg::_internal_reqsrcsubid() const {
  return _impl_.reqsrcsubid_;
}
inline int32_t Sub44GroupSyncMsg::reqsrcsubid() const {
  // @@protoc_insertion_point(field_get:Sub44GroupSyncMsg.reqSrcSubId)
  return _internal_reqsrcsubid();
}
inline void Sub44GroupSyncMsg::_internal_set_reqsrcsubid(int32_t value) {
  
  _impl_.reqsrcsubid_ = value;
}
inline void Sub44GroupSyncMsg::set_reqsrcsubid(int32_t value) {
  _internal_set_reqsrcsubid(value);
  // @@protoc_insertion_point(field_set:Sub44GroupSyncMsg.reqSrcSubId)
}

// int32 inviterRole = 17;
inline void Sub44GroupSyncMsg::clear_inviterrole() {
  _impl_.inviterrole_ = 0;
}
inline int32_t Sub44GroupSyncMsg::_internal_inviterrole() const {
  return _impl_.inviterrole_;
}
inline int32_t Sub44GroupSyncMsg::inviterrole() const {
  // @@protoc_insertion_point(field_get:Sub44GroupSyncMsg.inviterRole)
  return _internal_inviterrole();
}
inline void Sub44GroupSyncMsg::_internal_set_inviterrole(int32_t value) {
  
  _impl_.inviterrole_ = value;
}
inline void Sub44GroupSyncMsg::set_inviterrole(int32_t value) {
  _internal_set_inviterrole(value);
  // @@protoc_insertion_point(field_set:Sub44GroupSyncMsg.inviterRole)
}

// int32 extAdminNum = 18;
inline void Sub44GroupSyncMsg::clear_extadminnum() {
  _impl_.extadminnum_ = 0;
}
inline int32_t Sub44GroupSyncMsg::_internal_extadminnum() const {
  return _impl_.extadminnum_;
}
inline int32_t Sub44GroupSyncMsg::extadminnum() const {
  // @@protoc_insertion_point(field_get:Sub44GroupSyncMsg.extAdminNum)
  return _internal_extadminnum();
}
inline void Sub44GroupSyncMsg::_internal_set_extadminnum(int32_t value) {
  
  _impl_.extadminnum_ = value;
}
inline void Sub44GroupSyncMsg::set_extadminnum(int32_t value) {
  _internal_set_extadminnum(value);
  // @@protoc_insertion_point(field_set:Sub44GroupSyncMsg.extAdminNum)
}

// int32 processFlag = 19;
inline void Sub44GroupSyncMsg::clear_processflag() {
  _impl_.processflag_ = 0;
}
inline int32_t Sub44GroupSyncMsg::_internal_processflag() const {
  return _impl_.processflag_;
}
inline int32_t Sub44GroupSyncMsg::processflag() const {
  // @@protoc_insertion_point(field_get:Sub44GroupSyncMsg.processFlag)
  return _internal_processflag();
}
inline void Sub44GroupSyncMsg::_internal_set_processflag(int32_t value) {
  
  _impl_.processflag_ = value;
}
inline void Sub44GroupSyncMsg::set_processflag(int32_t value) {
  _internal_set_processflag(value);
  // @@protoc_insertion_point(field_set:Sub44GroupSyncMsg.processFlag)
}

// -------------------------------------------------------------------

// GroupMemberReqBody

// int64 groupCode = 1;
inline void GroupMemberReqBody::clear_groupcode() {
  _impl_.groupcode_ = int64_t{0};
}
inline int64_t GroupMemberReqBody::_internal_groupcode() const {
  return _impl_.groupcode_;
}
inline int64_t GroupMemberReqBody::groupcode() const {
  // @@protoc_insertion_point(field_get:GroupMemberReqBody.groupCode)
  return _internal_groupcode();
}
inline void GroupMemberReqBody::_internal_set_groupcode(int64_t value) {
  
  _impl_.groupcode_ = value;
}
inline void GroupMemberReqBody::set_groupcode(int64_t value) {
  _internal_set_groupcode(value);
  // @@protoc_insertion_point(field_set:GroupMemberReqBody.groupCode)
}

// int64 uin = 2;
inline void GroupMemberReqBody::clear_uin() {
  _impl_.uin_ = int64_t{0};
}
inline int64_t GroupMemberReqBody::_internal_uin() const {
  return _impl_.uin_;
}
inline int64_t GroupMemberReqBody::uin() const {
  // @@protoc_insertion_point(field_get:GroupMemberReqBody.uin)
  return _internal_uin();
}
inline void GroupMemberReqBody::_internal_set_uin(int64_t value) {
  
  _impl_.uin_ = value;
}
inline void GroupMemberReqBody::set_uin(int64_t value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:GroupMemberReqBody.uin)
}

// bool newClient = 3;
inline void GroupMemberReqBody::clear_newclient() {
  _impl_.newclient_ = false;
}
inline bool GroupMemberReqBody::_internal_newclient() const {
  return _impl_.newclient_;
}
inline bool GroupMemberReqBody::newclient() const {
  // @@protoc_insertion_point(field_get:GroupMemberReqBody.newClient)
  return _internal_newclient();
}
inline void GroupMemberReqBody::_internal_set_newclient(bool value) {
  
  _impl_.newclient_ = value;
}
inline void GroupMemberReqBody::set_newclient(bool value) {
  _internal_set_newclient(value);
  // @@protoc_insertion_point(field_set:GroupMemberReqBody.newClient)
}

// int32 clientType = 4;
inline void GroupMemberReqBody::clear_clienttype() {
  _impl_.clienttype_ = 0;
}
inline int32_t GroupMemberReqBody::_internal_clienttype() const {
  return _impl_.clienttype_;
}
inline int32_t GroupMemberReqBody::clienttype() const {
  // @@protoc_insertion_point(field_get:GroupMemberReqBody.clientType)
  return _internal_clienttype();
}
inline void GroupMemberReqBody::_internal_set_clienttype(int32_t value) {
  
  _impl_.clienttype_ = value;
}
inline void GroupMemberReqBody::set_clienttype(int32_t value) {
  _internal_set_clienttype(value);
  // @@protoc_insertion_point(field_set:GroupMemberReqBody.clientType)
}

// int32 richCardNameVer = 5;
inline void GroupMemberReqBody::clear_richcardnamever() {
  _impl_.richcardnamever_ = 0;
}
inline int32_t GroupMemberReqBody::_internal_richcardnamever() const {
  return _impl_.richcardnamever_;
}
inline int32_t GroupMemberReqBody::richcardnamever() const {
  // @@protoc_insertion_point(field_get:GroupMemberReqBody.richCardNameVer)
  return _internal_richcardnamever();
}
inline void GroupMemberReqBody::_internal_set_richcardnamever(int32_t value) {
  
  _impl_.richcardnamever_ = value;
}
inline void GroupMemberReqBody::set_richcardnamever(int32_t value) {
  _internal_set_richcardnamever(value);
  // @@protoc_insertion_point(field_set:GroupMemberReqBody.richCardNameVer)
}

// -------------------------------------------------------------------

// GroupMemberRspBody

// int64 groupCode = 1;
inline void GroupMemberRspBody::clear_groupcode() {
  _impl_.groupcode_ = int64_t{0};
}
inline int64_t GroupMemberRspBody::_internal_groupcode() const {
  return _impl_.groupcode_;
}
inline int64_t GroupMemberRspBody::groupcode() const {
  // @@protoc_insertion_point(field_get:GroupMemberRspBody.groupCode)
  return _internal_groupcode();
}
inline void GroupMemberRspBody::_internal_set_groupcode(int64_t value) {
  
  _impl_.groupcode_ = value;
}
inline void GroupMemberRspBody::set_groupcode(int64_t value) {
  _internal_set_groupcode(value);
  // @@protoc_insertion_point(field_set:GroupMemberRspBody.groupCode)
}

// int32 selfRole = 2;
inline void GroupMemberRspBody::clear_selfrole() {
  _impl_.selfrole_ = 0;
}
inline int32_t GroupMemberRspBody::_internal_selfrole() const {
  return _impl_.selfrole_;
}
inline int32_t GroupMemberRspBody::selfrole() const {
  // @@protoc_insertion_point(field_get:GroupMemberRspBody.selfRole)
  return _internal_selfrole();
}
inline void GroupMemberRspBody::_internal_set_selfrole(int32_t value) {
  
  _impl_.selfrole_ = value;
}
inline void GroupMemberRspBody::set_selfrole(int32_t value) {
  _internal_set_selfrole(value);
  // @@protoc_insertion_point(field_set:GroupMemberRspBody.selfRole)
}

// .GroupMemberInfo memInfo = 3;
inline bool GroupMemberRspBody::_internal_has_meminfo() const {
  return this != internal_default_instance() && _impl_.meminfo_ != nullptr;
}
inline bool GroupMemberRspBody::has_meminfo() const {
  return _internal_has_meminfo();
}
inline void GroupMemberRspBody::clear_meminfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.meminfo_ != nullptr) {
    delete _impl_.meminfo_;
  }
  _impl_.meminfo_ = nullptr;
}
inline const ::GroupMemberInfo& GroupMemberRspBody::_internal_meminfo() const {
  const ::GroupMemberInfo* p = _impl_.meminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::GroupMemberInfo&>(
      ::_GroupMemberInfo_default_instance_);
}
inline const ::GroupMemberInfo& GroupMemberRspBody::meminfo() const {
  // @@protoc_insertion_point(field_get:GroupMemberRspBody.memInfo)
  return _internal_meminfo();
}
inline void GroupMemberRspBody::unsafe_arena_set_allocated_meminfo(
    ::GroupMemberInfo* meminfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meminfo_);
  }
  _impl_.meminfo_ = meminfo;
  if (meminfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GroupMemberRspBody.memInfo)
}
inline ::GroupMemberInfo* GroupMemberRspBody::release_meminfo() {
  
  ::GroupMemberInfo* temp = _impl_.meminfo_;
  _impl_.meminfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GroupMemberInfo* GroupMemberRspBody::unsafe_arena_release_meminfo() {
  // @@protoc_insertion_point(field_release:GroupMemberRspBody.memInfo)
  
  ::GroupMemberInfo* temp = _impl_.meminfo_;
  _impl_.meminfo_ = nullptr;
  return temp;
}
inline ::GroupMemberInfo* GroupMemberRspBody::_internal_mutable_meminfo() {
  
  if (_impl_.meminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::GroupMemberInfo>(GetArenaForAllocation());
    _impl_.meminfo_ = p;
  }
  return _impl_.meminfo_;
}
inline ::GroupMemberInfo* GroupMemberRspBody::mutable_meminfo() {
  ::GroupMemberInfo* _msg = _internal_mutable_meminfo();
  // @@protoc_insertion_point(field_mutable:GroupMemberRspBody.memInfo)
  return _msg;
}
inline void GroupMemberRspBody::set_allocated_meminfo(::GroupMemberInfo* meminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meminfo_;
  }
  if (meminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meminfo);
    if (message_arena != submessage_arena) {
      meminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meminfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.meminfo_ = meminfo;
  // @@protoc_insertion_point(field_set_allocated:GroupMemberRspBody.memInfo)
}

// bool boolSelfLocationShared = 4;
inline void GroupMemberRspBody::clear_boolselflocationshared() {
  _impl_.boolselflocationshared_ = false;
}
inline bool GroupMemberRspBody::_internal_boolselflocationshared() const {
  return _impl_.boolselflocationshared_;
}
inline bool GroupMemberRspBody::boolselflocationshared() const {
  // @@protoc_insertion_point(field_get:GroupMemberRspBody.boolSelfLocationShared)
  return _internal_boolselflocationshared();
}
inline void GroupMemberRspBody::_internal_set_boolselflocationshared(bool value) {
  
  _impl_.boolselflocationshared_ = value;
}
inline void GroupMemberRspBody::set_boolselflocationshared(bool value) {
  _internal_set_boolselflocationshared(value);
  // @@protoc_insertion_point(field_set:GroupMemberRspBody.boolSelfLocationShared)
}

// int32 groupType = 5;
inline void GroupMemberRspBody::clear_grouptype() {
  _impl_.grouptype_ = 0;
}
inline int32_t GroupMemberRspBody::_internal_grouptype() const {
  return _impl_.grouptype_;
}
inline int32_t GroupMemberRspBody::grouptype() const {
  // @@protoc_insertion_point(field_get:GroupMemberRspBody.groupType)
  return _internal_grouptype();
}
inline void GroupMemberRspBody::_internal_set_grouptype(int32_t value) {
  
  _impl_.grouptype_ = value;
}
inline void GroupMemberRspBody::set_grouptype(int32_t value) {
  _internal_set_grouptype(value);
  // @@protoc_insertion_point(field_set:GroupMemberRspBody.groupType)
}

// -------------------------------------------------------------------

// GroupMemberInfo

// int64 uin = 1;
inline void GroupMemberInfo::clear_uin() {
  _impl_.uin_ = int64_t{0};
}
inline int64_t GroupMemberInfo::_internal_uin() const {
  return _impl_.uin_;
}
inline int64_t GroupMemberInfo::uin() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.uin)
  return _internal_uin();
}
inline void GroupMemberInfo::_internal_set_uin(int64_t value) {
  
  _impl_.uin_ = value;
}
inline void GroupMemberInfo::set_uin(int64_t value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.uin)
}

// int32 result = 2;
inline void GroupMemberInfo::clear_result() {
  _impl_.result_ = 0;
}
inline int32_t GroupMemberInfo::_internal_result() const {
  return _impl_.result_;
}
inline int32_t GroupMemberInfo::result() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.result)
  return _internal_result();
}
inline void GroupMemberInfo::_internal_set_result(int32_t value) {
  
  _impl_.result_ = value;
}
inline void GroupMemberInfo::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.result)
}

// bytes errmsg = 3;
inline void GroupMemberInfo::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::errmsg() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GroupMemberInfo.errmsg)
}
inline std::string* GroupMemberInfo::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:GroupMemberInfo.errmsg)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void GroupMemberInfo::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_errmsg() {
  // @@protoc_insertion_point(field_release:GroupMemberInfo.errmsg)
  return _impl_.errmsg_.Release();
}
inline void GroupMemberInfo::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GroupMemberInfo.errmsg)
}

// bool IsFriend = 4;
inline void GroupMemberInfo::clear_isfriend() {
  _impl_.isfriend_ = false;
}
inline bool GroupMemberInfo::_internal_isfriend() const {
  return _impl_.isfriend_;
}
inline bool GroupMemberInfo::isfriend() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.IsFriend)
  return _internal_isfriend();
}
inline void GroupMemberInfo::_internal_set_isfriend(bool value) {
  
  _impl_.isfriend_ = value;
}
inline void GroupMemberInfo::set_isfriend(bool value) {
  _internal_set_isfriend(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.IsFriend)
}

// bytes remark = 5;
inline void GroupMemberInfo::clear_remark() {
  _impl_.remark_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::remark() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.remark)
  return _internal_remark();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_remark(ArgT0&& arg0, ArgT... args) {
 
 _impl_.remark_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GroupMemberInfo.remark)
}
inline std::string* GroupMemberInfo::mutable_remark() {
  std::string* _s = _internal_mutable_remark();
  // @@protoc_insertion_point(field_mutable:GroupMemberInfo.remark)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_remark() const {
  return _impl_.remark_.Get();
}
inline void GroupMemberInfo::_internal_set_remark(const std::string& value) {
  
  _impl_.remark_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_remark() {
  
  return _impl_.remark_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_remark() {
  // @@protoc_insertion_point(field_release:GroupMemberInfo.remark)
  return _impl_.remark_.Release();
}
inline void GroupMemberInfo::set_allocated_remark(std::string* remark) {
  if (remark != nullptr) {
    
  } else {
    
  }
  _impl_.remark_.SetAllocated(remark, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.remark_.IsDefault()) {
    _impl_.remark_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GroupMemberInfo.remark)
}

// bool IsConcerned = 6;
inline void GroupMemberInfo::clear_isconcerned() {
  _impl_.isconcerned_ = false;
}
inline bool GroupMemberInfo::_internal_isconcerned() const {
  return _impl_.isconcerned_;
}
inline bool GroupMemberInfo::isconcerned() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.IsConcerned)
  return _internal_isconcerned();
}
inline void GroupMemberInfo::_internal_set_isconcerned(bool value) {
  
  _impl_.isconcerned_ = value;
}
inline void GroupMemberInfo::set_isconcerned(bool value) {
  _internal_set_isconcerned(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.IsConcerned)
}

// int32 credit = 7;
inline void GroupMemberInfo::clear_credit() {
  _impl_.credit_ = 0;
}
inline int32_t GroupMemberInfo::_internal_credit() const {
  return _impl_.credit_;
}
inline int32_t GroupMemberInfo::credit() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.credit)
  return _internal_credit();
}
inline void GroupMemberInfo::_internal_set_credit(int32_t value) {
  
  _impl_.credit_ = value;
}
inline void GroupMemberInfo::set_credit(int32_t value) {
  _internal_set_credit(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.credit)
}

// bytes card = 8;
inline void GroupMemberInfo::clear_card() {
  _impl_.card_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::card() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.card)
  return _internal_card();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_card(ArgT0&& arg0, ArgT... args) {
 
 _impl_.card_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GroupMemberInfo.card)
}
inline std::string* GroupMemberInfo::mutable_card() {
  std::string* _s = _internal_mutable_card();
  // @@protoc_insertion_point(field_mutable:GroupMemberInfo.card)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_card() const {
  return _impl_.card_.Get();
}
inline void GroupMemberInfo::_internal_set_card(const std::string& value) {
  
  _impl_.card_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_card() {
  
  return _impl_.card_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_card() {
  // @@protoc_insertion_point(field_release:GroupMemberInfo.card)
  return _impl_.card_.Release();
}
inline void GroupMemberInfo::set_allocated_card(std::string* card) {
  if (card != nullptr) {
    
  } else {
    
  }
  _impl_.card_.SetAllocated(card, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.card_.IsDefault()) {
    _impl_.card_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GroupMemberInfo.card)
}

// int32 sex = 9;
inline void GroupMemberInfo::clear_sex() {
  _impl_.sex_ = 0;
}
inline int32_t GroupMemberInfo::_internal_sex() const {
  return _impl_.sex_;
}
inline int32_t GroupMemberInfo::sex() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.sex)
  return _internal_sex();
}
inline void GroupMemberInfo::_internal_set_sex(int32_t value) {
  
  _impl_.sex_ = value;
}
inline void GroupMemberInfo::set_sex(int32_t value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.sex)
}

// bytes location = 10;
inline void GroupMemberInfo::clear_location() {
  _impl_.location_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::location() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_location(ArgT0&& arg0, ArgT... args) {
 
 _impl_.location_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GroupMemberInfo.location)
}
inline std::string* GroupMemberInfo::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GroupMemberInfo.location)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_location() const {
  return _impl_.location_.Get();
}
inline void GroupMemberInfo::_internal_set_location(const std::string& value) {
  
  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_location() {
  
  return _impl_.location_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_location() {
  // @@protoc_insertion_point(field_release:GroupMemberInfo.location)
  return _impl_.location_.Release();
}
inline void GroupMemberInfo::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  _impl_.location_.SetAllocated(location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GroupMemberInfo.location)
}

// bytes nick = 11;
inline void GroupMemberInfo::clear_nick() {
  _impl_.nick_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::nick() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.nick)
  return _internal_nick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_nick(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nick_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GroupMemberInfo.nick)
}
inline std::string* GroupMemberInfo::mutable_nick() {
  std::string* _s = _internal_mutable_nick();
  // @@protoc_insertion_point(field_mutable:GroupMemberInfo.nick)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_nick() const {
  return _impl_.nick_.Get();
}
inline void GroupMemberInfo::_internal_set_nick(const std::string& value) {
  
  _impl_.nick_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_nick() {
  
  return _impl_.nick_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_nick() {
  // @@protoc_insertion_point(field_release:GroupMemberInfo.nick)
  return _impl_.nick_.Release();
}
inline void GroupMemberInfo::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  _impl_.nick_.SetAllocated(nick, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nick_.IsDefault()) {
    _impl_.nick_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GroupMemberInfo.nick)
}

// int32 age = 12;
inline void GroupMemberInfo::clear_age() {
  _impl_.age_ = 0;
}
inline int32_t GroupMemberInfo::_internal_age() const {
  return _impl_.age_;
}
inline int32_t GroupMemberInfo::age() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.age)
  return _internal_age();
}
inline void GroupMemberInfo::_internal_set_age(int32_t value) {
  
  _impl_.age_ = value;
}
inline void GroupMemberInfo::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.age)
}

// bytes lev = 13;
inline void GroupMemberInfo::clear_lev() {
  _impl_.lev_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::lev() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.lev)
  return _internal_lev();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_lev(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lev_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GroupMemberInfo.lev)
}
inline std::string* GroupMemberInfo::mutable_lev() {
  std::string* _s = _internal_mutable_lev();
  // @@protoc_insertion_point(field_mutable:GroupMemberInfo.lev)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_lev() const {
  return _impl_.lev_.Get();
}
inline void GroupMemberInfo::_internal_set_lev(const std::string& value) {
  
  _impl_.lev_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_lev() {
  
  return _impl_.lev_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_lev() {
  // @@protoc_insertion_point(field_release:GroupMemberInfo.lev)
  return _impl_.lev_.Release();
}
inline void GroupMemberInfo::set_allocated_lev(std::string* lev) {
  if (lev != nullptr) {
    
  } else {
    
  }
  _impl_.lev_.SetAllocated(lev, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lev_.IsDefault()) {
    _impl_.lev_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GroupMemberInfo.lev)
}

// int64 join = 14;
inline void GroupMemberInfo::clear_join() {
  _impl_.join_ = int64_t{0};
}
inline int64_t GroupMemberInfo::_internal_join() const {
  return _impl_.join_;
}
inline int64_t GroupMemberInfo::join() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.join)
  return _internal_join();
}
inline void GroupMemberInfo::_internal_set_join(int64_t value) {
  
  _impl_.join_ = value;
}
inline void GroupMemberInfo::set_join(int64_t value) {
  _internal_set_join(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.join)
}

// int64 lastSpeak = 15;
inline void GroupMemberInfo::clear_lastspeak() {
  _impl_.lastspeak_ = int64_t{0};
}
inline int64_t GroupMemberInfo::_internal_lastspeak() const {
  return _impl_.lastspeak_;
}
inline int64_t GroupMemberInfo::lastspeak() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.lastSpeak)
  return _internal_lastspeak();
}
inline void GroupMemberInfo::_internal_set_lastspeak(int64_t value) {
  
  _impl_.lastspeak_ = value;
}
inline void GroupMemberInfo::set_lastspeak(int64_t value) {
  _internal_set_lastspeak(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.lastSpeak)
}

// bytes gbarTitle = 18;
inline void GroupMemberInfo::clear_gbartitle() {
  _impl_.gbartitle_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::gbartitle() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.gbarTitle)
  return _internal_gbartitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_gbartitle(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gbartitle_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GroupMemberInfo.gbarTitle)
}
inline std::string* GroupMemberInfo::mutable_gbartitle() {
  std::string* _s = _internal_mutable_gbartitle();
  // @@protoc_insertion_point(field_mutable:GroupMemberInfo.gbarTitle)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_gbartitle() const {
  return _impl_.gbartitle_.Get();
}
inline void GroupMemberInfo::_internal_set_gbartitle(const std::string& value) {
  
  _impl_.gbartitle_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_gbartitle() {
  
  return _impl_.gbartitle_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_gbartitle() {
  // @@protoc_insertion_point(field_release:GroupMemberInfo.gbarTitle)
  return _impl_.gbartitle_.Release();
}
inline void GroupMemberInfo::set_allocated_gbartitle(std::string* gbartitle) {
  if (gbartitle != nullptr) {
    
  } else {
    
  }
  _impl_.gbartitle_.SetAllocated(gbartitle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gbartitle_.IsDefault()) {
    _impl_.gbartitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GroupMemberInfo.gbarTitle)
}

// bytes gbarUrl = 19;
inline void GroupMemberInfo::clear_gbarurl() {
  _impl_.gbarurl_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::gbarurl() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.gbarUrl)
  return _internal_gbarurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_gbarurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gbarurl_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GroupMemberInfo.gbarUrl)
}
inline std::string* GroupMemberInfo::mutable_gbarurl() {
  std::string* _s = _internal_mutable_gbarurl();
  // @@protoc_insertion_point(field_mutable:GroupMemberInfo.gbarUrl)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_gbarurl() const {
  return _impl_.gbarurl_.Get();
}
inline void GroupMemberInfo::_internal_set_gbarurl(const std::string& value) {
  
  _impl_.gbarurl_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_gbarurl() {
  
  return _impl_.gbarurl_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_gbarurl() {
  // @@protoc_insertion_point(field_release:GroupMemberInfo.gbarUrl)
  return _impl_.gbarurl_.Release();
}
inline void GroupMemberInfo::set_allocated_gbarurl(std::string* gbarurl) {
  if (gbarurl != nullptr) {
    
  } else {
    
  }
  _impl_.gbarurl_.SetAllocated(gbarurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gbarurl_.IsDefault()) {
    _impl_.gbarurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GroupMemberInfo.gbarUrl)
}

// int32 gbarCnt = 20;
inline void GroupMemberInfo::clear_gbarcnt() {
  _impl_.gbarcnt_ = 0;
}
inline int32_t GroupMemberInfo::_internal_gbarcnt() const {
  return _impl_.gbarcnt_;
}
inline int32_t GroupMemberInfo::gbarcnt() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.gbarCnt)
  return _internal_gbarcnt();
}
inline void GroupMemberInfo::_internal_set_gbarcnt(int32_t value) {
  
  _impl_.gbarcnt_ = value;
}
inline void GroupMemberInfo::set_gbarcnt(int32_t value) {
  _internal_set_gbarcnt(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.gbarCnt)
}

// bool isAllowModCard = 21;
inline void GroupMemberInfo::clear_isallowmodcard() {
  _impl_.isallowmodcard_ = false;
}
inline bool GroupMemberInfo::_internal_isallowmodcard() const {
  return _impl_.isallowmodcard_;
}
inline bool GroupMemberInfo::isallowmodcard() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.isAllowModCard)
  return _internal_isallowmodcard();
}
inline void GroupMemberInfo::_internal_set_isallowmodcard(bool value) {
  
  _impl_.isallowmodcard_ = value;
}
inline void GroupMemberInfo::set_isallowmodcard(bool value) {
  _internal_set_isallowmodcard(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.isAllowModCard)
}

// bool isVip = 22;
inline void GroupMemberInfo::clear_isvip() {
  _impl_.isvip_ = false;
}
inline bool GroupMemberInfo::_internal_isvip() const {
  return _impl_.isvip_;
}
inline bool GroupMemberInfo::isvip() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.isVip)
  return _internal_isvip();
}
inline void GroupMemberInfo::_internal_set_isvip(bool value) {
  
  _impl_.isvip_ = value;
}
inline void GroupMemberInfo::set_isvip(bool value) {
  _internal_set_isvip(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.isVip)
}

// bool isYearVip = 23;
inline void GroupMemberInfo::clear_isyearvip() {
  _impl_.isyearvip_ = false;
}
inline bool GroupMemberInfo::_internal_isyearvip() const {
  return _impl_.isyearvip_;
}
inline bool GroupMemberInfo::isyearvip() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.isYearVip)
  return _internal_isyearvip();
}
inline void GroupMemberInfo::_internal_set_isyearvip(bool value) {
  
  _impl_.isyearvip_ = value;
}
inline void GroupMemberInfo::set_isyearvip(bool value) {
  _internal_set_isyearvip(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.isYearVip)
}

// bool isSuperVip = 24;
inline void GroupMemberInfo::clear_issupervip() {
  _impl_.issupervip_ = false;
}
inline bool GroupMemberInfo::_internal_issupervip() const {
  return _impl_.issupervip_;
}
inline bool GroupMemberInfo::issupervip() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.isSuperVip)
  return _internal_issupervip();
}
inline void GroupMemberInfo::_internal_set_issupervip(bool value) {
  
  _impl_.issupervip_ = value;
}
inline void GroupMemberInfo::set_issupervip(bool value) {
  _internal_set_issupervip(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.isSuperVip)
}

// bool isSuperQq = 25;
inline void GroupMemberInfo::clear_issuperqq() {
  _impl_.issuperqq_ = false;
}
inline bool GroupMemberInfo::_internal_issuperqq() const {
  return _impl_.issuperqq_;
}
inline bool GroupMemberInfo::issuperqq() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.isSuperQq)
  return _internal_issuperqq();
}
inline void GroupMemberInfo::_internal_set_issuperqq(bool value) {
  
  _impl_.issuperqq_ = value;
}
inline void GroupMemberInfo::set_issuperqq(bool value) {
  _internal_set_issuperqq(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.isSuperQq)
}

// int32 vipLev = 26;
inline void GroupMemberInfo::clear_viplev() {
  _impl_.viplev_ = 0;
}
inline int32_t GroupMemberInfo::_internal_viplev() const {
  return _impl_.viplev_;
}
inline int32_t GroupMemberInfo::viplev() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.vipLev)
  return _internal_viplev();
}
inline void GroupMemberInfo::_internal_set_viplev(int32_t value) {
  
  _impl_.viplev_ = value;
}
inline void GroupMemberInfo::set_viplev(int32_t value) {
  _internal_set_viplev(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.vipLev)
}

// int32 role = 27;
inline void GroupMemberInfo::clear_role() {
  _impl_.role_ = 0;
}
inline int32_t GroupMemberInfo::_internal_role() const {
  return _impl_.role_;
}
inline int32_t GroupMemberInfo::role() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.role)
  return _internal_role();
}
inline void GroupMemberInfo::_internal_set_role(int32_t value) {
  
  _impl_.role_ = value;
}
inline void GroupMemberInfo::set_role(int32_t value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.role)
}

// bool locationShared = 28;
inline void GroupMemberInfo::clear_locationshared() {
  _impl_.locationshared_ = false;
}
inline bool GroupMemberInfo::_internal_locationshared() const {
  return _impl_.locationshared_;
}
inline bool GroupMemberInfo::locationshared() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.locationShared)
  return _internal_locationshared();
}
inline void GroupMemberInfo::_internal_set_locationshared(bool value) {
  
  _impl_.locationshared_ = value;
}
inline void GroupMemberInfo::set_locationshared(bool value) {
  _internal_set_locationshared(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.locationShared)
}

// int64 int64Distance = 29;
inline void GroupMemberInfo::clear_int64distance() {
  _impl_.int64distance_ = int64_t{0};
}
inline int64_t GroupMemberInfo::_internal_int64distance() const {
  return _impl_.int64distance_;
}
inline int64_t GroupMemberInfo::int64distance() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.int64Distance)
  return _internal_int64distance();
}
inline void GroupMemberInfo::_internal_set_int64distance(int64_t value) {
  
  _impl_.int64distance_ = value;
}
inline void GroupMemberInfo::set_int64distance(int64_t value) {
  _internal_set_int64distance(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.int64Distance)
}

// int32 concernType = 30;
inline void GroupMemberInfo::clear_concerntype() {
  _impl_.concerntype_ = 0;
}
inline int32_t GroupMemberInfo::_internal_concerntype() const {
  return _impl_.concerntype_;
}
inline int32_t GroupMemberInfo::concerntype() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.concernType)
  return _internal_concerntype();
}
inline void GroupMemberInfo::_internal_set_concerntype(int32_t value) {
  
  _impl_.concerntype_ = value;
}
inline void GroupMemberInfo::set_concerntype(int32_t value) {
  _internal_set_concerntype(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.concernType)
}

// bytes specialTitle = 31;
inline void GroupMemberInfo::clear_specialtitle() {
  _impl_.specialtitle_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::specialtitle() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.specialTitle)
  return _internal_specialtitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_specialtitle(ArgT0&& arg0, ArgT... args) {
 
 _impl_.specialtitle_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GroupMemberInfo.specialTitle)
}
inline std::string* GroupMemberInfo::mutable_specialtitle() {
  std::string* _s = _internal_mutable_specialtitle();
  // @@protoc_insertion_point(field_mutable:GroupMemberInfo.specialTitle)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_specialtitle() const {
  return _impl_.specialtitle_.Get();
}
inline void GroupMemberInfo::_internal_set_specialtitle(const std::string& value) {
  
  _impl_.specialtitle_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_specialtitle() {
  
  return _impl_.specialtitle_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_specialtitle() {
  // @@protoc_insertion_point(field_release:GroupMemberInfo.specialTitle)
  return _impl_.specialtitle_.Release();
}
inline void GroupMemberInfo::set_allocated_specialtitle(std::string* specialtitle) {
  if (specialtitle != nullptr) {
    
  } else {
    
  }
  _impl_.specialtitle_.SetAllocated(specialtitle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.specialtitle_.IsDefault()) {
    _impl_.specialtitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GroupMemberInfo.specialTitle)
}

// int32 specialTitleExpireTime = 32;
inline void GroupMemberInfo::clear_specialtitleexpiretime() {
  _impl_.specialtitleexpiretime_ = 0;
}
inline int32_t GroupMemberInfo::_internal_specialtitleexpiretime() const {
  return _impl_.specialtitleexpiretime_;
}
inline int32_t GroupMemberInfo::specialtitleexpiretime() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.specialTitleExpireTime)
  return _internal_specialtitleexpiretime();
}
inline void GroupMemberInfo::_internal_set_specialtitleexpiretime(int32_t value) {
  
  _impl_.specialtitleexpiretime_ = value;
}
inline void GroupMemberInfo::set_specialtitleexpiretime(int32_t value) {
  _internal_set_specialtitleexpiretime(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.specialTitleExpireTime)
}

// bytes phoneNum = 35;
inline void GroupMemberInfo::clear_phonenum() {
  _impl_.phonenum_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::phonenum() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.phoneNum)
  return _internal_phonenum();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_phonenum(ArgT0&& arg0, ArgT... args) {
 
 _impl_.phonenum_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GroupMemberInfo.phoneNum)
}
inline std::string* GroupMemberInfo::mutable_phonenum() {
  std::string* _s = _internal_mutable_phonenum();
  // @@protoc_insertion_point(field_mutable:GroupMemberInfo.phoneNum)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_phonenum() const {
  return _impl_.phonenum_.Get();
}
inline void GroupMemberInfo::_internal_set_phonenum(const std::string& value) {
  
  _impl_.phonenum_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_phonenum() {
  
  return _impl_.phonenum_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_phonenum() {
  // @@protoc_insertion_point(field_release:GroupMemberInfo.phoneNum)
  return _impl_.phonenum_.Release();
}
inline void GroupMemberInfo::set_allocated_phonenum(std::string* phonenum) {
  if (phonenum != nullptr) {
    
  } else {
    
  }
  _impl_.phonenum_.SetAllocated(phonenum, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.phonenum_.IsDefault()) {
    _impl_.phonenum_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GroupMemberInfo.phoneNum)
}

// bytes job = 36;
inline void GroupMemberInfo::clear_job() {
  _impl_.job_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::job() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.job)
  return _internal_job();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_job(ArgT0&& arg0, ArgT... args) {
 
 _impl_.job_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GroupMemberInfo.job)
}
inline std::string* GroupMemberInfo::mutable_job() {
  std::string* _s = _internal_mutable_job();
  // @@protoc_insertion_point(field_mutable:GroupMemberInfo.job)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_job() const {
  return _impl_.job_.Get();
}
inline void GroupMemberInfo::_internal_set_job(const std::string& value) {
  
  _impl_.job_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_job() {
  
  return _impl_.job_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_job() {
  // @@protoc_insertion_point(field_release:GroupMemberInfo.job)
  return _impl_.job_.Release();
}
inline void GroupMemberInfo::set_allocated_job(std::string* job) {
  if (job != nullptr) {
    
  } else {
    
  }
  _impl_.job_.SetAllocated(job, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.job_.IsDefault()) {
    _impl_.job_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GroupMemberInfo.job)
}

// int32 medalId = 37;
inline void GroupMemberInfo::clear_medalid() {
  _impl_.medalid_ = 0;
}
inline int32_t GroupMemberInfo::_internal_medalid() const {
  return _impl_.medalid_;
}
inline int32_t GroupMemberInfo::medalid() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.medalId)
  return _internal_medalid();
}
inline void GroupMemberInfo::_internal_set_medalid(int32_t value) {
  
  _impl_.medalid_ = value;
}
inline void GroupMemberInfo::set_medalid(int32_t value) {
  _internal_set_medalid(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.medalId)
}

// int32 level = 39;
inline void GroupMemberInfo::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t GroupMemberInfo::_internal_level() const {
  return _impl_.level_;
}
inline int32_t GroupMemberInfo::level() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.level)
  return _internal_level();
}
inline void GroupMemberInfo::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void GroupMemberInfo::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:GroupMemberInfo.level)
}

// string honor = 41;
inline void GroupMemberInfo::clear_honor() {
  _impl_.honor_.ClearToEmpty();
}
inline const std::string& GroupMemberInfo::honor() const {
  // @@protoc_insertion_point(field_get:GroupMemberInfo.honor)
  return _internal_honor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMemberInfo::set_honor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.honor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GroupMemberInfo.honor)
}
inline std::string* GroupMemberInfo::mutable_honor() {
  std::string* _s = _internal_mutable_honor();
  // @@protoc_insertion_point(field_mutable:GroupMemberInfo.honor)
  return _s;
}
inline const std::string& GroupMemberInfo::_internal_honor() const {
  return _impl_.honor_.Get();
}
inline void GroupMemberInfo::_internal_set_honor(const std::string& value) {
  
  _impl_.honor_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::_internal_mutable_honor() {
  
  return _impl_.honor_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMemberInfo::release_honor() {
  // @@protoc_insertion_point(field_release:GroupMemberInfo.honor)
  return _impl_.honor_.Release();
}
inline void GroupMemberInfo::set_allocated_honor(std::string* honor) {
  if (honor != nullptr) {
    
  } else {
    
  }
  _impl_.honor_.SetAllocated(honor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.honor_.IsDefault()) {
    _impl_.honor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GroupMemberInfo.honor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_2eproto
